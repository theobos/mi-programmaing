  <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
  <head>
<title> XLATEB1 Instruction </title>
			<link rel="stylesheet" type="text/css" href="../tstudio.css">
</head>

<body>
<H1>Translate Bytes One Byte at a Time (XLATEB1)</H1>
<P>

<TABLE BORDER WIDTH="100%"><TR><TH ALIGN="LEFT">Bound program access</TH><TR><TD>
<PRE>
<P>Built-in number for XLATEB1 is 414.
XLATEB1 (
         receiver           : address of aggregate(*) for the results of
                              the translation
         source_string      : address of the source bytes to translate
         translate_table    : address of aggregate(256)
         translate_length   : unsigned binary(4) value which specifies the
                              number of bytes to translate
)
 
</PRE>
</TD></TR></TABLE>
<P>
<H5><A NAME="Header_2">Description</A></H5>
<P>Translates the data specified by <I>source string</I>
into the <I>receiver</I>. <I>Translate length</I>
specifies the number of bytes to translate.
Each byte of the <I>source string</I> is translated using the
corresponding entry in the
translation table specified by <I>translate table</I>.
<P>
Contrast this operation with <A HREF="XLATE.htm">XLATE</A>, which does not support overlapping
operands.
<P>
Bytes are translated as follows:
<UL>
<P><LI>
The source
byte value is used as an offset and added to the location of <I>translate table</I>.
<P><LI>
The byte value contained
in the offset location is the translated byte.
This value is copied to the <I>receiver</I> in
the same relative position as
the original byte value within the <I>source string</I>.
</UL>
<P>The translation table is exactly 256 bytes in length and specifies
the translated values for the 256 possible byte values.  The results
are undefined if the table is less than 256 bytes.
<P>
If <I>receiver</I> overlaps with <I>source string</I> and/or <I>translate table,</I> the overlapped operands are updated for every
byte translated.  The operation proceeds from left to right, one byte at
a time.  The following example shows the results of an overlapped
operands translate operation.  <I>Receiver, source string,</I> and <I>translate table</I> are coincident, with
a value of hex 050403020103.
<P>
Hex 050403020103 - Initial value
<P>
Hex 030403020103 - After the 1st character is translated
<P>
Hex 030103020103 - After the 2nd character is translated
<P>
Hex 030102020103 - After the 3rd character is translated
<P>
Hex 030102020103 - After the 4th character is translated
<P>
Hex 030102020103 - After the 5th character is translated
<P>
Hex 030102020102 - After the 6th character, the final result
<P>
<H4><A NAME="Header_3">Authorization Required</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_4">Lock Enforcement</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_5">Exceptions</A></H4>
<DL>
<DD><P>06 Addressing
<DL COMPACT>
<DD><A HREF="../exceptions/EX0601.htm">0601 Space Addressing Violation</A>
<DD><A HREF="../exceptions/EX0602.htm">0602 Boundary Alignment</A>
</DL>
<DD><P>08 Argument/Parameter
<DL COMPACT>
<DD><A HREF="../exceptions/EX0801.htm">0801 Parameter Reference Violation</A>
</DL>
<DD><P>22 Object Access
<DL COMPACT>
<DD><A HREF="../exceptions/EX2202.htm">2202 Object Destroyed </A>
</DL>
<DD><P>24 Pointer Specification
<DL COMPACT>
<DD> <A HREF="../exceptions/EX2401.htm">2401 Pointer Does Not Exist</A>
<DD> <A HREF="../exceptions/EX2402.htm">2402 Pointer Type Invalid </A>
</DL>
<DD><P>44 Protection Violation
<DL COMPACT>
<DD><A HREF="../exceptions/EX4401.htm">4401 Object Domain or Hardware Storage Protection Violation</A>
<DD><A HREF="../exceptions/EX4402.htm">4402 Literal Values Cannot Be Changed</A>
</DL>
</DL>

</body>

</HTML>
