  <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
  <head>
<title> MATPRMSG Instruction </title>
			<link rel="stylesheet" type="text/css" href="../tstudio.css">
</head>

<body>

<H1>Materialize Process Message (MATPRMSG)</H1>
<P>
<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Op Code (Hex)
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 1
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 2
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 3
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 4
</TH></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">039C
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Materialization template
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Message template
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Source template
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Selection template
</TD></TR></TABLE>
<P>
<I>Operand 1</I>:  Space pointer.
<P>
<I>Operand 2</I>:  Space pointer.
<P>
<I>Operand 3</I>:  Space pointer or null.
<P>
<I>Operand 4</I>:  Space pointer.
<P>
<TABLE BORDER WIDTH="100%"><TR><TH ALIGN="LEFT">Bound program access</TH><TR><TD>
<PRE>
<P>Built-in number for MATPRMSG is 127.
MATPRMSG (
          receiver_template    : address
          message_template     : address
          source_template      : address OR
                                 null operand
          selection_template   : address
)
</PRE>
</TD></TR></TABLE>
<P>
<H5><A NAME="Header_2">Warning</A></H5>
<P>
The following information is subject to change from
release to release.  Use it with caution and be
prepared to adjust for changes with each new release.
<P>
<H5><A NAME="Header_3">Description</A></H5>
<P>
A message is materialized from a queue space according to the
options specified.  The message is located on a queue space queue
specified by operand 3.  The message is selected by the
operand 4 criteria.
Operands 1 and 2 contain the materialized
information from the process message.
<P>
The template identified by
operand 1
must be 16-byte aligned.  Following
is the format of the materialization template:
<BR>
<TABLE>
<TR>
<TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="2">Offset
</TH><TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="12"><BR></TH></TR><TR>
<TH ALIGN="RIGHT" VALIGN="TOP">Dec
</TH><TH ALIGN="RIGHT" VALIGN="TOP">Hex
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Field Name
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Data Type and Length
</TH></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Template size specification
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(8)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Number of bytes provided for materialization
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">4
</TD><TD ALIGN="RIGHT" VALIGN="TOP">4
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Number of bytes available for materialization
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">8
</TD><TD ALIGN="RIGHT" VALIGN="TOP">8
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Process queue space queue offset
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">12
</TD><TD ALIGN="RIGHT" VALIGN="TOP">C
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">16
</TD><TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Time sent
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(8)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Time modified
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(8)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">32
</TD><TD ALIGN="RIGHT" VALIGN="TOP">20
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Interrupted invocation
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Invocation pointer
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">48
</TD><TD ALIGN="RIGHT" VALIGN="TOP">30
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Target invocation
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Invocation pointer
or
System pointer
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">64
</TD><TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Original target invocation
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Invocation pointer
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">80
</TD><TD ALIGN="RIGHT" VALIGN="TOP">50
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Source program location
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Suspend pointer
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">96
</TD><TD ALIGN="RIGHT" VALIGN="TOP">60
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Target program location
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Suspend pointer
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">112
</TD><TD ALIGN="RIGHT" VALIGN="TOP">70
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Originating program location
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Suspend pointer
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">128
</TD><TD ALIGN="RIGHT" VALIGN="TOP">80
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Invocation mark
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">UBin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">132
</TD><TD ALIGN="RIGHT" VALIGN="TOP">84
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Activation group mark
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">UBin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">136
</TD><TD ALIGN="RIGHT" VALIGN="TOP">88
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Thread ID
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(8)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">144
</TD><TD ALIGN="RIGHT" VALIGN="TOP">90
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">--- End ---
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
<BR></TD></TR></TABLE>
<P>
The first 4 bytes of the materialization template identify the total <B><U>number of bytes provided</U></B> for use by the instruction.
This number is supplied as input to the instruction and is not
modified by the instruction.
If the value is zero for this field, then the operand 1 template
is not returned.
A number less than 128 (but not 0)
causes the <I> materialization length invalid&nbsp;</I> (hex <A HREF="../exceptions/EX3803.htm">3803</A>) exception.
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD><P><B><U>Process queue space queue offset
</U></B></TD><TD><P>
This value indicates which queue in the queue space a message
resides on.
A value of -1 will be returned
if the message is on the external queue, and zero if the
message is on the message log.
If the message resides on an invocation queue this field
will be zero.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>Time sent
</U></B></TD><TD><P>
The value of the system time-of-day clock when the message
was originally sent
(Signal Exception (<A HREF="SIGEXCP.htm">SIGEXCP</A>)
or message originated as a result of an exception).
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>Time modified
</U></B></TD><TD><P>
This value is initially equal to the <I>time sent</I>
value.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>Interrupted invocation
</U></B></TD><TD><P>
An invocation pointer that addresses
the invocation which currently has this message as its interrupt cause.
This pointer will have a null pointer value
if the message is not an exception message.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>Target invocation
</U></B></TD><TD><P>
An invocation pointer or system pointer that identifies which
queue contains the message.
If the message resides on an invocation queue, this field
contains an invocation pointer that addresses
the invocation whose invocation message queue currently contains the
message.
If the message does not reside on an invocation queue, then
a system pointer to the Queue Space is returned.
The <I>process queue space queue offset</I> field indicates
on which queue
the message resides, the message log or the external queue.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>Original target invocation
</U></B></TD><TD><P>
An invocation pointer that addresses
the invocation which originally was sent the message.
This pointer will have a null pointer value
if the original target invocation no longer exists.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>Source program location
</U></B></TD><TD><P>
A suspend pointer which identifies the
program, module, procedure, and statement where the source invocation
was suspended (due to a CALL or some form of interrupt).
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>Target program location
</U></B></TD><TD><P>
A suspend pointer which identifies the
program, module, procedure, and statement where the target invocation
was suspended (due to a CALL or some form of interrupt).  If the message
is no longer in an invocation message queue, then this pointer reflects
the invocation of the last (most recent) invocation message queue in
which the message resided.
This pointer will have a null pointer value
if the message has never resided in an invocation message queue.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>Originating program location
</U></B></TD><TD><P>
A suspend pointer which identifies the
program, module, procedure, and statement of the
instruction that sent the message.  For messages sent by the machine,
this pointer area contains a machine-dependent representation of the
source machine component.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>Invocation mark
</U></B></TD><TD><P>
If the message has ever resided on an invocation, this field will
be non-zero.  It contains the mark of the invocation where the message
was last queued.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>Activation group mark
</U></B></TD><TD><P>
If the message has ever resided on an invocation, this field will
be non-zero.  It contains the mark of the activation group which
contains the invocation where the message was last queued.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>Thread ID
</U></B></TD><TD><P>
This is the thread ID of the thread that added the message to
the process queue space.
<P>
Messages will contain a thread ID that is determined by the queue space
to which the message is being sent.  When sending to the current process
queue space, the thread ID of the current thread will be used.  When
sending to a different process queue space, the thread ID of the initial
thread for the owning process will be used.  If the queue space is not
associated with a process, the thread ID will be 0.
<P><B>Note: </B>When sending a reply, the message will contain the thread
ID from the associated inquiry message.
</TD></TR></TABLE>
<P>
The template identified by operand 2
is used to contain the materialized message.
It must be 16-byte aligned with the following format.
<BR>
<TABLE>
<TR>
<TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="2">Offset
</TH><TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="12"><BR></TH></TR><TR>
<TH ALIGN="RIGHT" VALIGN="TOP">Dec
</TH><TH ALIGN="RIGHT" VALIGN="TOP">Hex
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Field Name
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Data Type and Length
</TH></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Template size
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(8)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Number of bytes provided for materialization
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">4
</TD><TD ALIGN="RIGHT" VALIGN="TOP">4
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Number of bytes available for materialization
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">8
</TD><TD ALIGN="RIGHT" VALIGN="TOP">8
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Message type
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
<DL COMPACT>
<DD>
Hex 00 = Informational message 0
<DD>
Hex 01 = Informational message 1
<DD>
Hex 04 = Exception message
<DD>
Hex 06 = Return/Transfer Control message
<DD>
Hex 07 = Return message
<DD>
Hex 10 = Control Entry message
<DD>
Hex 11 = Escape/return handler
<P>All other values are reserved.
</DL>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">9
</TD><TD ALIGN="RIGHT" VALIGN="TOP">9
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="RIGHT" VALIGN="TOP">A
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Message severity
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">12
</TD><TD ALIGN="RIGHT" VALIGN="TOP">C
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Reply/Inquiry message reference key
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">16
</TD><TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Message status mask
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(8)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">16
</TD><TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Log message
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 0
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
The message is not queued to the Process Message Log.
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
The message is queued to the Process Message Log.
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">16
</TD><TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Inquiry
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 1
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
Message will not accept a reply.
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Message will accept a reply.
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">16
</TD><TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reply
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 2
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
Message does not represent a <I>reply</I>
message.
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Message represents a <I>reply</I>
message.
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">16
</TD><TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Answered
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 3
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
For messages with a <I>status</I> of <I>inquiry</I>, this
indicates that a reply message has not been received.
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
For messages with a <I>status</I> of <I>inquiry</I>, this
indicates that a reply message has been received.
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">16
</TD><TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Message being processed
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 4
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
This value of the flag has no particular
meaning.
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
For a <I>message type</I> of <I>exception</I>, this
indicates that the interrupt is currently being
handled.
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">16
</TD><TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Retain
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 5
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
Message will be dequeued and its contents
discarded when the following message status bits
are zero:
<I>log</I>, <I>message being processed</I>, and
<I>action pending</I>.
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Keeps the message from being dequeued after all
other message status bits are zero.
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">16
</TD><TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Action pending
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 6
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
Indicates no actions are pending based on this message.
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Indicates that the message is either an interrupt cause or is
a <I>return, return/transfer control message.</I>
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">16
</TD><TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Invoke Process Default Exception Handler (PDEH)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 7
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
Do not invoke PDEH.
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Invoke PDEH, only valid if <I>message type</I>
is <I>exception</I>.
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">16
</TD><TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Error
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 8
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
No error has occurred in the sending of this
message.
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
An error has occurred in the sending of this
message.
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">16
</TD><TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">PDEH previously invoked
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 9
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
PDEH has not previously been invoked for
this message.
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
PDEH has previously been invoked for this
message.
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">16
</TD><TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 10-31
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">16
</TD><TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">User defined status
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 32-63
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Interrupt class mask
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(8)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
<TABLE><TR><TD ALIGN="LEFT" VALIGN="TOP"><B>Note:</B></TD><TD ALIGN="LEFT" VALIGN="TOP">All fields in the interrupt class mask that are marked as 'Reserved'
have a value of binary zero.</TD></TR></TABLE>
</TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Binary overflow or divide by zero
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 0
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Decimal overflow or divide by zero
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 1
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Decimal data error
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 2
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Floating-point overflow or divide by zero
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 3
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Floating-point underflow or inexact result
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 4
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Floating-point invalid operand or conversion error
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 5
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Other data error (edit mask, etc)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 6
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Specification (operand alignment) error
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 7
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Pointer not set/pointer type invalid
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 8
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Object not found
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 9
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Object destroyed
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 10
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Address computation underflow/overflow
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 11
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Space not allocated as specified offset
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 12
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Domain/State protection violation
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 13
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Authorization violation
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 14
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Java thrown class
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 15
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reserved
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 16-28
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Other MI generated exception (not function check)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 29
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">MI generated function check/machine check
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 30
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Message generated by Signal Exception instruction
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 31
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reserved
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 32-39
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">User defined
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 40-63
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">32
</TD><TD ALIGN="RIGHT" VALIGN="TOP">20
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Initial handler priority
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">33
</TD><TD ALIGN="RIGHT" VALIGN="TOP">21
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Current handler priority
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">34
</TD><TD ALIGN="RIGHT" VALIGN="TOP">22
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Exception ID
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">UBin(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">36
</TD><TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">PDEH reason code
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">37
</TD><TD ALIGN="RIGHT" VALIGN="TOP">25
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Signal class
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">38
</TD><TD ALIGN="RIGHT" VALIGN="TOP">26
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Compare data length
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Message ID
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(7)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">47
</TD><TD ALIGN="RIGHT" VALIGN="TOP">2F
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">48
</TD><TD ALIGN="RIGHT" VALIGN="TOP">30
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Max message data length
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
Input to the instruction
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">52
</TD><TD ALIGN="RIGHT" VALIGN="TOP">34
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Message data length
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">56
</TD><TD ALIGN="RIGHT" VALIGN="TOP">38
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Max length of message extension data
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
Input to the instruction
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">60
</TD><TD ALIGN="RIGHT" VALIGN="TOP">3C
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Message extension data length
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">64
</TD><TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Message data pointer
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Space pointer
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
Input to the instruction
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">80
</TD><TD ALIGN="RIGHT" VALIGN="TOP">50
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Message data extension pointer
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Space pointer
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
Input to the instruction
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">96
</TD><TD ALIGN="RIGHT" VALIGN="TOP">60
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Message format information
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(32)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
If the message is not a <I>return</I> or <I>return/transfer control</I> message.
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">96
</TD><TD ALIGN="RIGHT" VALIGN="TOP">60
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Compare data
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Char(32)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
If the message is a <I>return</I> or <I>return/transfer control</I> message.
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">96
</TD><TD ALIGN="RIGHT" VALIGN="TOP">60
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Return handler identifier
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">System pointer
or
Procedure pointer
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">112
</TD><TD ALIGN="RIGHT" VALIGN="TOP">70
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reserved
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Char(16)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">128
</TD><TD ALIGN="RIGHT" VALIGN="TOP">80
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(48)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">176
</TD><TD ALIGN="RIGHT" VALIGN="TOP">B0
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">--- End ---
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
<BR></TD></TR></TABLE>
<P>
The first 4 bytes of the message template identify the total <B><U>number of bytes provided</U></B> for use by the instruction.
This number is supplied as input to the instruction and is not
modified by the instruction.
A number less than 160 causes the <I> materialization length invalid&nbsp;</I> (hex <A HREF="../exceptions/EX3803.htm">3803</A>) exception.
<P>
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD><P><B><U>Message type
</U></B></TD><TD><P>This value determines the type of the message.  The type
of message determines which <I>message status values</I> have meaning.
<P>The following <I>message status attributes</I> are valid for all <I>informational
message types:</I>.
<UL COMPACT>
<LI>Log Message
<LI>Reply
<LI>Inquiry
</UL>
<P>The following <I>message status attributes</I> are valid for a <I>message type</I>
of <I>exception:</I>.
<UL COMPACT>
<LI>Log Message
<LI>Retain
<LI>Action pending
<LI>Invoke PDEH
<LI>Inquiry
<LI>Reply
</UL>
<P>The following <I>message status attributes</I> are valid for a <I>message type</I>
of <I>return</I> or <I>return/transfer control</I>.
<UL COMPACT>
<LI>Action pending
</UL>
<P>
The following describes each <I>message type</I> in detail.
<UL>
<P><LI> <I>Informational 0</I> -
There are no special requirements as to what message status contains or
what the Target Invocation pointer actually identifies.
<P><LI> <I>Informational 1</I> -
There are no special requirements as to what message status contains or
what the Target Invocation pointer actually identifies.
<P><LI> <I>Exception</I> -
This type of message has an <I>interrupt cause</I> for the <I>interrupted invocation</I>.
<P><LI> <I>Return/transfer control</I> -
This message type indicates that a return handler is invoked when the
target invocation is exited for any reason including <A HREF="XCTL.htm">XCTL</A>.
Additionally, messages of this type interpret the <I>message format
information</I> field to identify a program or procedure to be invoked
as the return handler.
<P><LI> <I>Return</I> -
This message type indicates that a return handler will be invoked if the
target invocation is exited for any reason other than Transfer Control
(<A HREF="XCTL.htm">XCTL</A>).  In the case of <A HREF="XCTL.htm">XCTL</A>, the message is preserved and associated
with the transferred to invocation.  Additionally, messages of this type
interpret the <I>message format information</I> field to identify a
program or procedure to be invoked as the return handler.
<P><LI> <I>Control Entry</I> -
This message type is associated with an invocation.
The <I>control entry</I> is used to keep data required for exception
processing.
<P><LI> <I>Escape/Return Handler</I> -
This message type is associated with an invocation.
The <I>escape/return handler</I> is used to keep data required for
processing when control is returned to an invocation.
</UL>
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Message severity
</U></B></TD><TD><P>
A value indicating the severity of the message.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Reply/Inquiry message reference key
</U></B></TD><TD><P>
If the message materialized is an <I>inquiry</I> message
that has been answered, this is the <I>message reference key</I> of its reply message.
<P>
If the message materialized is a <I>reply</I> message, this is the <I>message reference key</I> of its inquiry message.
<P>
This value only has meaning for <I>exception</I> and <I>informational</I>
messages.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Message status mask
</U></B></TD><TD><P>
A bit-significant value indicating the original status of the
message.
<UL>
<P><LI> <B><U>Log message</U></B> status.  If this bit
is 1, the message is queued to the Process Message
Log until it is explicitly removed.
<P><LI> <B><U>Inquiry</U></B> status.
If this bit is 1,
this
message will accept a <I>reply</I> message.
<P><LI> <B><U>Reply</U></B> status.  If this value is 1,
this
message is a reply to an <I>inquiry</I> message.
The <I>reply message reference key</I>
is used to identify the message for which the message was replied.
<P><LI> <B><U>Answered</U></B> status.  If this value is 1,
the message is a inquiry message for which a reply has been sent.
The <I>reply message reference key</I>
is used to identify the reply message.
<P><LI> <B><U>Retain</U></B> status.  If this bit is 1,
the message is kept even if the invocation message
queue after
the following message status bits
are zero: <I>log</I>, <I>message being processed</I>, and <I>action pending</I>.
<P><LI> <B><U>Action pending</U></B> status.
If this bit is
1, this message represents an exception which is the
current interrupt cause for the specified Source Invocation or
else it is a <I>return</I>
or <I>return/transfer control</I> message which
has not yet been processed.
<P><LI> <B><U>Invoke Process Default Exception Handler</U></B>.
This status only has meaning for <I>exception</I> messages.
</UL>
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Interrupt class mask
</U></B></TD><TD><P>A bit-significant value indicating the cause of the interrupt.
The MI user is allowed to use the machine-defined classes
since machine-generated errors may be re-sent by the MI user.
<P>This value only has meaning for <I>exception</I> messages.
<P>The <B><U>Java thrown class</U></B> interrupt class indicates that the
message corresponds to a thrown class in the Java language.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Initial handler priority
</U></B></TD><TD><P>An unsigned eight-bit binary number which selects the initial
interrupt handler priority.  This value is within the range of
of 64 - 255.
<P>This value only has meaning for <I>exception</I> messages.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Exception ID
</U></B></TD><TD><P>A two-byte field that identifies the exception being defined
by this message.
<P>This value only has meaning for <I>exception</I> messages.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
PDEH reason code
</U></B></TD><TD><P>A value defined by the user which indicates the type of processing
to be attempted by the Process Default Exception Handler.
<P>This value only has meaning for <I>exception</I> messages.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Signal class
</U></B></TD><TD><P>A value defined by the user which is used to select exception
monitors.
<P>This value only has meaning for <I>exception</I> messages.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Compare data length
</U></B></TD><TD><P>A value indicating the number of bytes provided as compare data.
<P>This value only has meaning for <I>exception</I> messages.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Message ID
</U></B></TD><TD><P>Specifies the message identifier of a message description whose
predefined message is being sent.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Max message data length
</U></B></TD><TD><P>
Input to the instruction that
specifies the number of bytes supplied for the message data.
The maximum value allowed is 65,504.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Message data length
</U></B></TD><TD><P>A value indicating the number of bytes of
message data for this process message.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Max extension data length
</U></B></TD><TD><P>
Input to the instruction that
specifies the number of bytes supplied for the message data extension.
The maximum value allowed is 65,504.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Message extension data length
</U></B></TD><TD><P>A value indicating the number of bytes of
message data extension for this process message.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Message data pointer
</U></B></TD><TD><P>A pointer to the area to receive the message data.
This field is ignored if the <I>max message data length</I>
field is
zero.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Message data extension pointer
</U></B></TD><TD><P>A pointer to the area to receive the message data extension.
This field is ignored if the <I>max extension data length</I>
field is zero.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Message format information
</U></B></TD><TD><P>A 32 byte field that contains either compare data
or two 16 byte fields which contain information related to a return
type message.
<UL>
<P><LI>If <I>message type</I> is not a <I>return</I> or <I>return/transfer
control</I> message,
this field is defined as
compare data used to determine which exception handler is
given control.  Up to 32
bytes may be specified.
<P><LI>If <I>message type</I> is a <I>return</I> or <I>return/transfer
control</I> message,
then the first 16 bytes of
this field are defined as a
<I>system pointer</I> to an <VAR>program</VAR>
object, or else a <VAR>procedure pointer</VAR> to a
bound program procedure.
The last 16 bytes of the field are reserved for future use.
</UL>
<P>This value is ignored if the message does not represent an <I>exception, return</I> or <I>return/transfer control</I> message.
</TD></TR></TABLE>
<P>
The template identified by <I>operand 3</I>
specifies the source invocation
of the message.  This operand can be null (which indicates the
requesting invocation is to be used for the Source Invocation) or
specify either an Invocation pointer
to an invocation,
a null pointer value (which indicates the current invocation),
or a pointer to a process queue
space.
It must be 16-byte aligned with the following format.
<P>
<BR>
<TABLE>
<TR>
<TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="2">Offset
</TH><TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="12"><BR></TH></TR><TR>
<TH ALIGN="RIGHT" VALIGN="TOP">Dec
</TH><TH ALIGN="RIGHT" VALIGN="TOP">Hex
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Field Name
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Data Type and Length
</TH></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Source invocation offset
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">4
</TD><TD ALIGN="RIGHT" VALIGN="TOP">4
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Originating invocation offset
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">8
</TD><TD ALIGN="RIGHT" VALIGN="TOP">8
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Invocation range
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">12
</TD><TD ALIGN="RIGHT" VALIGN="TOP">C
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">16
</TD><TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Source invocation/process queue space pointer
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">System pointer
or
Invocation pointer
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">32
</TD><TD ALIGN="RIGHT" VALIGN="TOP">20
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(16)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">48
</TD><TD ALIGN="RIGHT" VALIGN="TOP">30
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">--- End ---
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
<BR></TD></TR></TABLE>
<P>
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD><P><B><U>
Source invocation offset
</U></B></TD><TD><P>A signed numerical value indicating an invocation relative to the
invocation located by the <I>source invocation pointer</I>.  A value of zero denotes the
invocation addressed by the <I>source invocation pointer</I>,
with increasingly positive numbers denoting increasingly later
invocations in the stack, and increasingly negative numbers denoting
increasingly earlier invocations in the stack.
If a process queue space is specified as the message source, then
the only valid values for this field are 0, -1 and -2.
A value of -1 indicates to materialize from the external queue
of the process queue space.
A zero value indicates to materialize from the message log
of the process queue space.
A value of -2 indicates to attempt to locate the message using the <I>message reference index</I> supplied in operand 4 without
regard to the queue space queue that the message resides on.
Only unanswered <I>inquiry</I> messages, <I>return</I> messages, and <I>return/transfer control</I> messages can be materialized
in this fashion.
Other values result in a <I> scalar value invalid&nbsp; </I> (hex <A HREF="../exceptions/EX3203.htm">3203</A>) exception
being signaled.
<P>If the invocation identified by this offset does not exist
in the stack, a <I> scalar value invalid&nbsp; </I> (hex <A HREF="../exceptions/EX3203.htm">3203</A>) exception
will be signaled.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Originating invocation offset
</U></B></TD><TD><P>
Specifies a displacement from the invocation executing this
instruction and must be zero (which indicates the current invocation)
or negative (which indicates an older invocation).  The invocation
identified is used as the source for all authorization checks
(environment authority to an invocation or authority to a process
queue space).
If the <I>originating invocation offset</I> is non-zero, then the
invocation executing this instruction must be authorized to the
originating invocation identified.
<P>If the invocation identified by this offset does not exist
in the stack or the value is greater than zero,
a <I> scalar value invalid&nbsp; </I> (hex <A HREF="../exceptions/EX3203.htm">3203</A>) exception
will be signaled.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Invocation range
</U></B></TD><TD><P>
A signed numerical value indicating the number of invocations
in the range in addition to the invocation identified by the <I>source invocation pointer</I>.
If a <I>process queue space pointer</I>
is provided, this value must be zero.
<P>
The sign of the <I>invocation range</I> determines the direction of the
additional invocations.
A positive number specifies a range encompassing newer invocations,
while a negative number specifies a range encompassing older invocations.
<P>
It is not an error if this value specifies a range
greater than the number of existing invocations in the specified
direction.  The materialization will stop after the last invocation
is encountered.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Source invocation pointer
</U></B></TD><TD><P>An <I>invocation pointer</I>
to an invocation.  If a null pointer value,
then the current invocation is indicated.
<P>If the invocation identified does not exist
in the stack or is invalid for this operation,
an <I> invalid invocation address&nbsp; </I> (hex <A HREF="../exceptions/EX1603.htm">1603</A>) exception
will be signaled.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Process queue space pointer
</U></B></TD><TD><P>A <I>system pointer</I> to a <VAR>process queue space</VAR>
object.
</TD></TR></TABLE>
<P>
The template identified by operand 4 must be 16-byte aligned.  Following
is the format of the message selection template:
<BR>
<TABLE>
<TR>
<TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="2">Offset
</TH><TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="12"><BR></TH></TR><TR>
<TH ALIGN="RIGHT" VALIGN="TOP">Dec
</TH><TH ALIGN="RIGHT" VALIGN="TOP">Hex
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Field Name
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Data Type and Length
</TH></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Starting message reference index
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">4
</TD><TD ALIGN="RIGHT" VALIGN="TOP">4
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Ending message reference index
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">8
</TD><TD ALIGN="RIGHT" VALIGN="TOP">8
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Number of selection criteria
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="RIGHT" VALIGN="TOP">A
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(6)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">16
</TD><TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Selected message reference index
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
Output by the instruction
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">20
</TD><TD ALIGN="RIGHT" VALIGN="TOP">14
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Selected message count
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
Output by the instruction
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="RIGHT" VALIGN="TOP">18
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Status change count
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
Ignored by the instruction
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="RIGHT" VALIGN="TOP">1C
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Moved message count
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
Ignored by the instruction
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">32
</TD><TD ALIGN="RIGHT" VALIGN="TOP">20
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Selection criterion
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">&#91;*&#93; Char(32)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">32
</TD><TD ALIGN="RIGHT" VALIGN="TOP">20
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Selection type
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<DL COMPACT>
<DD>
Hex 00 = Select based on message status
<DD>
Hex 01 = Select based on message ID
<DD>
Hex 02 = Select based on interrupt class
<DD>
Hex 03 = Select based on invocation mark
<DD>
Hex 04 = Select based on activation group mark
<DD>
Hex 07 = Select based on thread ID
</DL>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">33
</TD><TD ALIGN="RIGHT" VALIGN="TOP">21
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">34
</TD><TD ALIGN="RIGHT" VALIGN="TOP">22
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Selection action
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Char(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">34
</TD><TD ALIGN="RIGHT" VALIGN="TOP">22
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Reject criterion
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Bit 0
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
Select message if criterion is satisfied
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Reject message if criterion is satisfied
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">34
</TD><TD ALIGN="RIGHT" VALIGN="TOP">22
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Reject message
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Bit 1
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
Do not reject message if criterion is not satisfied
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Reject message if criterion is not satisfied
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">34
</TD><TD ALIGN="RIGHT" VALIGN="TOP">22
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Reject satisfaction
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Bit 2
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
Accept satisfaction of criterion
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Reject satisfaction of criterion
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">34
</TD><TD ALIGN="RIGHT" VALIGN="TOP">22
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Bits 3-15
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">36
</TD><TD ALIGN="RIGHT" VALIGN="TOP">24
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Message type mask
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Char(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Selection criterion information
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Char(24)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD></TR><TR>
<TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<B>If the <I>selection type</I> is <I>message status</I></B>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Message status mask
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Char(8)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">48
</TD><TD ALIGN="RIGHT" VALIGN="TOP">30
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Message status complement
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Char(8)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">56
</TD><TD ALIGN="RIGHT" VALIGN="TOP">38
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Char(8)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">64
</TD><TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">--- End of message status ---
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<B>If the <I>selection type</I> is <I>message ID</I></B>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Message ID
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Char(7)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">47
</TD><TD ALIGN="RIGHT" VALIGN="TOP">2F
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Char(17)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">64
</TD><TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">--- End of message ID ---
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<B>If the <I>selection type</I> is <I>interrupt class</I></B>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Interrupt class mask
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Char(8)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">48
</TD><TD ALIGN="RIGHT" VALIGN="TOP">30
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Interrupt class complement
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Char(8)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">56
</TD><TD ALIGN="RIGHT" VALIGN="TOP">38
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Char(8)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">64
</TD><TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">--- End of interrupt class ---
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<B>If the <I>selection type</I> is <I>invocation mark</I></B>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Invocation mark
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">UBin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">44
</TD><TD ALIGN="RIGHT" VALIGN="TOP">2C
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Char(20)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">64
</TD><TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">--- End of invocation mark ---
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<B>If the <I>selection type</I>
is <I>activation group mark</I></B>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Activation group mark
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">UBin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">44
</TD><TD ALIGN="RIGHT" VALIGN="TOP">2C
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Char(20)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">64
</TD><TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">--- End of activation group mark ---
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
If the <I>selection type</I> is <I>thread ID</I>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Thread ID
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Char(8)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">48
</TD><TD ALIGN="RIGHT" VALIGN="TOP">30
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Char(16)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">64
</TD><TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">--- End of thread ID ---
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">*
</TD><TD ALIGN="RIGHT" VALIGN="TOP">*
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">--- End ---
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
<BR></TD></TR></TABLE>
<P>
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD><P><B><U>Starting and ending message reference index
</U></B></TD><TD><P>
Messages in the specified range of index values are examined either
until one of the selection criteria has been satisfied or all
queues specified have been searched.
The direction of search is determined by the relative values
of <I>starting message reference index</I>
and <I>ending message reference
index</I>.
If the former value is smaller, then the search direction is in
numerically (and chronologically) increasing order, while if the
latter value is smaller the search direction is in the opposite
direction.
<P>
Messages are examined starting with the message identified
by <I>starting message reference index</I>,
or if no such message exists
in the queue, starting with the closest existing message in the
direction of the search.
<P>
For the current process, queue space
messages will only be selected for the current thread.
To select messages for another thread, a thread selection criteria
must be used.
<P>
For a different process queue space, all messages for all threads
will be selected.
<P>
If <I>operand 3</I> specifies a system pointer to a
a queue space and a <I>source invocation offset</I> of -2, then
the <I>starting and ending message reference indices</I> must be equal,
otherwise a <I> scalar value invalid&nbsp; </I> (hex <A HREF="../exceptions/EX3203.htm">3203</A>) exception
will be issued.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>Number of selection criteria
</U></B></TD><TD><P>
A numerical value that specifies how many selection criteria
fields are supplied.
If <I>number of selection criteria</I>
has a value of zero, then the first
message in the index range will be materialized.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>Selected message reference index
</U></B></TD><TD><P>
This value returns the message reference index
of the message materialized.
Zero is returned if no message satisfies the criteria.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>Selected message count
</U></B></TD><TD><P>
This value indicates
the number of messages selected:
zero for no messages found, one if a message was found.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>Selection criterion
</U></B></TD><TD><P>
This field contains the data used to select messages from a
queue space.
There is a variable number of criteria present in the template
(the number present is in the <I>number of selection criteria</I>
field).
Each selection criterion may select a message, reject it, or take
no action.
Successive selection criteria are applied to each message until
it is selected or rejected, or until selection criteria have been
exhausted (in which case selection is the default).
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>Selection type
</U></B></TD><TD><P>
This field indicates the format of the selection criterion and
what field in the message is compared.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>Selection action
</U></B></TD><TD><P>
A bit-significant value indicating what actions to perform during
the selection criteria processing.
<UL>
<P><LI> <B><U>Reject criterion</U></B> -
If this bit is 1, a message is rejected if the selection criterion is
satisfied.
If this bit is 0, a message is selected when the selection criterion is
satisfied.
<P><LI> <B><U>Reject message</U></B> -
If this bit is 1, a message is rejected if the selection criteria is not
satisfied.
If this bit is 0,
no action is taken when the selection criteria is not satisfied.
Processing continues with the next selection criterion.
<P><LI> <B><U>Reject satisfaction</U></B> -
If this bit is 0, the satisfaction of the criterion is accepted.
If this bit is 1, a satisfied criterion will become not satisfied and
a not satisfied criterion will become satisfied.
</UL>
<P>
The following figure illustrates how messages are selected based on the <I>selection action</I> criterion.
<P><BR>
<IMG SRC="matprmsg.gif" ALT="Figure matprmsg.gif not displayed.">
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Message type mask
</U></B></TD><TD><P>
A bit-significant value indicating types of messages that should be
examined during selection criteria processing.  The first 31 bits
correspond to message types hex 00 through hex 1E respectively.  The
32nd bit (bit 31) corresponds to all message types greater than hex 1E.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Message status mask and message status complement
</U></B></TD><TD><P>
These are bit-significant values indicating the message status
attributes that will allow a message to be selected.  These values are
used to test a message as follows:
<P>
The <I>message status complement</I> is bit-wise exclusive-ORed with
the message status value of a message.  The result of this is then
bit-wise ANDed with the <I>message status mask</I>.  If the result is
all 0 bits, the message does not satisfy this selection criterion.  If
the result is not all 0 bits, the message satisfies the selection
criterion.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Message ID
</U></B></TD><TD><P>
A character value that is compared to the message ID of a message.  If
the values are equal the selection is satisfied.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>Interrupt class mask and interrupt class complement
</U></B></TD><TD><P>
These are bit-significant values indicating the interrupt class
attributes that will allow a message to be selected.  These values are
used to test a message as follows:
<P>
The <I>interrupt class complement</I> is bit-wise exclusive-ORed with
the interrupt class value of a message.  The result of this is then
bit-wise ANDed with the <I>interrupt class mask</I>.  If the result is
all 0 bits, the message does not satisfy this selection criterion.  If
the result is not all 0 bits, the message satisfies the selection
criterion.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Invocation mark
</U></B></TD><TD><P>
A binary number that is compared to the invocation mark of a message.
If the values are equal the selection is satisfied.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Activation group mark
</U></B></TD><TD><P>
A binary number that is compared to the activation group mark of a
message.  If the values are equal the selection is satisfied.
</TD></TR><TR VALIGN="TOP"><TD><P><B><U>
Thread ID
</U></B></TD><TD><P>
A binary number that is compared to the thread ID of a message.  If the
values are equal, the selection is satisfied.
<P><B>Note: </B>0 is not a valid thread ID and can be used to select all
messages.
</TD></TR></TABLE>
<P>
<H4><A NAME="Header_4">Authorization Required</A></H4>
<P>
The following algorithm is used to determine authorization.
<OL TYPE=1>
<P><LI>
The invocation which invoked the MATPRMSG instruction must have
authority to the invocation identified as the Source Invocation.
<P><LI>
The Originating Invocation must have authority to the invocation
identified as the Source Invocation or to the invocation directly called
by the Source invocation.
</OL>
<P>
If any of the authority checks fail then an <I>activation group access violation&nbsp; </I>(hex <A HREF="../exceptions/EX2C12.htm">2C12</A>) exception  will be
signaled.
<UL>
<P><LI>
Operational
<UL>
<P><LI>
Operand 3
</UL>
<P><LI>Execute
<UL>
<P><LI>
Contexts referenced for address resolution
</UL>
</UL>
<P>
<H4><A NAME="Header_5">Lock Enforcement</A></H4>
<UL>
<P><LI>
Materialize
<UL>
<P><LI>
Operand 3
<P><LI>
Contexts referenced for address resolution
</UL>
</UL>
<P>
<H4><A NAME="Header_6">Exceptions</A></H4>
<DL>
<DD><P>06 Addressing
<DL COMPACT>
<DD><A HREF="../exceptions/EX0601.htm">0601 Space Addressing Violation</A>
<DD><A HREF="../exceptions/EX0602.htm">0602 Boundary Alignment</A>
<DD><A HREF="../exceptions/EX0603.htm">0603 Range</A>
</DL>
<DD><P>08 Argument/Parameter
<DL COMPACT>
<DD><A HREF="../exceptions/EX0801.htm">0801 Parameter Reference Violation</A>
</DL>
<DD><P>0A Authorization
<DL COMPACT>
<DD><A HREF="../exceptions/EX0A01.htm">0A01 Unauthorized for Operation </A>
</DL>
<DD><P>10 Damage Encountered
<DL COMPACT>
<DD><A HREF="../exceptions/EX1004.htm">1004 System Object Damage State</A>
<DD><A HREF="../exceptions/EX1005.htm">1005 Authority Verification Terminated Due to Damaged Object</A>
<DD><A HREF="../exceptions/EX1044.htm">1044 Partial System Object Damage</A>
</DL>
<DD><P>16 Exception Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX1603.htm">1603 Invalid Invocation Address</A>
</DL>
<DD><P>1A Lock State
<DL COMPACT>
<DD><A HREF="../exceptions/EX1A01.htm">1A01 Invalid Lock State</A>
</DL>
<DD><P>1C Machine-Dependent
<DL COMPACT>
<DD><A HREF="../exceptions/EX1C03.htm">1C03 Machine Storage Limit Exceeded</A>
<DD><A HREF="../exceptions/EX1C04.htm">1C04 Object Storage Limit Exceeded</A>
</DL>
<DD><P>20 Machine Support
<DL COMPACT>
<DD><A HREF="../exceptions/EX2002.htm">2002 Machine Check</A>
<DD><A HREF="../exceptions/EX2003.htm">2003 Function Check</A>
</DL>
<DD><P>22 Object Access
<DL COMPACT>
<DD><A HREF="../exceptions/EX2201.htm">2201 Object Not Found </A>
<DD><A HREF="../exceptions/EX2202.htm">2202 Object Destroyed </A>
<DD><A HREF="../exceptions/EX2203.htm">2203 Object Suspended </A>
<DD><A HREF="../exceptions/EX2207.htm">2207 Authority Verification Terminated Due to Destroyed Object</A>
</DL>
<DD><P>24 Pointer Specification
<DL COMPACT>
<DD> <A HREF="../exceptions/EX2401.htm">2401 Pointer Does Not Exist</A>
<DD> <A HREF="../exceptions/EX2402.htm">2402 Pointer Type Invalid </A>
<DD> <A HREF="../exceptions/EX2403.htm">2403 Pointer Addressing Invalid Object Type</A>
</DL>
<DD><P>2C Program Execution
<DL COMPACT>
<DD><A HREF="../exceptions/EX2C12.htm">2C12 Activation Group Access Violation</A>
</DL>
<DD><P>2E Resource Control Limit
<DL COMPACT>
<DD><A HREF="../exceptions/EX2E01.htm">2E01 User Profile Storage Limit Exceeded</A>
</DL>
<DD><P>32 Scalar Specification
<DL COMPACT>
<DD><A HREF="../exceptions/EX3203.htm">3203 Scalar Value Invalid</A>
</DL>
<DD><P>36 Space Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX3601.htm">3601 Space Extension/Truncation</A>
</DL>
<DD><P>38 Template Specification
<DL COMPACT>
<DD><A HREF="../exceptions/EX3803.htm">3803 Materialization Length Invalid</A>
</DL>
<DD><P>44 Protection Violation
<DL COMPACT>
<DD><A HREF="../exceptions/EX4401.htm">4401 Object Domain or Hardware Storage Protection Violation</A>
<DD><A HREF="../exceptions/EX4402.htm">4402 Literal Values Cannot Be Changed</A>
</DL>
<DD><P>46 Queue Space
<DL COMPACT>
<DD>4601 Queue Space Not Associated with the Process
</DL>
</DL>

</body>

</HTML>
