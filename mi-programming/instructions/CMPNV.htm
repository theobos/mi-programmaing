<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head>
  <title> CMPNV Instruction </title>
  <link rel="stylesheet" type="text/css" href="../tstudio.css">
</head>

<body>
<H1>Compare Numeric Value (CMPNV)</H1>
<P>

<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Op Code (Hex)
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Extender
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 1
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 2
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 3&nbsp;&#91;4-6&#93;
</TH></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><B>CMPNVB</B>
1C46
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Branch options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Compare
operand 1
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Compare
operand 2
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Branch targets
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><B>CMPNVI</B>
1846
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Indicator options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Compare
operand 1
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Compare
operand 2
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Indicator targets
</TD></TR></TABLE>
<BR>
<I>Operand 1</I>:  Numeric scalar.
<P>
<I>Operand 2</I>:  Numeric scalar.
<P>
<I>Operand 3&nbsp;&#91;4-6&#93;</I>:
<UL>
<P><LI>
<I>Branch Form</I>-Instruction
number, relative instruction number, branch point,
or instruction pointer.
<P><LI>
<I>Indicator Form</I>-Numeric
variable scalar or character variable scalar.
</UL>
<P>
<P>
<H5><A NAME="Header_2">Description</A></H5>
<P>
The numeric value of the first compare operand
is compared with the signed or unsigned numeric value of the
second compare
operand.  Based on the comparison,
the resulting condition is used with the extender field to:
<UL>
<P><LI>
Transfer
control conditionally to the instruction indicated
in one of the branch target operands (branch form).
<P><LI>
Assign
a value to each of the indicator operands (indicator form).
</UL>
Both the compare operands must be numeric with any implicit conversions
occurring according to the rules of arithmetic operations
as outlined in
<A class="content" HREF="../MCNPFAO.htm">Arithmetic Operations.</A>
For a
decimal operation, alignment of the
assumed decimal point takes place by
padding with 0's on the right end of the compare operand with
lesser precision.
<P>
Decimal operands used in floating-point operations cannot contain
more than 15 total digit positions.
<P>
When both operands are signed numeric or both are unsigned numeric,
the length of the operation is equal to the length of the longer
of the two compare operands.
The shorter of the two operands is adjusted to the length of the
longer operand according to the rules of arithmetic operations
outlined in
<A class="content" HREF="../MCNPFAO.htm">Arithmetic Operations.</A>
<P>
When one operand is signed numeric and the other operand
unsigned numeric,
the unsigned operand is converted to a signed value with more precision
than its current size. The length of the operation is equal to the
length of the longer of the two compare operands. A negative signed
numeric value will always be less than a positive unsigned value.
<P>
Floating-point comparisons use exponent comparison and
significand comparison.  For a denormalized
floating-point number, the comparison is performed as if
the denormalized number had first been normalized.
<P>
For floating-point, two values compare unordered when at
least one comparand is NaN.  Every NaN
compares unordered with everything including another NaN value.
<P>
Floating-point comparisons ignore the sign of zero.  Positive zero always
compares equal with negative zero.
<P>
A <I> floating-point invalid operand&nbsp; </I> (hex <A HREF="../exceptions/EX0C09.htm">0C09</A>) exception
is signaled when
two floating-point values compare
unordered and no branch or indicator option exists for any of
the unordered, negation of unordered,
equal, or negation of equal resultant conditions.
<P>
When a comparison is made between a floating-point compare operand and a
fixed-point decimal
compare operand that contains fractional digit positions, a <I> floating-point inexact result&nbsp; </I> (hex <A HREF="../exceptions/EX0C0D.htm">0C0D</A>) exception
may be signaled because of the implicit conversion from decimal to
floating-point.
<P>
<P>
<H5><A NAME="Header_3">Resultant Conditions</A></H5>
<UL>
<P><LI>High-The first
compare operand has a higher
numeric value than the second compare operand.
<P><LI>Low-The first
compare operand has a lower
numeric value than the second compare operand.
<P><LI>Equal-The first
compare operand has a
numeric value equal to the second compare operand.
<P><LI>Unordered-The
first compare operand is
unordered compared to the second compare operand.
</UL>
<P>
<H4><A NAME="Header_4">Authorization Required</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_5">Lock Enforcement</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_6">Exceptions</A></H4>
<DL>
<DD><P>06 Addressing
<DL COMPACT>
<DD><A HREF="../exceptions/EX0601.htm">0601 Space Addressing Violation</A>
<DD><A HREF="../exceptions/EX0602.htm">0602 Boundary Alignment</A>
<DD><A HREF="../exceptions/EX0603.htm">0603 Range</A>
</DL>
<DD><P>08 Argument/Parameter
<DL COMPACT>
<DD><A HREF="../exceptions/EX0801.htm">0801 Parameter Reference Violation</A>
</DL>
<DD><P>0C Computation
<DL COMPACT>
<DD><A HREF="../exceptions/EX0C02.htm">0C02 Decimal Data </A>
<DD><A HREF="../exceptions/EX0C03.htm">0C03 Decimal Point Alignment</A>
<DD><A HREF="../exceptions/EX0C09.htm">0C09 Floating-Point Invalid Operand </A>
<DD><A HREF="../exceptions/EX0C0D.htm">0C0D Floating-Point Inexact Result</A>
</DL>
<DD><P>10 Damage Encountered
<DL COMPACT>
<DD><A HREF="../exceptions/EX1004.htm">1004 System Object Damage State</A>
<DD><A HREF="../exceptions/EX1044.htm">1044 Partial System Object Damage</A>
</DL>
<DD><P>1C Machine-Dependent
<DL COMPACT>
<DD><A HREF="../exceptions/EX1C03.htm">1C03 Machine Storage Limit Exceeded</A>
</DL>
<DD><P>20 Machine Support
<DL COMPACT>
<DD><A HREF="../exceptions/EX2002.htm">2002 Machine Check</A>
<DD><A HREF="../exceptions/EX2003.htm">2003 Function Check</A>
</DL>
<DD><P>22 Object Access
<DL COMPACT>
<DD><A HREF="../exceptions/EX2201.htm">2201 Object Not Found </A>
<DD><A HREF="../exceptions/EX2202.htm">2202 Object Destroyed </A>
<DD><A HREF="../exceptions/EX2203.htm">2203 Object Suspended </A>
<DD><A HREF="../exceptions/EX2208.htm">2208 Object Compressed </A>
</DL>
<DD><P>24 Pointer Specification
<DL COMPACT>
<DD> <A HREF="../exceptions/EX2401.htm">2401 Pointer Does Not Exist</A>
<DD> <A HREF="../exceptions/EX2402.htm">2402 Pointer Type Invalid </A>
</DL>
<DD><P>2C Program Execution
<DL COMPACT>
<DD><A HREF="../exceptions/EX2C04.htm">2C04 Branch Target Invalid</A>
</DL>
<DD><P>2E Resource Control Limit
<DL COMPACT>
<DD><A HREF="../exceptions/EX2E01.htm">2E01 User Profile Storage Limit Exceeded</A>
</DL>
<DD><P>36 Space Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX3601.htm">3601 Space Extension/Truncation</A>
</DL>
<DD><P>44 Protection Violation
<DL COMPACT>
<DD><A HREF="../exceptions/EX4401.htm">4401 Object Domain or Hardware Storage Protection Violation</A>
</DL>
</DL>

</body>

</HTML>
