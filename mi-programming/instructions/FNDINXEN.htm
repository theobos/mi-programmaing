  <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
  <head>
<title> FNDINXEN Instruction </title>
			<link rel="stylesheet" type="text/css" href="../tstudio.css">

</head>

<body>
<H1>Find Independent Index Entry (FNDINXEN)</H1>
<P>

<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Op Code (Hex)
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 1
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 2
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 3
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 4
</TH></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">0494
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Receiver
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Index
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Option list
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Search argument
</TD></TR></TABLE>
<P>
<I>Operand 1</I>:  Space pointer.
<P>
<I>Operand 2</I>:  System pointer.
<P>
<I>Operand 3</I>:  Space pointer.
<P>
<I>Operand 4</I>:  Space pointer.
<P>
<TABLE BORDER WIDTH="100%"><TR><TH ALIGN="LEFT">Bound program access</TH><TR><TD>
<PRE>
<P>Built-in number for FNDINXEN is 36.
FNDINXEN (
          receiver          : address
          index             : address of system pointer
          option_list       : address
          search_argument   : address
)
</PRE>
</TD></TR></TABLE>
<P>
<H5><A NAME="Header_2">Warning</A></H5>
<P>
The following information is subject to change from
release to release.  Use it with caution and be
prepared to adjust for changes with each new release.
<P>
<H5><A NAME="Header_3">Description</A></H5>
<P>
Search the independent
index identified by <I>index</I> (operand 2) according to the
search criteria specified in the <I>option list</I> (operand 3) and
the <I>search argument</I> (operand 4); then
return the desired entry or entries in the <I>receiver</I> operand
(operand 1).  The maximum size of the independent index entry
is either 120 bytes or 2,000 bytes depending on how the <I>maximum
entry length</I> attribute field was specified when the index was
created.
<P>
The <I>option list</I> is a variable-length area that identifies the
type of search to be performed,
the length of the search argument(s), the
maximum
number of
entries to be returned,
the number of entries returned,
the length of each
entry returned, and the offsets to the entries within the
receiver identified by the <I>receiver</I> (operand 1) space pointer.
The <I>option list</I> has the following format:
<BR>
<TABLE>
<TR>
<TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="2">Offset
</TH><TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="12"><BR></TH></TR><TR>
<TH ALIGN="RIGHT" VALIGN="TOP">Dec
</TH><TH ALIGN="RIGHT" VALIGN="TOP">Hex
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Field Name
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Data Type and Length
</TH></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Rule option
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">2
</TD><TD ALIGN="RIGHT" VALIGN="TOP">2
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Argument length
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">UBin(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">4
</TD><TD ALIGN="RIGHT" VALIGN="TOP">4
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Argument offset
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">6
</TD><TD ALIGN="RIGHT" VALIGN="TOP">6
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Occurrence count
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">8
</TD><TD ALIGN="RIGHT" VALIGN="TOP">8
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Return count
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="RIGHT" VALIGN="TOP">A
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Returned index entry
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">&#91;*&#93; Char(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
(Repeated <I>return count</I> times)
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="RIGHT" VALIGN="TOP">A
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Entry length
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">UBin(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">12
</TD><TD ALIGN="RIGHT" VALIGN="TOP">C
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Offset
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bin(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">*
</TD><TD ALIGN="RIGHT" VALIGN="TOP">*
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">--- End ---
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
<BR></TD></TR></TABLE>
The <B><U>rule option</U></B> identifies the type of search to be performed
and has the following meaning:
<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Search Type
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Value (Hex)
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="40%">Meaning
</TH><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">=
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">
0001
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="40%">
Find equal occurrences of operand 4.
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">&gt;
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">
0002
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="40%">
Find occurrences that are greater than operand 4.
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">&lt;
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">
0003
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="40%">
Find occurrences that are less than operand 4.
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">&gt;&#61;
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">
0004
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="40%">
Find occurrences that are greater than or equal to operand 4.
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">&lt;&#61;
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">
0005
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="40%">
Find occurrences that are less than or equal to operand 4.
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">
First
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">
0006
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="40%">
Find the first index entry or entries.
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">
Last
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">
0007
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="40%">
Find the last index entry or entries.
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">
Between
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">
0008
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="40%">
Find all entries between the two arguments specified by operand 4
(inclusive).
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR></TABLE>
<P>
The <I>rule option</I> to find <I>between</I>
requires that operand 4 be a
2-element array in which element 1 is
the starting argument and element 2 is the ending argument.  All
arguments between (and including) the starting and ending
arguments are returned, but the <I>occurrence count</I> specified is
not exceeded.
<P>
If the index was created to contain <I>both pointers and scalar
data</I>, then the <I>search argument</I> must be 16-byte aligned.
For the option to find between limits, both search
arguments must be 16-byte aligned.
<P>
The <I>rule option</I> and the <I>argument length</I>
determine the search
criteria used for the index search.  The <I>argument length</I> must
be greater than or equal to one.  The <I>argument length</I> for
fixed-length entries must be less than or equal to the <I>argument
length</I> specified when the index is created.
<P>
The <B><U>argument length</U></B>
input
field specifies the length of the <I>search
argument</I> (operand 4) to be used for
the index search.  When the <I>rule option</I>
equals <I>first</I> or <I>last</I>,
the <I>argument length</I> field is ignored.  For the <I>rule
option</I> to find <I>between</I>,
the <I>argument length</I> field specifies the length
of one array element.  The lengths of the array elements
must be equal.
<P>
The <B><U>argument offset</U></B>
input field specifies
the offset of the second search argument
from the beginning of the entire <I>search argument</I>
field (operand 4).  The <I>argument offset</I> field is ignored unless the <I>rule
option</I> is find <I>between</I>.
<P>
The <B><U>occurrence count</U></B>
input field
specifies the maximum number of index entries
that satisfy
the search criteria to be returned.  This field is limited to a
maximum value of 4,095.  If this value is exceeded, a <I> template value invalid&nbsp; </I> (hex <A HREF="../exceptions/EX3801.htm">3801</A>) exception
is signaled.
<P>
The <B><U>return count</U></B>
output field
specifies the number of index entries satisfying
the search criteria
that were returned in the <I>receiver</I> (operand 1).
If this field
is 0, no index arguments satisfied the search criteria.
<P>
There are two
output
fields in the option list for each entry returned in the <I>receiver</I> (operand 1).
The <B><U>entry length</U></B> is the length of the
entry retrieved from the index.  The <B><U>offset</U></B> has
the following meaning:
<UL>
<P><LI>
For the first entry, the <I>offset</I> is the
number of bytes from the beginning of the <I>receiver</I> (operand 1)
to the first byte of the first entry.
<P><LI>
For any succeeding entry, the <I>offset</I> is the
number of bytes from the beginning of the immediately preceding entry
to the first byte of the entry returned.
</UL>
<P>
The entries that are retrieved as a result of the Find Independent
Index Entry instruction are always returned
starting with the entry that is closest to or equal to the <I>search
argument</I> and then proceeding
away from the <I>search argument</I>.  For example, a search that is
for &lt; (less than) or &lt;&#61; (less than or equal to) returns
the entries in order of decreasing value.
<P>
All the entries that satisfy the search criteria (up to the <I>occurrence count</I>) are returned
in the space starting at the location designated by the <I>receiver</I> (operand 1)
space pointer.
<P>
If the index was created to contain <I>both pointers and scalar data</I>, then
each returned entry is 16-byte aligned.
<P>
If the index was created to contain <I>scalar data only</I>,
then returned
entries are contiguous.
<P>
Every entry retrieved causes the count of the find operations to be
incremented by 1.  The current value of this count
is available through the
Materialize Independent Index Attributes (<A HREF="MATINXAT.htm">MATINXAT</A>) instruction.
<P>
<H4><A NAME="Header_4">Authorization Required</A></H4>
<UL>
<P><LI>
Retrieve
<UL>
<P><LI>Operand 2
</UL>
<P><LI>Execute
<UL>
<P><LI>Contexts referenced for address resolution
</UL>
</UL>
<P>
<H4><A NAME="Header_5">Lock Enforcement</A></H4>
<UL>
<P><LI>
Materialize
<UL>
<P><LI>Operand 2
<P><LI>Contexts referenced for address resolution
</UL>
</UL>
<P>
<P>
<H4><A NAME="Header_6">Exceptions</A></H4>
<DL>
<DD><P>06 Addressing
<DL COMPACT>
<DD><A HREF="../exceptions/EX0601.htm">0601 Space Addressing Violation</A>
<DD><A HREF="../exceptions/EX0602.htm">0602 Boundary Alignment</A>
<DD><A HREF="../exceptions/EX0603.htm">0603 Range</A>
</DL>
<DD><P>08 Argument/Parameter
<DL COMPACT>
<DD><A HREF="../exceptions/EX0801.htm">0801 Parameter Reference Violation</A>
</DL>
<DD><P>0A Authorization
<DL COMPACT>
<DD><A HREF="../exceptions/EX0A01.htm">0A01 Unauthorized for Operation </A>
</DL>
<DD><P>10 Damage Encountered
<DL COMPACT>
<DD><A HREF="../exceptions/EX1004.htm">1004 System Object Damage State</A>
<DD><A HREF="../exceptions/EX1005.htm">1005 Authority Verification Terminated Due to Damaged Object</A>
<DD><A HREF="../exceptions/EX1044.htm">1044 Partial System Object Damage</A>
</DL>
<DD><P>1A Lock State
<DL COMPACT>
<DD><A HREF="../exceptions/EX1A01.htm">1A01 Invalid Lock State</A>
</DL>
<DD><P>1C Machine-Dependent
<DL COMPACT>
<DD><A HREF="../exceptions/EX1C03.htm">1C03 Machine Storage Limit Exceeded</A>
</DL>
<DD><P>20 Machine Support
<DL COMPACT>
<DD><A HREF="../exceptions/EX2002.htm">2002 Machine Check</A>
<DD><A HREF="../exceptions/EX2003.htm">2003 Function Check</A>
</DL>
<DD><P>22 Object Access
<DL COMPACT>
<DD><A HREF="../exceptions/EX2201.htm">2201 Object Not Found </A>
<DD><A HREF="../exceptions/EX2202.htm">2202 Object Destroyed </A>
<DD><A HREF="../exceptions/EX2203.htm">2203 Object Suspended </A>
<DD><A HREF="../exceptions/EX2207.htm">2207 Authority Verification Terminated Due to Destroyed Object</A>
<DD><A HREF="../exceptions/EX2208.htm">2208 Object Compressed </A>
</DL>
<DD><P>24 Pointer Specification
<DL COMPACT>
<DD> <A HREF="../exceptions/EX2401.htm">2401 Pointer Does Not Exist</A>
<DD> <A HREF="../exceptions/EX2402.htm">2402 Pointer Type Invalid </A>
<DD> <A HREF="../exceptions/EX2403.htm">2403 Pointer Addressing Invalid Object Type</A>
</DL>
<DD><P>2E Resource Control Limit
<DL COMPACT>
<DD><A HREF="../exceptions/EX2E01.htm">2E01 User Profile Storage Limit Exceeded</A>
</DL>
<DD><P>36 Space Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX3601.htm">3601 Space Extension/Truncation</A>
</DL>
<DD><P>38 Template Specification
<DL COMPACT>
<DD><A HREF="../exceptions/EX3801.htm">3801 Template Value Invalid</A>
<DD><A HREF="../exceptions/EX3802.htm">3802 Template Size Invalid </A>
</DL>
<DD><P>44 Protection Violation
<DL COMPACT>
<DD><A HREF="../exceptions/EX4401.htm">4401 Object Domain or Hardware Storage Protection Violation</A>
<DD><A HREF="../exceptions/EX4402.htm">4402 Literal Values Cannot Be Changed</A>
</DL>
</DL>
</body>

</HTML>
