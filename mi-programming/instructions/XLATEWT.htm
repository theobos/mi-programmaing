  <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
  <head>
<title> XLATEWT Instruction </title>
			<link rel="stylesheet" type="text/css" href="../tstudio.css">
</head>

<body>
<H1>Translate with Table (XLATEWT)</H1>
<P>

<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Op Code (Hex)
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 1
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 2
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 3
</TH><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">109F
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Receiver
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Source
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Table
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR></TABLE><P>
<I>Operand 1</I>:  Character variable scalar.
<P>
<I>Operand 2</I>:  Character scalar.
<P>
<I>Operand 3</I>:  Character scalar.
<P>
<P>
<H5><A NAME="Header_2">Description</A></H5>
<P>
The <I>source</I> characters are translated
under control of the translate <I>table</I> and
placed in the <I>receiver</I>.  The operation begins with the
leftmost character of operand 2 and
proceeds character-by-character, left-to-right.
<P>
Characters are translated as follows:
<UL>
<P><LI>
The <I>source</I>
character is used as an offset and added to the location of operand 3.
<P><LI>
The character contained
in the offset location is the translated character.  This
character is copied to the <I>receiver</I> in
the same relative position as the original character in
the <I>source</I> string.
</UL>
If operand 3 is less than 256 bytes long, the character
in the <I>source</I> may specify an offset beyond
the end of operand 3.
If operand 2 is longer than operand 1, then only the
leftmost portion of operand 2, equal to the
length of operand 1, is translated.  If operand 2 is
shorter than operand 1, then only the leftmost
portion of operand 1, equal to the length of operand 2, is
changed.  The remaining portion of operand 1 is unchanged.
<P>
If operand 1 overlaps with operand 2 and/or 3, the overlapped
operands are updated for every
character translated.  The operation proceeds from left to
right, one character at a time.  The
following example shows the results of an overlapped operands translate
operation.  Operands 1, 2,
and 3 have the same coincident character string with a value of hex
050403020103.
<P>
Hex 050403020103-Initial value
<P>
Hex 030403020103-After the 1st character is translated
<P>
Hex 030103020103-After the 2nd character is translated
<P>
Hex 030102020103-After the 3rd character is translated
<P>
Hex 030102020103-After the 4th character is translated
<P>
Hex 030102020103-After the 5th character is translated
<P>
Hex 030102020102-After the 6th character, the final result
<P>
Note that the instruction does not use the length specified for the <I>table</I> operand to constrain access of the bytes addressed by the <I>table</I> operand.
<P>
If operand 3 is less than 256 characters long, and a <I>source</I>
character specifies an offset beyond
the end of operand 3, the result characters are obtained
from byte locations in the space following
operand 3.  If that portion of the space is not currently
allocated, a <I> space addressing violation&nbsp; </I> (hex <A HREF="../exceptions/EX0601.htm">0601</A>) exception
is signaled.  If operand 3 is a constant with a length less
than 256, source characters
specifying offsets greater than or equal to the length of
the constant are translated into unpredictable characters.
<P>
All of the operands support variable length substring compound scalars.
<P>
Substring operand references that allow for a null substring
reference (a length value of zero) may be specified for all of the
operands on this instruction.  Specifying a null substring reference
for the <I>table</I> operand does not affect the operation of the
instruction.  In this case, the bytes
addressed by the <I>table</I> operand
are still accessed as described above.  This is due to the definition
of the function of this instruction which does not use the length
specified for the <I>table</I> operand to constrain access of the bytes
addressed by the <I>table</I> operand.  The effect of specifying a null
substring reference for either or both of the <I>receiver</I> and the <I>source</I> operands is that no result is set.
<P>
<H4><A NAME="Header_3">Authorization Required</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_4">Lock Enforcement</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_5">Exceptions</A></H4>
<DL>
<DD><P>06 Addressing
<DL COMPACT>
<DD><A HREF="../exceptions/EX0601.htm">0601 Space Addressing Violation</A>
<DD><A HREF="../exceptions/EX0602.htm">0602 Boundary Alignment</A>
<DD><A HREF="../exceptions/EX0603.htm">0603 Range</A>
</DL>
<DD><P>08 Argument/Parameter
<DL COMPACT>
<DD><A HREF="../exceptions/EX0801.htm">0801 Parameter Reference Violation</A>
</DL>
<DD><P>10 Damage Encountered
<DL COMPACT>
<DD><A HREF="../exceptions/EX1044.htm">1044 Partial System Object Damage</A>
</DL>
<DD><P>1C Machine-Dependent
<DL COMPACT>
<DD><A HREF="../exceptions/EX1C03.htm">1C03 Machine Storage Limit Exceeded</A>
</DL>
<DD><P>20 Machine Support
<DL COMPACT>
<DD><A HREF="../exceptions/EX2002.htm">2002 Machine Check</A>
<DD><A HREF="../exceptions/EX2003.htm">2003 Function Check</A>
</DL>
<DD><P>22 Object Access
<DL COMPACT>
<DD><A HREF="../exceptions/EX2202.htm">2202 Object Destroyed </A>
<DD><A HREF="../exceptions/EX2203.htm">2203 Object Suspended </A>
<DD><A HREF="../exceptions/EX2208.htm">2208 Object Compressed </A>
</DL>
<DD><P>24 Pointer Specification
<DL COMPACT>
<DD> <A HREF="../exceptions/EX2401.htm">2401 Pointer Does Not Exist</A>
<DD> <A HREF="../exceptions/EX2402.htm">2402 Pointer Type Invalid </A>
</DL>
<DD><P>2E Resource Control Limit
<DL COMPACT>
<DD><A HREF="../exceptions/EX2E01.htm">2E01 User Profile Storage Limit Exceeded</A>
</DL>
<DD><P>32 Scalar Specification
<DL COMPACT>
<DD><A HREF="../exceptions/EX3201.htm">3201 Scalar Type Invalid</A>
</DL>
<DD><P>36 Space Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX3601.htm">3601 Space Extension/Truncation</A>
</DL>
<DD><P>44 Protection Violation
<DL COMPACT>
<DD><A HREF="../exceptions/EX4401.htm">4401 Object Domain or Hardware Storage Protection Violation</A>
<DD><A HREF="../exceptions/EX4402.htm">4402 Literal Values Cannot Be Changed</A>
</DL>
</DL>

</body>

</HTML>
