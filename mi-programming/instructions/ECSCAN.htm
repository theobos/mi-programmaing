  <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
  <head>
<title> ECSCAN Instruction </title>
			<link rel="stylesheet" type="text/css" href="../tstudio.css">
</head>

<body>
<H1>Extended Character Scan (ECSCAN)</H1>
<P>

<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Op Code (Hex)
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Extender
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Operand 1
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Operand 2
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Operand 3
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Operand 4
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Operand &#91;5-7&#93;
</TH></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%"><B>ECSCAN</B>
10D4
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Receiver
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Base
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Compare operand
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Mode operand
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">
<BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="7"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%"><B>ECSCANB</B>
1CD4
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Branch options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Receiver
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Base
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Compare operand
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Mode operand
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Branch targets
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="7"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%"><B>ECSCANI</B>
18D4
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Indicator options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Receiver
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Base
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Compare operand
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Mode operand
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Indicator targets
</TD></TR></TABLE>
<P>
<I>Operand 1</I>:  Binary variable scalar or binary array.
<P>
<I>Operand 2</I>:  Character variable scalar.
<P>
<I>Operand 3</I>:  Character scalar.
<P>
<I>Operand 4</I>:  Character(1) scalar.
<P>
<I>Operand 5-7</I>:
<UL>
<P><LI>
<I>Branch Form</I>-Branch point, instruction pointer, relative
instruction number, or absolute instruction number.
<P><LI>
<I>Indicator Form</I>-Numeric variable scalar or character
variable scalar.
</UL>
<P>
<H5><A NAME="Header_2">Description</A></H5>
<P>
This instruction scans the string value
of the <I>base</I> operand for occurrences of
the string value of the <I>compare</I> operand and indicates the
relative locations of these occurrences
in the <I>receiver</I> operand.  The character string value of the <I>base</I> operand is scanned for occurrences
of the character string value of the <I>compare</I> operand under
control of the <I>mode</I> operand and mode
control characters embedded in the base string.
<P>
The <I>base</I> and <I>compare</I> operands must both be character
strings.  The length of the <I>compare</I> operand
must not be greater than that of the base string.  The <I>base</I> and <I>compare</I> operand are interpreted as
containing a mixture of 1-byte (simple) and 2-byte (extended)
character codes.  The mode, simple or
extended, with which the string is to be interpreted, is
controlled initially by the <I>mode</I> operand
and thereafter by mode control characters embedded in the
strings.  The mode control characters are as follows:
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD><P>&#42;&nbsp;Hex 0E =
</TD><TD><P>Shift out of simple character
mode to extended mode.
</TD></TR><TR VALIGN="TOP"><TD><P>&#42;&nbsp;Hex 0F =
</TD><TD><P>Shift into simple character
mode from extended mode.  This
is recognized only if it occurs
in the first byte position of an
extended character code.
</TD></TR></TABLE>
The format of the <I>mode</I> operand is as follows:
<BR>
<TABLE>
<TR>
<TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="2">Offset
</TH><TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="12"><BR></TH></TR><TR>
<TH ALIGN="RIGHT" VALIGN="TOP">Dec
</TH><TH ALIGN="RIGHT" VALIGN="TOP">Hex
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Field Name
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Data Type and Length
</TH></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Mode operand
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Operand 2 initial mode indicator
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 0
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>0 =
</TD><TD>Operand starts in simple
character mode.
</TD></TR><TR VALIGN="TOP"><TD>1 =
</TD><TD>Operand starts in extended
character mode.
</TD></TR></TABLE>
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Operand 3 initial mode indicator
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 1
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>0 =
</TD><TD>Operand starts in simple
character mode.
</TD></TR><TR VALIGN="TOP"><TD>1 =
</TD><TD>Operand starts in extended
character mode.
</TD></TR></TABLE>
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 2-7
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">1
</TD><TD ALIGN="RIGHT" VALIGN="TOP">1
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">--- End ---
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
<BR></TD></TR></TABLE>
The operation begins at the left end of the base string and
continues character by character, left
to right.  When the base string is interpreted in <I>simple
character mode</I>, the operation moves
through the base string 1 byte at a time.  When the base
string is interpreted in <I>extended
character mode</I>, the operation moves through the base string
2 bytes at a time.
<P>
The <I>compare</I> operand value is the entire byte string specified
for the <I>compare</I> operand.  The <I>mode</I>
operand determines the initial mode of the <I>compare</I> operand.  The
first character of the <I>compare</I>
operand value is assumed to be a valid character for the initial
mode of the <I>compare</I> operand and
not a mode control character.  Mode control characters in the <I>compare</I> operand value participate in
comparisons performed during the scan function except that a mode control
character as the first
character of the <I>compare</I> operand causes unpredictable results.
<P>
The base string is scanned until the mode of the characters
being processed is the same as the
initial mode of the <I>compare</I> operand value.  The operation
continues comparing the characters of the
base string with those of the <I>compare</I> operand value.  The
starting character of the characters
being compared in the base string is always a valid character
for the initial mode of the <I>compare</I>
operand value.  A mode control character encountered in the
base string that changed the base
string mode to match the initial mode of the <I>compare</I> operand
value does not participate in the
comparison.  The length of the comparison is equal to the
length of the <I>compare</I> operand value and
the comparison is performed the same as performed by the
Compare Bytes Left Adjusted (<A HREF="CMPBLA.htm">CMPBLA</A>) instruction.
<P>
If a set of bytes that matches the <I>compare</I> operand value
is found, the binary value for the
relative location of the leftmost base string character of
the set of bytes is placed in the <I>receiver</I> operand.
<P>
If the <I>receiver</I> operand is a scalar, only the first occurrence
of the <I>compare</I> operand is noted.  If
the <I>receiver</I> operand is an array, as many occurrences as there
are elements in the array are noted.
<P>
If a mode change is encountered in the base string, the base
string is again scanned until the mode
of the characters being processed is the same as the initial
mode of the <I>compare</I> operand value, and
then the comparisons are resumed.
<P>
The operation continues until no more occurrences of the <I>compare</I> operand value can be noted in the <I>receiver</I> operand or until the number of
bytes remaining to be scanned in the base string is less
than the length of the <I>compare</I> operand
value.  When the second condition occurs, the <I>receiver</I> value is
set to zero.  If the <I>receiver</I>
operand is an array, all its remaining elements are also set to zero.
<P>
If the <I>escape code encountered</I> result condition is specified
(through a branch or indicator
option), verifications are performed on the base string as
it is scanned.  Each byte of the base
string is checked for a value less than hex 40.  When a
value less than hex 40 is encountered, it
is then determined if it is a valid mode control character.
<P>
If a byte value of less than hex 40 is not a valid mode
control character, it is considered to be
an escape code.  The binary value for the relative location
of the character (simple or extended)
being interrogated is placed in the <I>receiver</I> operand, and
the appropriate action (indicator or
branch) is performed according to the specification of the escape code
encountered result
condition.  If the <I>receiver</I> operand is an array, the next
array element after any elements set
with locations or prior occurrences of the <I>compare</I> operand,
is set with the location of the
character containing the escape code and all the remaining
array elements are set to zero.
<P>
If the <I>escape encountered</I> result condition is not specified,
verifications of the character codes
in the base string are not performed.
<P>
<P>
<H5><A NAME="Header_3">Resultant Conditions</A></H5>
<UL>
<P><LI>Positive-The numeric
value(s) of the <I>receiver</I> operand is
positive.
<P><LI>Zero-The numeric
value(s) of the <I>receiver</I> operand is
zero.  In the case where the <I>receiver</I>
operand is an array, the resultant
condition is zero if all elements are zero.
<P><LI>Escape code
encountered-An escape character code
value was encountered during the scanning of the base string.
</UL>
<P>
<H4><A NAME="Header_4">Authorization Required</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_5">Lock Enforcement</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_6">Exceptions</A></H4>
<DL>
<DD><P>06 Addressing
<DL COMPACT>
<DD><A HREF="../exceptions/EX0601.htm">0601 Space Addressing Violation</A>
<DD><A HREF="../exceptions/EX0602.htm">0602 Boundary Alignment</A>
<DD><A HREF="../exceptions/EX0603.htm">0603 Range</A>
</DL>
<DD><P>08 Argument/Parameter
<DL COMPACT>
<DD><A HREF="../exceptions/EX0801.htm">0801 Parameter Reference Violation</A>
</DL>
<DD><P>0C Computation
<DL COMPACT>
<DD><A HREF="../exceptions/EX0C08.htm">0C08 Length Conformance</A>
</DL>
<DD><P>10 Damage Encountered
<DL COMPACT>
<DD><A HREF="../exceptions/EX1004.htm">1004 System Object Damage State</A>
<DD><A HREF="../exceptions/EX1044.htm">1044 Partial System Object Damage</A>
</DL>
<DD><P>1C Machine-Dependent
<DL COMPACT>
<DD><A HREF="../exceptions/EX1C03.htm">1C03 Machine Storage Limit Exceeded</A>
</DL>
<DD><P>20 Machine Support
<DL COMPACT>
<DD><A HREF="../exceptions/EX2002.htm">2002 Machine Check</A>
<DD><A HREF="../exceptions/EX2003.htm">2003 Function Check</A>
</DL>
<DD><P>22 Object Access
<DL COMPACT>
<DD><A HREF="../exceptions/EX2201.htm">2201 Object Not Found </A>
<DD><A HREF="../exceptions/EX2202.htm">2202 Object Destroyed </A>
<DD><A HREF="../exceptions/EX2203.htm">2203 Object Suspended </A>
<DD><A HREF="../exceptions/EX2208.htm">2208 Object Compressed </A>
</DL>
<DD><P>24 Pointer Specification
<DL COMPACT>
<DD> <A HREF="../exceptions/EX2401.htm">2401 Pointer Does Not Exist</A>
<DD> <A HREF="../exceptions/EX2402.htm">2402 Pointer Type Invalid </A>
</DL>
<DD><P>2C Program Execution
<DL COMPACT>
<DD><A HREF="../exceptions/EX2C04.htm">2C04 Branch Target Invalid</A>
</DL>
<DD><P>2E Resource Control Limit
<DL COMPACT>
<DD><A HREF="../exceptions/EX2E01.htm">2E01 User Profile Storage Limit Exceeded</A>
</DL>
<DD><P>32 Scalar Specification
<DL COMPACT>
<DD><A HREF="../exceptions/EX3201.htm">3201 Scalar Type Invalid</A>
<DD><A HREF="../exceptions/EX3203.htm">3203 Scalar Value Invalid</A>
</DL>
<DD><P>36 Space Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX3601.htm">3601 Space Extension/Truncation</A>
</DL>
<DD><P>44 Protection Violation
<DL COMPACT>
<DD><A HREF="../exceptions/EX4401.htm">4401 Object Domain or Hardware Storage Protection Violation</A>
<DD><A HREF="../exceptions/EX4402.htm">4402 Literal Values Cannot Be Changed</A>
</DL>
</DL>

</body>

</HTML>
