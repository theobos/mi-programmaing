  <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
  <head>
<title> XLATWTDS Instruction </title>
			<link rel="stylesheet" type="text/css" href="../tstudio.css">
</head>

<body>
<H1>Translate with Table and DBCS Skip (XLATWTDS)</H1>
<P>

<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Op Code (Hex)
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 1
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 2
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 3
</TH><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">1077
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Target
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Length
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Table
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR></TABLE>
<P>
<I>Operand 1</I>:  Character variable scalar.
<P>
<I>Operand 2</I>:  Binary(4) scalar.
<P>
<I>Operand 3</I>:  Character scalar.
<P>
<TABLE BORDER WIDTH="100%"><TR><TH ALIGN="LEFT">Bound program access</TH><TR><TD>
<PRE>
<P>Built-in number for XLATWTDS is 148.
XLATWTDS (
          target   : address
          length   : address of unsigned binary(4)
          table    : address
)
</PRE>
</TD></TR></TABLE>
<P>
<H5><A NAME="Header_2">Description</A></H5>
<P>
The simple (single byte) characters in
the <I>target</I> are translated under
control of the translate <I>table</I>, for the length
defined by operand 2.
The extended (double byte) character portions of the <I>target</I> are
bypassed and not translated.  The operation begins with the leftmost
character of operand 1 and proceeds character-by-character,
left-to-right, skipping over any Double byte character (DBCS) data
portions.
<P>
The <I>target</I>, operand 1, should have double byte character data
surrounded by a shift out control character (SO = hex 0E)
and a shift in
control character (SI= hex 0F).
Once a SO character is encountered, the
translating of single byte characters halts.  The operation will then
proceed double byte character-by-double byte character until a SI
character is encountered.  This shift in character is then used to
restart the translating of single byte characters.
<P>
The <I>length</I> operand, operand 2, is the number of bytes and
must contain a value between 1 and
32,767.  For length values outside this range a <I> scalar value invalid&nbsp; </I> (hex <A HREF="../exceptions/EX3203.htm">3203</A>) exception
is signaled.
<P>
Single byte characters are translated as follows:
<UL>
<P><LI>
The <I>target</I>
character is used as an offset and added to the location of operand 3.
<P><LI>
The character contained
at the offset location of operand 3 is the translated character.  This
character replaces the original character in the <I>target</I>.
</UL>
<P>
The following example shows the step-by-step results of this
translate operation.  The translate <I>table</I> for this example
has the following hex value&#58; C3D406C5D504C1C2C4C5C6C7C8C9C1C6
<P>
Hex 05040ED2D2E1E10F03 - Initial <I>target</I> value
<P>
Hex 04040ED2D2E1E10F03 - After the 1st character is translated
<P>
Hex 04D50ED2D2E1E10F03 - After the 2nd character is translated
<P>
Hex 04D50ED2D2E1E10F03 - SO character encountered, skip the DBCS portion
<P>
Hex 04D50ED2D2E1E10F03 - Resume translating after SI control character
<P>
Hex 04D50ED2D2E1E10FC5 - Translate 9th character
<P>
Hex 04D50ED2D2E1E10FC5 - Final <I>target</I> value
<P>
The translate <I>table</I>, operand 3, is assumed to be 256 bytes long.
If the table is less than 256 characters long, and a <I>target</I>
character specifies an offset beyond
the end of the table, the resultant characters are obtained
from byte locations in the space following
translate <I>table</I>.  If that portion of the space is not currently
allocated, a <I> space addressing violation&nbsp; </I> (hex <A HREF="../exceptions/EX0601.htm">0601</A>) exception
is signaled.
<P>
This operation only translates the <I>target</I> string and
does not validate the double byte portions
of the <I>target</I>.  For example, if a DBCS
portion of the target string is preceded by the Shift Out control
character, but missing the closing Shift In character, then an <I> invalid extended character data&nbsp; </I> (hex <A HREF="../exceptions/EX0C12.htm">0C12</A>) exception
will NOT be signaled.
However, the Copy Extended Characters Left-Adjusted With Pad
(<A HREF="CPYECLAP.htm">CPYECLAP</A>) instruction can be used to validate
extended character data, if necessary.
<P>
<H4><A NAME="Header_3">Authorization Required</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_4">Lock Enforcement</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_5">Exceptions</A></H4>
<DL>
<DD><P>06 Addressing
<DL COMPACT>
<DD><A HREF="../exceptions/EX0601.htm">0601 Space Addressing Violation</A>
<DD><A HREF="../exceptions/EX0602.htm">0602 Boundary Alignment</A>
<DD><A HREF="../exceptions/EX0603.htm">0603 Range</A>
</DL>
<DD><P>08 Argument/Parameter
<DL COMPACT>
<DD><A HREF="../exceptions/EX0801.htm">0801 Parameter Reference Violation</A>
</DL>
<DD><P>10 Damage Encountered
<DL COMPACT>
<DD><A HREF="../exceptions/EX1044.htm">1044 Partial System Object Damage</A>
</DL>
<DD><P>1C Machine-Dependent
<DL COMPACT>
<DD><A HREF="../exceptions/EX1C03.htm">1C03 Machine Storage Limit Exceeded</A>
</DL>
<DD><P>20 Machine Support
<DL COMPACT>
<DD><A HREF="../exceptions/EX2002.htm">2002 Machine Check</A>
<DD><A HREF="../exceptions/EX2003.htm">2003 Function Check</A>
</DL>
<DD><P>22 Object Access
<DL COMPACT>
<DD><A HREF="../exceptions/EX2202.htm">2202 Object Destroyed </A>
<DD><A HREF="../exceptions/EX2203.htm">2203 Object Suspended </A>
<DD><A HREF="../exceptions/EX2208.htm">2208 Object Compressed </A>
</DL>
<DD><P>24 Pointer Specification
<DL COMPACT>
<DD> <A HREF="../exceptions/EX2401.htm">2401 Pointer Does Not Exist</A>
<DD> <A HREF="../exceptions/EX2402.htm">2402 Pointer Type Invalid </A>
</DL>
<DD><P>2E Resource Control Limit
<DL COMPACT>
<DD><A HREF="../exceptions/EX2E01.htm">2E01 User Profile Storage Limit Exceeded</A>
</DL>
<DD><P>32 Scalar Specification
<DL COMPACT>
<DD><A HREF="../exceptions/EX3201.htm">3201 Scalar Type Invalid</A>
<DD><A HREF="../exceptions/EX3203.htm">3203 Scalar Value Invalid</A>
</DL>
<DD><P>36 Space Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX3601.htm">3601 Space Extension/Truncation</A>
</DL>
<DD><P>44 Protection Violation
<DL COMPACT>
<DD><A HREF="../exceptions/EX4401.htm">4401 Object Domain or Hardware Storage Protection Violation</A>
<DD><A HREF="../exceptions/EX4402.htm">4402 Literal Values Cannot Be Changed</A>
</DL>
</DL>
                                                                   
</body>

</HTML>
