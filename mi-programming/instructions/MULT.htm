  <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
  <head>
<title> MULT Instruction </title>
			<link rel="stylesheet" type="text/css" href="../tstudio.css">
</head>

<body>
<H1>Multiply (MULT)</H1>
<P>

<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Op Code (Hex)
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Extender
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Operand 1
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Operand 2
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Operand 3
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Operand &#91;4-7&#93;
</TH></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%"><B>MULT</B>
104B
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Product
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Multiplicand
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Multiplier
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">
<BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="6"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%"><B>MULTR</B>
124B
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Product
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Multiplicand
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Multiplier
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">
<BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="6"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%"><B>MULTI</B>
184B
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Indicator options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Product
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Multiplicand
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Multiplier
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Indicator targets
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="6"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%"><B>MULTIR</B>
1A4B
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Indicator options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Product
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Multiplicand
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Multiplier
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Indicator targets
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="6"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%"><B>MULTB</B>
1C4B
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Branch options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Product
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Multiplicand
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Multiplier
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Branch targets
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="6"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%"><B>MULTBR</B>
1E4B
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Branch options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Product
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Multiplicand
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Multiplier
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Branch targets
</TD></TR></TABLE><P>
<I>Operand 1</I>:  Numeric variable scalar.
<P>
<I>Operand 2</I>:  Numeric scalar.
<P>
<I>Operand 3</I>:  Numeric scalar.
<P>
<I>Operand 4-7</I>:
<UL>
<P><LI>
<I>Branch Form</I>-Branch point, instruction pointer, relative
instruction number, or absolute instruction number.
<P><LI>
<I>Indicator Form</I>-Numeric variable scalar or character
variable scalar.
</UL>
<P>
<H4><A NAME="Header_2">Short forms</A></H4>
<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Op Code (Hex)
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Extender
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 1
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 2
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand &#91;3-6&#93;
</TH></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><B>MULTS</B>
104B
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Product/Multiplicand
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Multiplier
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">
<BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><B>MULTSR</B>
134B
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Product/Multiplicand
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Multiplier
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">
<BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><B>MULTIS</B>
194B
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Indicator options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Product/Multiplicand
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Multiplier
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Indicator targets
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><B>MULTISR</B>
1B4B
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Indicator options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Product/Multiplicand
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Multiplier
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Indicator targets
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><B>MULTBS</B>
1D4B
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Branch options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Product/Multiplicand
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Multiplier
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Branch targets
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><B>MULTBSR</B>
1F4B
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Branch options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Product/Multiplicand
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Multiplier
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Branch targets
</TD></TR></TABLE><P>
<I>Operand 1</I>:  Numeric variable scalar.
<P>
<I>Operand 2</I>:  Numeric scalar.
<P>
<I>Operand 3-6</I>:
<UL>
<P><LI>
<I>Branch Form</I>-Branch point, instruction pointer, relative
instruction number, or absolute instruction number.
<P><LI>
<I>Indicator Form</I>-Numeric variable scalar or character
variable scalar.
</UL>
<P>
<H5><A NAME="Header_3">Description</A></H5>
<P>
The <I>product</I> is the result of multiplying
the <I>multiplicand</I> and the <I>multiplier.</I>
<P>
Operands can have floating-point, packed or zoned decimal,
signed or unsigned binary type.
<P>
Source operands are the <I>multiplicand</I> and <I>multiplier.</I>
The receiver
operand is the <I>product.</I>
<P>
If operands are not of the same type, source operands are converted
according to the following rules:
<OL TYPE=1>
<P><LI>If any one of the operands has floating point type, source operands
are converted to floating point type.
<P><LI>Otherwise, if any one of the operands has zoned or packed decimal
type, source operands are converted to packed decimal.
<P><LI>Otherwise, the binary operands are converted
as follows.
<OL TYPE=a>
<P><LI><A NAME="LIBIN2C"></A>
If an unsigned binary(2) source operand is used with a signed binary
operand of any length, the unsigned binary(2) is viewed as a signed
binary(4).
<P><LI>
If both source operands are signed binary (including cases resulting
from use of <A class="content" HREF="#LIBIN2C">3a</A>), then a signed operation, of the
length of the longer operand, is done.
<P><LI>
If both source operands are unsigned binary(2), then an unsigned
2-byte operation is done.
<P><LI>
If either source operand is unsigned binary(4), then an unsigned
4-byte operation is done with overflow detection disabled until the
assignment to the receiver.
</OL>
</OL>
<P>
Source operands are multiplied according to their type.  Floating point
operands are multiplied using floating point multiplication.  Packed
decimal operands are multiplied using packed decimal multiplication.
Unsigned binary multiplication is used with unsigned source
operands, except as noted above.
Signed binary operands are multiplied using two's complement binary
multiplication.
<P>
Better performance can be obtained if all operands have the same type.
Signed and unsigned binary multiplication execute faster than either
packed decimal or floating point multiplication.
<P>
The operands must be numeric with any implicit conversions
occurring according
to the rules of arithmetic operations as outlined in the
<A class="content" HREF="../MCNPFAO.htm">Arithmetic Operations.</A>
<P>
Decimal operands used in floating-point operations cannot
contain more than 15 total digit positions.
<P>
If the <I>multiplicand</I> operand or
the <I>multiplier</I> operand has a
value of 0, the result of the multiplication is a zero product.
<P>
For a decimal operation, no alignment of the assumed decimal
point is performed for the <I>multiplier</I>
and <I>multiplicand</I> operands.
<P>
The operation occurs using the specified lengths
of the <I>multiplicand</I>
and <I>multiplier</I> operands with no logical zero padding on the
left necessary.
<P>
Floating-point multiplication uses exponent addition and significand
multiplication.
<P>
For nonfloating-point computations and for significand multiplication
for floating-point operations, the multiplication operation is
performed according to the rules of algebra.
Unsigned binary operands are treated as positive numbers for the algebra.
<P>
The result of the operation is copied into the <I>product</I> operand.
If this operand is not the same type as that used in
performing the operation,
the resultant value is converted to its type.
If necessary, the resultant value is adjusted to the
length of the <I>product</I>
operand, aligned at the assumed decimal point of the <I>product</I>
operand, or both before being copied to it.
Length adjustment and decimal point alignment are performed according to
the rules of arithmetic operations outlined in the
<A class="content" HREF="../MCNPFAO.htm">Arithmetic Operations.</A>
<P>
For the optional round form of the instruction, specification of a
floating-point receiver operand is invalid.
<P>
For fixed-point operations in programs that request to be notified of
size exceptions, if nonzero digits are
truncated from the left end of the resultant
value, a <I> size&nbsp; </I> (hex <A HREF="../exceptions/EX0C0A.htm">0C0A</A>) exception
is signaled.
<P>
For floating-point operations involving a fixed-point receiver
field (if nonzero digits would be
truncated from the left end of the resultant value), an <I> invalid floating-point conversion&nbsp; </I> (hex <A HREF="../exceptions/EX0C0C.htm">0C0C</A>) exception
is signaled.
<P>
For a floating-point product operand, if the exponent of the
resultant value is either too large
or too small to be represented in the <I>product</I> field, the <I> floating-point overflow&nbsp; </I> (hex <A HREF="../exceptions/EX0C06.htm">0C06</A>) exception
or the <I> floating-point underflow&nbsp; </I> (hex <A HREF="../exceptions/EX0C07.htm">0C07</A>) exception
is signaled.
<P>
If operands overlap but do not share all of the same bytes, results of
operations performed on
these operands are not predictable.  If overlapped operands
share all of the same bytes, the
results are predictable when direct addressing is used.  If
indirect addressing is used (that is,
based operands, parameters, strings with variable lengths,
and arrays with variable subscripts),
the results are not  always predictable.
<P>
If a decimal to binary conversion causes a <I> size&nbsp; </I> (hex <A HREF="../exceptions/EX0C0A.htm">0C0A</A>) exception
to be signaled, the binary value
contains the correct truncated
result only if the decimal value contains 15 or fewer
significant nonfractional digits.
<P>
<P>
<H5><A NAME="Header_4">Resultant Conditions</A></H5>
<UL>
<P><LI>Positive-The
algebraic value of the numeric scalar <I>product</I> is positive.
<P><LI>Negative-The
algebraic value of the numeric scalar <I>product</I> is negative.
<P><LI>Zero-The
algebraic value of the numeric scalar <I>product</I> is zero.
<P><LI>Unordered-The value assigned a
floating-point <I>product</I> operand is NaN.
</UL>
<P>
<H4><A NAME="Header_5">Authorization Required</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_6">Lock Enforcement</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_7">Exceptions</A></H4>
<DL>
<DD><P>06 Addressing
<DL COMPACT>
<DD><A HREF="../exceptions/EX0601.htm">0601 Space Addressing Violation</A>
<DD><A HREF="../exceptions/EX0602.htm">0602 Boundary Alignment</A>
<DD><A HREF="../exceptions/EX0603.htm">0603 Range</A>
</DL>
<DD><P>08 Argument/Parameter
<DL COMPACT>
<DD><A HREF="../exceptions/EX0801.htm">0801 Parameter Reference Violation</A>
</DL>
<DD><P>0C Computation
<DL COMPACT>
<DD><A HREF="../exceptions/EX0C02.htm">0C02 Decimal Data </A>
<DD><A HREF="../exceptions/EX0C06.htm">0C06 Floating-Point Overflow </A>
<DD><A HREF="../exceptions/EX0C07.htm">0C07 Floating-Point Underflow </A>
<DD><A HREF="../exceptions/EX0C09.htm">0C09 Floating-Point Invalid Operand </A>
<DD><A HREF="../exceptions/EX0C0A.htm">0C0A Size</A>
<DD><A HREF="../exceptions/EX0C0C.htm">0C0C Invalid Floating-Point Conversion</A>
<DD><A HREF="../exceptions/EX0C0D.htm">0C0D Floating-Point Inexact Result</A>
</DL>
<DD><P>10 Damage Encountered
<DL COMPACT>
<DD><A HREF="../exceptions/EX1004.htm">1004 System Object Damage State</A>
<DD><A HREF="../exceptions/EX1044.htm">1044 Partial System Object Damage</A>
</DL>
<DD><P>1C Machine-Dependent
<DL COMPACT>
<DD><A HREF="../exceptions/EX1C03.htm">1C03 Machine Storage Limit Exceeded</A>
</DL>
<DD><P>20 Machine Support
<DL COMPACT>
<DD><A HREF="../exceptions/EX2002.htm">2002 Machine Check</A>
<DD><A HREF="../exceptions/EX2003.htm">2003 Function Check</A>
</DL>
<DD><P>22 Object Access
<DL COMPACT>
<DD><A HREF="../exceptions/EX2201.htm">2201 Object Not Found </A>
<DD><A HREF="../exceptions/EX2202.htm">2202 Object Destroyed </A>
<DD><A HREF="../exceptions/EX2203.htm">2203 Object Suspended </A>
<DD><A HREF="../exceptions/EX2208.htm">2208 Object Compressed </A>
</DL>
<DD><P>24 Pointer Specification
<DL COMPACT>
<DD> <A HREF="../exceptions/EX2401.htm">2401 Pointer Does Not Exist</A>
<DD> <A HREF="../exceptions/EX2402.htm">2402 Pointer Type Invalid </A>
</DL>
<DD><P>2C Program Execution
<DL COMPACT>
<DD><A HREF="../exceptions/EX2C04.htm">2C04 Branch Target Invalid</A>
</DL>
<DD><P>2E Resource Control Limit
<DL COMPACT>
<DD><A HREF="../exceptions/EX2E01.htm">2E01 User Profile Storage Limit Exceeded</A>
</DL>
<DD><P>36 Space Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX3601.htm">3601 Space Extension/Truncation</A>
</DL>
<DD><P>44 Protection Violation
<DL COMPACT>
<DD><A HREF="../exceptions/EX4401.htm">4401 Object Domain or Hardware Storage Protection Violation</A>
<DD><A HREF="../exceptions/EX4402.htm">4402 Literal Values Cannot Be Changed</A>
</DL>
</DL>

</body>

</HTML>
