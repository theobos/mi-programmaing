  <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
  <head>
<title> LOCKSL Instruction </title>
			<link rel="stylesheet" type="text/css" href="../tstudio.css">
</head>

<body>
<H1>Lock Space Location (LOCKSL)</H1>
<P>

<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Op Code (Hex)
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 1
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 2
</TH><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">03F6
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Space location or lock request template
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Lock request
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR></TABLE>
<P><I>Operand 1:</I>  Space pointer data object.
<P>
<I>Operand 2:</I>  Character(1) scalar or null.<P>
<TABLE BORDER WIDTH="100%"><TR><TH ALIGN="LEFT">Bound program access</TH><TR><TD>
<PRE>
<P>Built-in number for LOCKSL is 47.
LOCKSL (
<font color=blue>
        space_location   : address of space pointer(16)</FONT>
        lock_request     : address OR
                           null operand
)
</PRE>
</TD></TR></TABLE>
<P>
<P>
<H5><A NAME="Header_2">Description</A></H5>
<P>
When operand 2 is not null, a thread scoped lock specified by operand 2
is requested by the current thread for the <I>space location</I>
(operand 1).
When operand 2 is null, thread scoped space location locks
identified in the <I>lock request template</I>
(operand 1) are requested by the
current thread.
<P>
Locking a space location does not prevent any byte operation from
referencing that location, nor does it prevent the space from being
extended, truncated, or destroyed.  Space location locks follow the
normal locking rules with respect to conflicts and waits but are
strictly symbolic in nature.
<P>
A space pointer machine object cannot be specified for operand 1.
<font color=blue>
If operand 1 points to teraspace an <I> unsupported space use&nbsp;</I> (hex <A HREF="../exceptions/EX0607.htm">0607</A>) exception is signaled.
The <A HREF="LOCKTSL.htm">LOCKTSL</A> instruction can however be used with
teraspace locations.
</FONT>
<P>
The following is the format of operand 2 when not null:
<BR>
<TABLE>
<TR>
<TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="2">Offset
</TH><TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="12"><BR></TH></TR><TR>
<TH ALIGN="RIGHT" VALIGN="TOP">Dec
</TH><TH ALIGN="RIGHT" VALIGN="TOP">Hex
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Field Name
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Data Type and Length
</TH></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Lock request
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Lock state selection
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 0-4
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
(1 = lock requested, 0 = lock not requested)
Only one state may be requested.
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">LSRD lock
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Bit 0
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">LSRO lock
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Bit 1
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">LSUP lock
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Bit 2
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">LEAR lock
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Bit 3
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">LENR lock
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Bit 4
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 5-7
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">1
</TD><TD ALIGN="RIGHT" VALIGN="TOP">1
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">--- End ---
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
<BR></TD></TR></TABLE>
<P>
For this format, if the requested lock cannot be immediately granted, the
thread will enter a synchronous wait for the lock for a period of up to
the interval specified by the process default time-out value.  If the
wait exceeds this time limit, a <I> space location lock wait time-out&nbsp; </I> (hex <A HREF="../exceptions/EX3A04.htm">3A04</A>) exception
is
signaled, and the requested lock is not granted.
<P>
During the wait, the process access state may be modified.  This can
occur if the process' <I>instruction wait access state</I> control
attribute is set to <I>allow access state modification</I>, and
if the process contains a single thread at the time of the lock
request.  Process access states are not
modified for multi-threaded processes.
<P>
When operand 2 is null, the <I>lock request template</I>
identified by operand
1 must be aligned on a 16-byte boundary.  The format of operand 1 is as
follows:
<P>
<BR>
<TABLE>
<TR>
<TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="2">Offset
</TH><TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="12"><BR></TH></TR><TR>
<TH ALIGN="RIGHT" VALIGN="TOP">Dec
</TH><TH ALIGN="RIGHT" VALIGN="TOP">Hex
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Field Name
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Data Type and Length
</TH></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Number of space location lock requests in the template
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">4
</TD><TD ALIGN="RIGHT" VALIGN="TOP">4
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Offset to lock state selection values
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">6
</TD><TD ALIGN="RIGHT" VALIGN="TOP">6
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Wait time-out value for instruction
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(8)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">14
</TD><TD ALIGN="RIGHT" VALIGN="TOP">E
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Lock request options
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(3)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">14
</TD><TD ALIGN="RIGHT" VALIGN="TOP">E
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 0
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">14
</TD><TD ALIGN="RIGHT" VALIGN="TOP">E
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Lock request type
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 1
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD WIDTH="30">0 =
</TD><TD>Immediate request-If all locks cannot be immediately granted,
signal exception.
</TD></TR><TR VALIGN="TOP"><TD>1 =
</TD><TD>Synchronous request-Wait until all locks can be granted.
</TD></TR></TABLE>
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">14
</TD><TD ALIGN="RIGHT" VALIGN="TOP">E
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Access state modifications
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 2-3
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">14
</TD><TD ALIGN="RIGHT" VALIGN="TOP">E
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">When the process is entering
lock wait for synchronous request:
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Bit 2
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD WIDTH="30">0 =
</TD><TD>Access state should not be modified.
</TD></TR><TR VALIGN="TOP"><TD>1 =
</TD><TD>Access state should be modified.
</TD></TR></TABLE>
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">14
</TD><TD ALIGN="RIGHT" VALIGN="TOP">E
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">When the process is leaving lock wait:
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Bit 3
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD WIDTH="30">0 =
</TD><TD>Access state should not be modified.
</TD></TR><TR VALIGN="TOP"><TD>1 =
</TD><TD>Access state should be modified.
</TD></TR></TABLE>
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">14
</TD><TD ALIGN="RIGHT" VALIGN="TOP">E
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 4-5
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">14
</TD><TD ALIGN="RIGHT" VALIGN="TOP">E
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Time-out option
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 6
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD WIDTH="30">0 =
</TD><TD>Wait for specified time, then signal time-out exception.
</TD></TR><TR VALIGN="TOP"><TD>1 =
</TD><TD>Wait indefinitely.
</TD></TR></TABLE>
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">14
</TD><TD ALIGN="RIGHT" VALIGN="TOP">E
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 7-15
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">14
</TD><TD ALIGN="RIGHT" VALIGN="TOP">E
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Modify thread event mask option
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 16
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD WIDTH="30">0 =
</TD><TD>Do not modify thread event mask
</TD></TR><TR VALIGN="TOP"><TD>1 =
</TD><TD>Modify thread event mask
</TD></TR></TABLE>
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">14
</TD><TD ALIGN="RIGHT" VALIGN="TOP">E
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Asynchronous signals processing option
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 17
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD WIDTH="30">0 =
</TD><TD>Do not allow asynchronous signal processing during Lock Space
Location wait.
</TD></TR><TR VALIGN="TOP"><TD>1 =
</TD><TD>Allow asynchronous signal processing during Lock Space Location
wait.
</TD></TR></TABLE>
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">14
</TD><TD ALIGN="RIGHT" VALIGN="TOP">E
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 18-23
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">17
</TD><TD ALIGN="RIGHT" VALIGN="TOP">11
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Modify thread event mask control
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">17
</TD><TD ALIGN="RIGHT" VALIGN="TOP">11
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">New thread event mask
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">UBin(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">19
</TD><TD ALIGN="RIGHT" VALIGN="TOP">13
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Previous thread event mask
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">UBin(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">21
</TD><TD ALIGN="RIGHT" VALIGN="TOP">15
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(11)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">32
</TD><TD ALIGN="RIGHT" VALIGN="TOP">20
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Space location(s) to be locked
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">&#91;*&#93; Space pointer
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
This should be repeated as specified by <I>number of space location
lock requests in template</I> above.
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">*
</TD><TD ALIGN="RIGHT" VALIGN="TOP">*
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">--- End ---
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
<BR></TD></TR></TABLE>
<P>
The <I>lock state selection</I> is located by adding the <I>offset to
lock state selection values</I> above to operand 1.
<BR>
<TABLE>
<TR>
<TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="2">Offset
</TH><TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="12"><BR></TH></TR><TR>
<TH ALIGN="RIGHT" VALIGN="TOP">Dec
</TH><TH ALIGN="RIGHT" VALIGN="TOP">Hex
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Field Name
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Data Type and Length
</TH></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Lock state selection
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">&#91;*&#93; Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
(repeated for each pointer in the template)
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Requested lock state
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 0-4
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
(1 = lock requested, 0 = lock not requested)
Only one state may be requested per entry.
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">LSRD lock
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Bit 0
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">LSRO lock
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Bit 1
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">LSUP lock
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Bit 2
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">LEAR lock
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Bit 3
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">LENR lock
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3">Bit 4
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 5-6
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Entry active indicator
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 7
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>0 =
</TD><TD>Entry not active- This entry is not used.
</TD></TR><TR VALIGN="TOP"><TD>1 =
</TD><TD>Entry active- Obtain this lock.
</TD></TR></TABLE>
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">*
</TD><TD ALIGN="RIGHT" VALIGN="TOP">*
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">--- End ---
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
<BR></TD></TR></TABLE>
<P>
<H5><A NAME="Header_3">Lock Allocation Procedure</A></H5>
<P>
A single Lock Space Location instruction can request the allocation of
one or more lock states on one or more space locations.  Space location
locks are granted sequentially until all the locks requested are
granted.
<P>
The <B><U>wait time-out</U></B> field establishes the maximum amount of time
that a thread competes for the requested set of locks when the <I>lock
request type</I> is <I>synchronous</I>.
See
<A class="content" HREF="../MININ.htm#HDRTIMEFMT">Standard Time Format</A> for additional information
on the format of the <I>wait time-out</I>.
The maximum wait time-out interval allowed is a value equal to
(2<SUP>48</SUP> - 1) microseconds.  Any value that indicates more time
than the maximum wait time-out causes the maximum wait time-out to be
used.  If the <I>wait time-out</I> field is specified with a value of
binary 0, then the value associated with the default wait time-out
parameter in the process definition template establishes the time
interval.
<P>
When a requested lock state cannot be immediately granted, any locks
already granted by this Lock Space Location instruction are released,
and the <I>lock request type</I> specified in the lock request
template establishes the machine action.  The <B><U>lock request type</U></B>
values are described in the following paragraphs.
<UL>
<P><LI> <I>Immediate request</I>- If the requested space location locks
cannot be granted immediately, this option causes the <I> lock request not grantable&nbsp; </I> (hex <A HREF="../exceptions/EX1A02.htm">1A02</A>) exception
to be signaled.  No space
location locks are granted, and the lock request is canceled.
<P><LI> <I>Synchronous request</I>- This option causes the thread
requesting the locks to be placed in the wait state until all requested
locks can be granted.  If the locks cannot be granted in the time
interval established by the <I>wait time-out</I> field specified in
the lock request template, the <I> space location lock wait time-out&nbsp; </I> (hex <A HREF="../exceptions/EX3A04.htm">3A04</A>) exception
is signaled to the requesting thread
at the end of the interval.  No locks are granted, and the lock request
is canceled.
</UL>
<P>
When:
<UL COMPACT>
<LI>
the thread requesting the locks is the only thread in the
process at the time of the lock request, and
<LI>
the <I>lock request type</I> is <I>synchronous</I>, and
<LI>
the requested locks cannot be immediately granted,
</UL>
the <B><U>access state
modifications</U></B> field in the lock request template specifies whether
the access state of the process access group is to be modified on
entering and/or returning from the lock wait.  The parameter has no
effect if the process instruction wait access state control attribute
specifies that no access state modification is allowed.  If the process
attribute value specifies that access state modification is allowed and
the wait on event access state modification option specifies modify
access state, the machine modifies the access state for the specified
process access group.
<P>
If the thread requesting the locks belongs to a multi-threaded
process, no access state modification is performed.
<P>
If the <I>lock request type</I> is <I>synchronous</I> and the
invocation containing the Lock Space Location instruction is terminated,
then the lock request is canceled.
<P>Allocated space location locks are removed when the thread holding
the locks terminates.  If a thread terminates while waiting for a
space location lock, the lock request is canceled.
<P>
The <B><U>modify thread event mask option</U></B> controls the state of the
event mask in the thread executing this instruction.  When the thread
event mask is in the <I>masked</I> state, the machine does not
schedule signaled event monitors in the thread.  The event monitors
continue to be signaled by the machine or other threads.  When the
thread event mask is modified to the <I>unmasked</I> state, event
handlers are scheduled to handle those events that occurred while the
thread was masked and those events occurring while in the unmasked
state.
<P>
If the system security level machine attribute is hex 40 or greater and
the thread is running in user state, then the <I>modify thread event
mask option</I> is not allowed and a <I> template value invalid&nbsp; </I> (hex <A HREF="../exceptions/EX3801.htm">3801</A>) exception
is signalled.
<P>
When the <I>modify thread event mask</I> is set to 1, the <B><U>previous thread event mask</U></B> will be returned and the <B><U>new
thread event mask</U></B> will take effect only when the space location
lock(s) have been successfully granted.  If the space location lock
request is not successful, the <I>previous thread event mask</I>
value is not returned, nor does the <I>new thread event mask</I> take
effect.
<P>
The thread event mask values are validity checked only when the modify
thread event mask is set to 1, and ignored otherwise.  Valid masking
values are:
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>0
</TD><TD>Masked
</TD></TR><TR VALIGN="TOP"><TD>256
</TD><TD>Unmasked
</TD></TR></TABLE>
<P>
Other values are reserved and must not be specified, otherwise a <I> template value invalid&nbsp; </I> (hex <A HREF="../exceptions/EX3801.htm">3801</A>) exception
is signaled.
<P>
The <B><U>asynchronous signals processing option</U></B> controls the action
to be taken if an asynchronous signal is pending or received while in
Lock Space Location wait.  If an asynchronous signal that is not blocked
or ignored is generated for the thread and the <I>asynchronous signals
processing option</I> indicates <I>allow asynchronous signals
processing during Lock Space Location wait</I>, the Lock Space Location
wait will be terminated and an <I>asynchronous signal terminated MI wait&nbsp; </I>(hex <A HREF="../exceptions/EX4C01.htm">4C01</A>) exception is signaled.  Otherwise,
when the <I>asynchronous signals processing option</I> indicates <I>do not allow asynchronous signals processing during Lock Space
Location wait</I>, the thread remains in the wait until all requested
locks can be granted or until the <I>wait time-out value for
instruction</I> expires.
<P>
If any exception is identified during the instruction's execution, any
locks already granted by the instruction are released, and the lock
request is canceled.
<P>
For each space location lock, counts are kept by lock state and by
thread.  When a lock request is granted, the appropriate <I>lock
count</I> of each lock state specified is incremented by 1.
<P>
<H4><A NAME="Header_4">Authorization Required</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_5">Lock Enforcement</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_6">Exceptions</A></H4>
<DL>
<DD><P>06 Addressing
<DL COMPACT>
<DD><A HREF="../exceptions/EX0601.htm">0601 Space Addressing Violation</A>
<DD><A HREF="../exceptions/EX0602.htm">0602 Boundary Alignment</A>
<DD><A HREF="../exceptions/EX0603.htm">0603 Range</A>
<font color=blue>
<DD><A HREF="../exceptions/EX0607.htm">0607 Unsupported Space Use</A>
</FONT>
</DL>
<DD><P>08 Argument/Parameter
<DL COMPACT>
<DD><A HREF="../exceptions/EX0801.htm">0801 Parameter Reference Violation</A>
</DL>
<DD><P>10 Damage Encountered
<DL COMPACT>
<DD><A HREF="../exceptions/EX1004.htm">1004 System Object Damage State</A>
<DD><A HREF="../exceptions/EX1044.htm">1044 Partial System Object Damage</A>
</DL>
<DD><P>1A Lock State
<DL COMPACT>
<DD><A HREF="../exceptions/EX1A02.htm">1A02 Lock Request Not Grantable </A>
</DL>
<DD><P>1C Machine-Dependent
<DL COMPACT>
<DD><A HREF="../exceptions/EX1C03.htm">1C03 Machine Storage Limit Exceeded</A>
<DD><A HREF="../exceptions/EX1C06.htm">1C06 Machine Lock Limit Exceeded</A>
</DL>
<DD><P>20 Machine Support
<DL COMPACT>
<DD><A HREF="../exceptions/EX2002.htm">2002 Machine Check</A>
<DD><A HREF="../exceptions/EX2003.htm">2003 Function Check</A>
</DL>
<DD><P>22 Object Access
<DL COMPACT>
<DD><A HREF="../exceptions/EX2202.htm">2202 Object Destroyed </A>
<DD><A HREF="../exceptions/EX2208.htm">2208 Object Compressed </A>
</DL>
<DD><P>24 Pointer Specification
<DL COMPACT>
<DD> <A HREF="../exceptions/EX2401.htm">2401 Pointer Does Not Exist</A>
<DD> <A HREF="../exceptions/EX2402.htm">2402 Pointer Type Invalid </A>
</DL>
<DD><P>2E Resource Control Limit
<DL COMPACT>
<DD><A HREF="../exceptions/EX2E01.htm">2E01 User Profile Storage Limit Exceeded</A>
</DL>
<DD><P>32 Scalar Specification
<DL COMPACT>
<DD><A HREF="../exceptions/EX3201.htm">3201 Scalar Type Invalid</A>
<DD><A HREF="../exceptions/EX3203.htm">3203 Scalar Value Invalid</A>
</DL>
<DD><P>36 Space Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX3601.htm">3601 Space Extension/Truncation</A>
</DL>
<DD><P>38 Template Specification
<DL COMPACT>
<DD><A HREF="../exceptions/EX3801.htm">3801 Template Value Invalid</A>
</DL>
<DD><P>3A Wait Time-Out
<DL COMPACT>
<DD><A HREF="../exceptions/EX3A04.htm">3A04 Space Location Lock Wait Time-Out</A>
</DL>
<DD><P>44 Protection Violation
<DL COMPACT>
<DD><A HREF="../exceptions/EX4401.htm">4401 Object Domain or Hardware Storage Protection Violation</A>
<DD><A HREF="../exceptions/EX4402.htm">4402 Literal Values Cannot Be Changed</A>
</DL>
<DD><P>4C Signals Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX4C01.htm"><A HREF="../exceptions/EX0C0B.htm">0C0B Zero Divide</A></A>
</DL>
</DL>

</body>

</HTML>
