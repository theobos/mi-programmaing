  <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
  <head>
<title> CVTMC Instruction </title>
			<link rel="stylesheet" type="text/css" href="../tstudio.css">
</head>

<body>
<H1>Convert MRJE to Character (CVTMC)</H1>
<P>

<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Op Code (Hex)
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Extender
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Operand 1
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Operand 2
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Operand 3
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Operand &#91;4-5&#93;
</TH></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%"><B>CVTMC</B>
10AB
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Receiver
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Controls
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Source
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">
<BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="6"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%"><B>CVTMCB</B>
1CAB
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Branch options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Receiver
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Controls
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Source
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Branch targets
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="6"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%"><B>CVTMCI</B>
18AB
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Indicator options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Receiver
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Controls
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Source
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Indicator targets
</TD></TR></TABLE>
<P>
<I>Operand 1</I>:  Character variable scalar.
<P>
<I>Operand 2</I>:  Character(6) variable scalar.
<P>
<I>Operand 3</I>:  Character scalar.
<P>
<I>Operand 4-5</I>:
<UL>
<P><LI>
<I>Branch Form</I>-Branch point, instruction pointer, relative
instruction number, or absolute instruction number.
<P><LI>
<I>Indicator Form</I>-Numeric variable scalar or character
variable scalar.
</UL>
<TABLE BORDER WIDTH="100%"><TR><TH ALIGN="LEFT">Bound program access</TH><TR><TD>
<PRE>
<P>Built-in number for CVTMC is 132.
CVTMC (
       receiver          : address
       receiver_length   : unsigned binary(4)
       controls          : address
       source            : address
       source_length     : unsigned binary(4)
       return_code       : address of signed binary(4)
)
</PRE>
<P>The return_code will be set as follows&#58;
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD><P><B>Return code</B>
</TD><TD><P><B>Meaning</B>
</TD></TR><TR VALIGN="TOP"><TD><P><B><TT>-1</TT>
</B></TD><TD><P>Receiver Overrun.
</TD></TR><TR VALIGN="TOP"><TD><P><B><TT> 0</TT>
</B></TD><TD><P>Source Exhausted.
</TD></TR></TABLE>
<P>The <VAR>receiver</VAR>, <VAR>controls</VAR> and <VAR>source</VAR>
parameters correspond to operands 1, 2 and 3 on the
CVTMC operation.
<P>The <VAR>receiver_length</VAR> and <VAR>source_length</VAR>
parameters contain the length, in bytes, of the receiver and
source strings.  They are expected to contain values between 1
and 32,767.
<P>The <VAR>return_code</VAR> parameter is used to provide support for
the branch and indicator forms of the CVTMC operation.  The user
must specify code to process the <VAR>return_code</VAR> and perform
the desired branching or indicator setting.
</PRE>
</TD></TR></TABLE>
<P>
<H5><A NAME="Header_2">Description</A></H5>
<P>
This instruction converts a character string
from the MRJE (MULTI-LEAVING remote
job entry) compressed format to character format.  The operation
converts the <I>source</I> (operand 3)
from the MRJE compressed format to character format under control of the <I>controls</I> (operand 2) and
places the results in the <I>receiver</I> (operand 1).
<P>
The <I>source</I> and <I>receiver</I> operands must both be character
strings.  The <I>source</I> operand cannot be
specified as either a signed or unsigned immediate value.
<P>
The <I>controls</I> operand must be a character scalar
that specifies additional
information to be used to
control the conversion operation.  It must be at least 6
bytes in length and have the following format:
<BR>
<TABLE>
<TR>
<TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="2">Offset
</TH><TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="12"><BR></TH></TR><TR>
<TH ALIGN="RIGHT" VALIGN="TOP">Dec
</TH><TH ALIGN="RIGHT" VALIGN="TOP">Hex
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Field Name
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Data Type and Length
</TH></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Controls operand
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(6)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Receiver offset
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bin(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">2
</TD><TD ALIGN="RIGHT" VALIGN="TOP">2
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Source offset
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bin(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">4
</TD><TD ALIGN="RIGHT" VALIGN="TOP">4
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Algorithm modifier
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">5
</TD><TD ALIGN="RIGHT" VALIGN="TOP">5
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Receiver record length
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">6
</TD><TD ALIGN="RIGHT" VALIGN="TOP">6
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">--- End ---
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
<BR></TD></TR></TABLE>
As input to the instruction, the <B><U>source offset</U></B>
and <B><U>receiver offset</U></B>
fields specify the offsets where bytes
of the <I>source</I> and <I>receiver</I> operands
are to be processed.  If
an offset is equal to or greater than
the length specified for the operand it corresponds to (it
identifies a byte beyond the end of the
operand), a <I> template value invalid&nbsp; </I> (hex <A HREF="../exceptions/EX3801.htm">3801</A>) exception
is signaled.  As
output from the instruction, the <I>source offset</I>
and <I>receiver offset</I> fields specify offsets that indicate
how much of the operation is complete when the instruction ends.
<P>
The <B><U>algorithm modifier</U></B> has the following valid values:
<UL>
<P><LI>
Hex 00 = Do not move
SRCBs (sub record control bytes) from
the <I>source</I> into the <I>receiver</I>.
<P><LI>
Hex 01 = Move SRCBs
from the <I>source</I> into the <I>receiver</I>.
</UL>
The <B><U>receiver record length</U></B> value specifies the record length to
be used to convert source records
into the <I>receiver</I> operand.  This length applies to only the
string portion of the receiver record
and does not include the optional SRCB field.  If a <I>receiver
record length</I> of 0 is specified, a <I> template value invalid&nbsp; </I> (hex <A HREF="../exceptions/EX3801.htm">3801</A>) exception
is signaled.
<P>
Only the first 6 bytes of the <I>controls</I> operand are used.  Any
excess bytes are ignored.
<P>
The operation begins by accessing the bytes
of the <I>source</I> operand at the
location specified by the <I>source offset</I>.
This is assumed to be the start of a record.  The
bytes of the records in the <I>source</I> operand are converted into the <I>receiver</I>
operand at the
location specified by the <I>receiver
offset</I> according to the following algorithm.
<P>
The first byte of the source record is considered to be an RCB
(record control byte) that is to be ignored during conversion.
<P>
The second byte of the source record is considered to be an SRCB.  If an <I>algorithm modifier</I> of
value hex 00 was specified, the SRCB is ignored.  If an <I>algorithm modifier</I> of value hex 01 was
specified, the SRCB is copied into the <I>receiver</I>.
<P>
The strings to be built in the receiver record are described
in the <I>source</I> after the SRCB by one or
more SCBs (string control bytes).
<P>
The format of the SCBs in the <I>source</I> are as follows:
<PRE>
o k l jjjjj
</PRE>
<P>
The bit meanings are:
<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Bit
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">Value
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="57%">Meaning
</TH><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">o
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="57%">End of record;the EOR SCB is hex 00.
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">1
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="57%">All other SCBs.
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">k
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="57%">The string is compressed.
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">1
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="57%">The string is not compressed.
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">l
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="57%">For k = 0:
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="57%">Blanks (hex 40s) have been deleted.
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">1
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="57%">Nonblank characters have been deleted.
The next character in the data stream is the specimen character.
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="57%">For k = 1:
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="57%">This bit is part of the length field for length of uncompressed data.
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">jjjjj
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="57%">Number of characters that have been deleted if k = 0.
The value can be 1-31.
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">ljjjjj
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="57%">Number of characters to the next SCB (no compression) if k=1.  The value can be 1-63.
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="57%">The uncompressed (nonidentical bytes) follow the SCB in the data stream.
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="14%"><BR></TD></TR></TABLE>
<P>
A length of 0 encountered in an SCB results in the signaling
of a <I> conversion&nbsp;</I> ((hex <A HREF="../exceptions/EX0C01.htm">0C01</A>)) exception.
<P>
Strings of blanks or nonblank identical characters described
in the source record are repeated in
the <I>receiver</I> the number of times indicated
by the SCB count value.
<P>
Strings of nonidentical characters described in the source
record are moved into the <I>receiver</I> for
the length indicated by the SCB count value.
<P>
When an EOR (end of record) SCB (hex 00) is encountered in
the <I>source</I>, the <I>receiver</I> is padded with
blanks out to the end of the current record.
<P>
If the converted form of a source record is larger than the <I>receiver record length</I>, the instruction
is terminated by signaling a <I> length conformance&nbsp;</I> ((hex <A HREF="../exceptions/EX0C08.htm">0C08</A>)) exception.
<P>
If the end of the <I>source</I> operand is not encountered,
the operation then
continues by reapplying the
above algorithm to the next record in the <I>source</I> operand.
<P>
If the end of the <I>source</I> operand is encountered (whether or
not in conjunction with a record
boundary, EOR SCB in the source), the instruction ends with a resultant
condition of <I>source
exhausted</I>.  The <I>receiver offset</I> locates the
byte following the last fully
converted record in the <I>receiver</I>.  The <I>source offset</I>
locates the byte following the
last source record for which conversion is complete.  The value
of the remaining bytes in the <I>receiver</I> after the last converted record are unpredictable.
<P>
If the converted form of a record cannot be completely contained in the <I>receiver</I>, the instruction
ends with a resultant condition of <I>receiver overrun</I>.  The <I>receiver offset</I>
locates the byte following the last fully converted record in
the receiver.  The <I>source offset</I>
locates the byte following the last source record for which
conversion is complete.  The
value of the remaining bytes in the <I>receiver</I> after the last
converted record is unpredictable.
<P>
If the <I>source exhausted</I> and the <I>receiver
overrun</I> conditions occur at the same
time, the <I>source exhausted</I> condition is recognized first.  In
this case, the <I>receiver offset</I>
may contain a value equal to the length
specified for the receiver which causes an
exception to be signaled on the next invocation of the instruction.  The
processing performed for
the <I>source exhausted</I> condition provides for this case if
the instruction is invoked multiple times
with the same <I>controls</I> operand template.  When the <I>receiver
overrun</I> condition is the resultant
condition, the source always contains data that can be converted.
<P>
<H5><A NAME="Header_3">Limitations (Subject to Change)</A></H5>
<P>
The following are limits that apply to the functions performed by this
instruction.
<P>
Any form of overlap between the operands on this instruction yields
unpredictable results in the <I>receiver</I> operand.
<P>
<P>
<H5><A NAME="Header_4">Resultant Conditions</A></H5>
<UL>
<P><LI>Source exhausted - All full records in
the <I>source</I> operand have been
converted into the <I>receiver</I> operand.
<P><LI>Receiver
overrun - An overrun condition in the <I>receiver</I> operand was
detected prior to
processing all of the bytes in the <I>source</I> operand.
</UL>
<P>
<H4><A NAME="Header_5">Authorization Required</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_6">Lock Enforcement</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_7">Exceptions</A></H4>
<DL>
<DD><P>06 Addressing
<DL COMPACT>
<DD><A HREF="../exceptions/EX0601.htm">0601 Space Addressing Violation</A>
<DD><A HREF="../exceptions/EX0602.htm">0602 Boundary Alignment</A>
<DD><A HREF="../exceptions/EX0603.htm">0603 Range</A>
</DL>
<DD><P>08 Argument/Parameter
<DL COMPACT>
<DD><A HREF="../exceptions/EX0801.htm">0801 Parameter Reference Violation</A>
</DL>
<DD><P>0C Computation
<DL COMPACT>
<DD><A HREF="../exceptions/EX0C01.htm">0C01 Conversion</A>
<DD><A HREF="../exceptions/EX0C08.htm">0C08 Length Conformance</A>
</DL>
<DD><P>10 Damage Encountered
<DL COMPACT>
<DD><A HREF="../exceptions/EX1004.htm">1004 System Object Damage State</A>
<DD><A HREF="../exceptions/EX1044.htm">1044 Partial System Object Damage</A>
</DL>
<DD><P>1C Machine-Dependent
<DL COMPACT>
<DD><A HREF="../exceptions/EX1C03.htm">1C03 Machine Storage Limit Exceeded</A>
</DL>
<DD><P>20 Machine Support
<DL COMPACT>
<DD><A HREF="../exceptions/EX2002.htm">2002 Machine Check</A>
<DD><A HREF="../exceptions/EX2003.htm">2003 Function Check</A>
</DL>
<DD><P>22 Object Access
<DL COMPACT>
<DD><A HREF="../exceptions/EX2201.htm">2201 Object Not Found </A>
<DD><A HREF="../exceptions/EX2202.htm">2202 Object Destroyed </A>
<DD><A HREF="../exceptions/EX2203.htm">2203 Object Suspended </A>
<DD><A HREF="../exceptions/EX2208.htm">2208 Object Compressed </A>
</DL>
<DD><P>24 Pointer Specification
<DL COMPACT>
<DD> <A HREF="../exceptions/EX2401.htm">2401 Pointer Does Not Exist</A>
<DD> <A HREF="../exceptions/EX2402.htm">2402 Pointer Type Invalid </A>
</DL>
<DD><P>2C Program Execution
<DL COMPACT>
<DD><A HREF="../exceptions/EX2C04.htm">2C04 Branch Target Invalid</A>
</DL>
<DD><P>2E Resource Control Limit
<DL COMPACT>
<DD><A HREF="../exceptions/EX2E01.htm">2E01 User Profile Storage Limit Exceeded</A>
</DL>
<DD><P>32 Scalar Specification
<DL COMPACT>
<DD><A HREF="../exceptions/EX3201.htm">3201 Scalar Type Invalid</A>
</DL>
<DD><P>36 Space Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX3601.htm">3601 Space Extension/Truncation</A>
</DL>
<DD><P>38 Template Specification
<DL COMPACT>
<DD><A HREF="../exceptions/EX3801.htm">3801 Template Value Invalid</A>
</DL>
<DD><P>44 Protection Violation
<DL COMPACT>
<DD><A HREF="../exceptions/EX4401.htm">4401 Object Domain or Hardware Storage Protection Violation</A>
<DD><A HREF="../exceptions/EX4402.htm">4402 Literal Values Cannot Be Changed</A>
</DL>
</DL>

</body>

</HTML>
