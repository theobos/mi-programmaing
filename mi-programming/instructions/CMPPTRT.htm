<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head>
  <title> CMPPTRT Instruction </title>
  <link rel="stylesheet" type="text/css" href="../tstudio.css">
</head>

<body>
<H1>Compare Pointer Type (CMPPTRT)</H1>
<P>

<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Op Code (Hex)
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Extender
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 1
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 2
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 3 &#91;4&#93;
</TH></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><B>CMPPTRTB</B>
1CE2
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Branch options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Compare
operand 1
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Compare
operand 2
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Branch targets
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><B>CMPPTRTI</B>
18E2
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Indicator options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Compare
operand 1
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Compare
operand 2
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Indicator targets
</TD></TR></TABLE>
<P>
<I>Operand 1</I>:  Data pointer, space pointer, system pointer,
instruction pointer, invocation pointer, procedure pointer,
label pointer, suspend pointer, synchronization pointer,
object pointer, or field pointer.
<P>
<I>Operand 2</I>:  Character(1) scalar or null.
<P>
<I>Operand 3</I> &#91;4&#93;:
<P>
<UL>
<P><LI>
<I>Branch Form</I>-Instruction
number, relative instruction number, branch point, or
instruction pointer.
<P><LI>
<I>Indicator Form</I>-Numeric
variable scalar or character variable scalar.
</UL>
<TABLE BORDER WIDTH="100%"><TR><TH ALIGN="LEFT">Bound program access</TH><TR><TD>
<PRE>
<P>Built-in number for CMPPTRT is 140.
CMPPTRT (
         pointer_type   : aggregate(1,2,4) OR
                          signed binary(1,2,4) OR
                          unsigned binary(1,2,4)
<font color=blue>         pointer        : pointer(16)
         </FONT>
) :   signed binary(4) /* return_code */
</PRE>
<P>The return code will be set as follows&#58;
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD><P><B>Return code</B>
</TD><TD><P><B>Meaning</B>
</TD></TR><TR VALIGN="TOP"><TD><P><B>1
</B></TD><TD><P>Pointer is of specified type.
</TD></TR><TR VALIGN="TOP"><TD><P><B>0
</B></TD><TD><P>Pointer is not of specified type.
</TD></TR></TABLE>
<P>The <I>pointer type</I> operand corresponds to operand 2 on
the CMPPTRT operation.  The <I>pointer</I> operand
corresponds to operand 1 on the CMPPTRT operation.
<P>This built-in function is used to provide support for the branch
and indicator forms of the CMPPTRT operation.  The user
must specify code to process the <VAR>return code</VAR> and
perform the desired branching or indicator setting.
</PRE>
</TD></TR></TABLE>
<P>
<H5><A NAME="Header_2">Description</A></H5>
<P>The instruction compares the pointer
type currently in operand 1 with the
character scalar identified by operand 2.  Based on the comparison, the
resulting condition is used
with the extender to transfer control (branch form) or to assign
a value to each of the indicator operands (indicator form).
<P>
Operand 1 can specify a space pointer machine object only when
operand 2 is null.
<P>
An unresolved operand 1 pointer is not resolved by this instruction.
<P>
If operand 2 is null or if operand 2 specifies a comparison
value of hex 00, an equal condition
occurs if a pointer does not exist in the storage area
identified by operand 1.
<P>
Following are the allowable values for operand 2:
<DL COMPACT>
<DD>Hex 00 - A pointer does not exist at this location
<DD>Hex 01 - System pointer
<DD>Hex 02 - Space pointer
<DD>Hex 03 - Data pointer
<DD>Hex 04 - Instruction pointer
<DD>Hex 05 - Invocation pointer
<DD>Hex 06 - Procedure pointer
<DD>Hex 07 - Label pointer
<DD>Hex 08 - Suspend pointer
<DD>Hex 09 - Synchronization pointer
<DD>Hex 0A - Object pointer
<DD>Hex 0B - Field pointer
</DL>
<P>
<H5><A NAME="Header_3">Resultant Conditions</A></H5>
<UL>
<P><LI>Equal
<P><LI>Not equal
</UL>
<P>
<H4><A NAME="Header_4">Authorization Required</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_5">Lock Enforcement</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_6">Exceptions</A></H4>
<DL>
<DD><P>06 Addressing
<DL COMPACT>
<DD><A HREF="../exceptions/EX0601.htm">0601 Space Addressing Violation</A>
<DD><A HREF="../exceptions/EX0602.htm">0602 Boundary Alignment</A>
<DD><A HREF="../exceptions/EX0603.htm">0603 Range</A>
</DL>
<DD><P>08 Argument/Parameter
<DL COMPACT>
<DD><A HREF="../exceptions/EX0801.htm">0801 Parameter Reference Violation</A>
</DL>
<DD><P>0A Authorization
<DL COMPACT>
<DD><A HREF="../exceptions/EX0A01.htm">0A01 Unauthorized for Operation </A>
</DL>
<DD><P>10 Damage Encountered
<DL COMPACT>
<DD><A HREF="../exceptions/EX1004.htm">1004 System Object Damage State</A>
<DD><A HREF="../exceptions/EX1005.htm">1005 Authority Verification Terminated Due to Damaged Object</A>
<DD><A HREF="../exceptions/EX1044.htm">1044 Partial System Object Damage</A>
</DL>
<DD><P>1A Lock State
<DL COMPACT>
<DD><A HREF="../exceptions/EX1A01.htm">1A01 Invalid Lock State</A>
</DL>
<DD><P>1C Machine-Dependent
<DL COMPACT>
<DD><A HREF="../exceptions/EX1C03.htm">1C03 Machine Storage Limit Exceeded</A>
</DL>
<DD><P>20 Machine Support
<DL COMPACT>
<DD><A HREF="../exceptions/EX2002.htm">2002 Machine Check</A>
<DD><A HREF="../exceptions/EX2003.htm">2003 Function Check</A>
</DL>
<DD><P>22 Object Access
<DL COMPACT>
<DD><A HREF="../exceptions/EX2201.htm">2201 Object Not Found </A>
<DD><A HREF="../exceptions/EX2202.htm">2202 Object Destroyed </A>
<DD><A HREF="../exceptions/EX2203.htm">2203 Object Suspended </A>
<DD><A HREF="../exceptions/EX2207.htm">2207 Authority Verification Terminated Due to Destroyed Object</A>
<DD><A HREF="../exceptions/EX2208.htm">2208 Object Compressed </A>
</DL>
<DD><P>24 Pointer Specification
<DL COMPACT>
<DD> <A HREF="../exceptions/EX2401.htm">2401 Pointer Does Not Exist</A>
<DD> <A HREF="../exceptions/EX2402.htm">2402 Pointer Type Invalid </A>
</DL>
<DD><P>2E Resource Control Limit
<DL COMPACT>
<DD><A HREF="../exceptions/EX2E01.htm">2E01 User Profile Storage Limit Exceeded</A>
</DL>
<DD><P>32 Scalar Specification
<DL COMPACT>
<DD><A HREF="../exceptions/EX3203.htm">3203 Scalar Value Invalid</A>
</DL>
<DD><P>36 Space Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX3601.htm">3601 Space Extension/Truncation</A>
</DL>
<DD><P>44 Protection Violation
<DL COMPACT>
<DD><A HREF="../exceptions/EX4401.htm">4401 Object Domain or Hardware Storage Protection Violation</A>
</DL>
</DL>

</body>

</HTML>
