  <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
  <head>
<title> SCALE Instruction </title>
			<link rel="stylesheet" type="text/css" href="../tstudio.css">
</head>

<body>
<H1>Scale (SCALE)</H1>
<P>
<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Op Code (Hex)
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Extender
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Operand 1
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Operand 2
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Operand 3
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Operand &#91;4-7&#93;
</TH></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%"><B>SCALE</B>
1063
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Receiver
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Source
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Scale factor
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">
<BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="6"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%"><B>SCALEI</B>
1863
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Indicator options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Receiver
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Source
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Scale factor
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Indicator targets
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="6"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%"><B>SCALEB</B>
1C63
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Branch options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Receiver
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Source
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Scale factor
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="17%">Branch targets
</TD></TR></TABLE>
<P>
<I>Operand 1</I>:  Numeric variable scalar.
<P>
<I>Operand 2</I>:  Numeric scalar.
<P>
<I>Operand 3</I>:  Binary(2) scalar.
<P>
<I>Operand 4-7</I>:
<UL>
<P><LI>
<I>Branch Form</I>-Branch point, instruction pointer, relative
instruction number, or absolute instruction number.
<P><LI>
<I>Indicator Form</I>-Numeric variable scalar or character
variable scalar.
</UL>
<P>
<H4><A NAME="Header_2">Short forms</A></H4>
<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Op Code (Hex)
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Extender
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 1
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 2
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand &#91;3-6&#93;
</TH></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><B>SCALES</B>
1163
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Receiver/Source
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Scale factor
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">
<BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><hr>

</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><B>SCALEIS</B>
1963
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Indicator options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Receiver/Source
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Scale factor
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Indicator targets
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><hr>

</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><B>SCALEBS</B>
1D63
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Branch options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Receiver/Source
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Scale factor
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Branch targets
</TD></TR></TABLE>
<P>
<I>Operand 1</I>:  Numeric variable scalar.
<P>
<I>Operand 2</I>:  Binary(2) scalar.
<P>
<I>Operand 3-6</I>:
<UL>
<P><LI>
<I>Branch Form</I>-Branch point, instruction pointer, relative
instruction number, or absolute instruction number.
<P><LI>
<I>Indicator Form</I>-Numeric variable scalar or character
variable scalar.
</UL>
<P>
<H5><A NAME="Header_3">Description</A></H5>
<P>
The scale instruction performs numeric scaling
of the source <I>operand</I> based on the
scale factor and places the results in
the <I>receiver</I> operand.  The numeric
operation is as follows:
<PRE>
Operand 1 = Operand 2 *(B**N)
</PRE>
where:
<DL>
<DD><P>N is the binary integer value of the scale operand.
It can be positive, negative, or 0.  If N is 0, then
the operation simply copies the <I>source</I> operand
value into the <I>receiver</I> operand.
<DD><P>
B is the arithmetic base for the type of numeric
value in the <I>source</I> operand.
</DL>
<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="25%">Base Type
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="75%">B
</TH></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="25%">Binary
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="75%">2
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="25%">Packed/Zoned
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="75%">10
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="25%">Floating-point
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="75%">2
</TD></TR></TABLE>
<BR>
The operands must be of the numeric types indicated with any implicit
conversions occurring according to the rules of arithmetic operations as
outlined in the
<A class="content" HREF="../MCNPFAO.htm">Arithmetic Operations.</A>
The scale operation is a shift of N
unsigned
binary, packed, or zoned digits.
The shift is to the left if
N is positive, to the right if N is negative.
For a signed binary <I>source</I> operand, the scale
operation is performed as
if the <I>source</I> operand is multiplied by a
signed binary value of 2**N.
<P>
For a floating-point <I>source</I> operand, the scale
operation is performed as if the <I>source</I> operand
is multiplied by a
floating-point value of 2**N.
<P>
If the <I>source</I> and <I>receiver</I> operands
have different attributes, the
scaling operation is done in an intermediate field with the
same attributes
as the <I>source</I> operand.  If a fixed-point scaling operation
causes nonzero digits to be
truncated on the left end of the intermediate field, a <I> size&nbsp; </I> (hex <A HREF="../exceptions/EX0C0A.htm">0C0A</A>) exception
is signaled.  For a floating-point scaling operation, the <I> floating-point overflow&nbsp; </I> (hex <A HREF="../exceptions/EX0C06.htm">0C06</A>) exception
and the <I> floating-point underflow&nbsp; </I> (hex <A HREF="../exceptions/EX0C07.htm">0C07</A>) exception
can be signaled during the calculation of the
intermediate result.
<P>
The resultant value of the calculation is copied into
the <I>receiver</I> operand.
If this operand is not the same type as that used in
performing the operation,
the resultant value is converted to its type.  If
necessary, the resultant value
is adjusted to the length of the <I>receiver</I> operand, aligned at the
assumed decimal point of the <I>receiver</I>
operand, or both before being copied to it.
Length
adjustment and decimal
point alignment are performed according to the rules
of arithmetic operations
outlined in
<A class="content" HREF="../MCNPFAO.htm">Arithmetic Operations.</A>
For
fixed-point operations, if nonzero digits
are truncated off the left end of the
resultant value, a <I> size&nbsp; </I> (hex <A HREF="../exceptions/EX0C0A.htm">0C0A</A>) exception
is signaled.
<P>
For floating-point operations involving fixed-point
receiver fields, if nonzero digits would be
truncated from the left end of the resultant value, an <I> invalid floating-point conversion&nbsp; </I> (hex <A HREF="../exceptions/EX0C0C.htm">0C0C</A>) exception
is signaled.
<P>
For floating-point <I>receiver</I> fields, if the exponent of
the resultant value is either too large or
too small to be represented in the <I>receiver</I> field, the <I> floating-point overflow&nbsp; </I> (hex <A HREF="../exceptions/EX0C06.htm">0C06</A>) exception
or <I> floating-point underflow&nbsp; </I> (hex <A HREF="../exceptions/EX0C07.htm">0C07</A>) exception
is signaled.
<P>
A <I> scalar value invalid&nbsp; </I> (hex <A HREF="../exceptions/EX3203.htm">3203</A>) exception
is signaled if the value
of N is beyond the range of the particular
type of the <I>source</I> operand as specified in the following table.
<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="50%">Source Operand Type
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="50%">Maximum Value of N
</TH></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="50%">
Signed Binary(2)
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="50%">
-15 &lt; N &lt; 15
<BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="50%">
Unsigned Binary(2)
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="50%">
-16 &lt; N &lt; 16
<BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="50%">
Signed Binary(4)
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="50%">
-31 &lt; N &lt; 31
<BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="50%">
Unsigned Binary(4)
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="50%">
-32 &lt; N &lt; 32
<BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="50%">
Decimal(P,Q)
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="50%">
-32 &lt; N &lt; 32
<BR></TD></TR></TABLE>
<P>
For a scale operation in floating-point, no limitations are
placed on the values allowed for N
other than the implicit limits imposed due to the floating-point
overflow and underflow exceptions.
<P>
<H5><A NAME="Header_4">Limitations (Subject to Change)</A></H5>
<P>
The following are limits that apply to the functions performed by this
instruction.
<P>
If a decimal to binary conversion causes a <I> size&nbsp; </I> (hex <A HREF="../exceptions/EX0C0A.htm">0C0A</A>) exception
to be signaled, the binary value
contains the correct truncated
result only if the decimal value contains 15 or fewer
significant nonfractional digits.
<P>
<H5><A NAME="Header_5">Resultant Condition</A></H5>
<UL>
<P><LI>Positive-The
algebraic value of the <I>receiver</I>
operand is positive.
<P><LI>Negative-The
algebraic value of the <I>receiver</I>
operand is negative.
<P><LI>Zero-The
algebraic value of the <I>receiver</I>
operand is zero.
<P><LI>Unordered-The value assigned a
floating-point <I>receiver</I> operand is NaN.
</UL>
<P>
<H4><A NAME="Header_6">Authorization Required</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_7">Lock Enforcement</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_8">Exceptions</A></H4>
<DL>
<DD><P>06 Addressing
<DL COMPACT>
<DD><A HREF="../exceptions/EX0601.htm">0601 Space Addressing Violation</A>
<DD><A HREF="../exceptions/EX0602.htm">0602 Boundary Alignment</A>
<DD><A HREF="../exceptions/EX0603.htm">0603 Range</A>
</DL>
<DD><P>08 Argument/Parameter
<DL COMPACT>
<DD><A HREF="../exceptions/EX0801.htm">0801 Parameter Reference Violation</A>
</DL>
<DD><P>0C Computation
<DL COMPACT>
<DD><A HREF="../exceptions/EX0C02.htm">0C02 Decimal Data </A>
<DD><A HREF="../exceptions/EX0C06.htm">0C06 Floating-Point Overflow </A>
<DD><A HREF="../exceptions/EX0C07.htm">0C07 Floating-Point Underflow </A>
<DD><A HREF="../exceptions/EX0C09.htm">0C09 Floating-Point Invalid Operand </A>
<DD><A HREF="../exceptions/EX0C0A.htm">0C0A Size</A>
<DD><A HREF="../exceptions/EX0C0C.htm">0C0C Invalid Floating-Point Conversion</A>
<DD><A HREF="../exceptions/EX0C0D.htm">0C0D Floating-Point Inexact Result</A>
</DL>
<DD><P>10 Damage Encountered
<DL COMPACT>
<DD><A HREF="../exceptions/EX1004.htm">1004 System Object Damage State</A>
<DD><A HREF="../exceptions/EX1044.htm">1044 Partial System Object Damage</A>
</DL>
<DD><P>1C Machine-Dependent
<DL COMPACT>
<DD><A HREF="../exceptions/EX1C03.htm">1C03 Machine Storage Limit Exceeded</A>
</DL>
<DD><P>20 Machine Support
<DL COMPACT>
<DD><A HREF="../exceptions/EX2002.htm">2002 Machine Check</A>
<DD><A HREF="../exceptions/EX2003.htm">2003 Function Check</A>
</DL>
<DD><P>22 Object Access
<DL COMPACT>
<DD><A HREF="../exceptions/EX2201.htm">2201 Object Not Found </A>
<DD><A HREF="../exceptions/EX2202.htm">2202 Object Destroyed </A>
<DD><A HREF="../exceptions/EX2203.htm">2203 Object Suspended </A>
<DD><A HREF="../exceptions/EX2208.htm">2208 Object Compressed </A>
</DL>
<DD><P>24 Pointer Specification
<DL COMPACT>
<DD> <A HREF="../exceptions/EX2401.htm">2401 Pointer Does Not Exist</A>
<DD> <A HREF="../exceptions/EX2402.htm">2402 Pointer Type Invalid </A>
</DL>
<DD><P>2C Program Execution
<DL COMPACT>
<DD><A HREF="../exceptions/EX2C04.htm">2C04 Branch Target Invalid</A>
</DL>
<DD><P>2E Resource Control Limit
<DL COMPACT>
<DD><A HREF="../exceptions/EX2E01.htm">2E01 User Profile Storage Limit Exceeded</A>
</DL>
<DD><P>32 Scalar Specification
<DL COMPACT>
<DD><A HREF="../exceptions/EX3203.htm">3203 Scalar Value Invalid</A>
</DL>
<DD><P>36 Space Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX3601.htm">3601 Space Extension/Truncation</A>
</DL>
<DD><P>44 Protection Violation
<DL COMPACT>
<DD><A HREF="../exceptions/EX4401.htm">4401 Object Domain or Hardware Storage Protection Violation</A>
<DD><A HREF="../exceptions/EX4402.htm">4402 Literal Values Cannot Be Changed</A>
</DL>
</DL>

</body>

</HTML>
