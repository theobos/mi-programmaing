  <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
  <head>
<title> CPYBWP Instruction </title>
			<link rel="stylesheet" type="text/css" href="../tstudio.css">
</head>

<body>
<H1>Copy Bytes with Pointers (CPYBWP)</H1>
<P>

<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Op Code (Hex)
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 1
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 2
</TH><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">0132
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Receiver
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Source
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR></TABLE>
<P>
<I>Operand 1</I>:  Character variable scalar,
space pointer machine object, or pointer data object.
<P>
<I>Operand 2</I>:  Character variable scalar,
space pointer machine object, pointer data object or null.
<BR>
<BR>
<TABLE BORDER WIDTH="100%"><TR><TH ALIGN="LEFT">Bound program access</TH><TR><TD>
<PRE>
<P>Built-in number for CPYBWP is 14.
CPYBWP (
        receiver   : address
        source     : address
        length     : unsigned binary(4)
)
</PRE>
<P>The <VAR>receiver</VAR> and <VAR>source</VAR> operands correspond
to operands 1 and 2 on the CPYBWP operation.
<P>The <VAR>length</VAR> operand contains the length, in bytes,
of the receiver and source operands.
It is expected to contain a value between 1
and 16,776,704.
</PRE>
</TD></TR></TABLE>
<P>
<H5><A NAME="Header_2">Description</A></H5>
<P>
This instruction copies either the pointer
value or the byte string specified for the <I>source</I> operand into
the <I>receiver</I> operand depending upon whether or not a space
pointer machine object is specified as one of the operands.
<P>
If either operand is a character variable scalar, it can
have a length as great as 16,776,191 bytes.
<P>
Operations involving space pointer machine objects perform a
pointer value copy operation for only space pointer values
or the pointer does not exist state.  Due to this, a space
pointer machine object may only be specified as an operand in
conjunction with another pointer or a null second operand.  The
pointer does not exist state is copied from the source to the
receiver pointer without signaling the <I> pointer does not exist&nbsp;</I> (hex <A HREF="../exceptions/EX2401.htm">2401</A>) exception. <I>Source</I> pointer data objects must either be not set
or contain a space pointer value when being copied into a <I>receiver</I> space pointer machine
object.  <I>Receiver</I> pointer
data objects will be set with either the system default pointer
does not exist value or the space pointer value from a <I>source</I>
space pointer machine object.
<P>
If the <I>source</I> operand is a synchronization pointer,
the pointer will
be copied to the <I>receiver</I>.  However, the copied pointer is not
useful, because a synchronization pointer is defined to reside at only
a single location in memory.  Attempting to use a copied synchronization
pointer will cause unpredictable results.
<P>
Normal pointer alignment checking is performed on a pointer data object
specified as an operand in conjunction with a space pointer
machine object.
<P>
Operations not involving space pointer machine objects, those
involving just data objects as operands, perform a byte
string copy of the data for the specified operands.
<P>
The value of the byte string specified by
operand 2 is copied to the byte string
specified by operand 1 (no padding done).
<P>
The byte string identified by operand 2 can contain the storage
forms of both scalars and
pointers.  Normal pointer alignment checking is not done.
<P>
When the Override Program Attributes
(<A HREF=OVRPGATR.htm">OVRPGATR</A>) instruction is not used to override CPYBWP,
the only alignment requirement is that
the space addressability alignment of the two operands must
be to the same position relative to a
16-byte multiple boundary.  A <I> boundary alignment&nbsp; </I> (hex <A HREF="../exceptions/EX0602.htm">0602</A>) exception
is
signaled if the alignment is
incorrect.  The pointer attributes of any complete pointers in
the <I>source</I> are preserved if they can
be completely copied into the <I>receiver</I>.
Partial pointer storage
forms are copied into the
receiver as scalar data.  Scalars in the <I>source</I> are copied to
the <I>receiver</I> as scalars.
<P>
When the <A HREF="OVRPGATR.htm">OVRPGATR</A> instruction is used to override this
instruction, the alignment requirement is removed.  If the space
addressability alignment of the two operands is the same relative to
16-byte multiple boundary, then this instruction will work the same as
stated above.  If the space addressability alignment is different, then
this instruction will work like a Copy Bytes Left Adjusted (<A HREF="CPYBLA.htm">CPYBLA</A>) and
the pointer attributes of any complete pointers in
the <I>source</I> are not preserved in the <I>receiver</I>.
<P>
If a pointer data object operand contains a data pointer value upon
execution of the instruction, the pointer storage form is copied rather
than the scalar described by the data pointer value.  The character
variable scalar reference allowed on either operand cannot be
described through a data pointer value.
<P>
The length
of the operation is equal to the length of the shorter of the
two operands.  The copying begins
with the two operands left-adjusted and proceeds until
completion of the shorter operand.
<P>
Operand 1 can specify a space pointer machine object only
when operand 2 is a space pointer or null.
<P>
If operand 2 is null, operand 1 must define a pointer
reference.
When operand 2 is null, the pointer identified by
operand 1 is set to the system
default pointer does not exist value.
<P>
<H4><A NAME="Header_3">Authorization Required</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_4">Lock Enforcement</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_5">Exceptions</A></H4>
<DL>
<DD><P>06 Addressing
<DL COMPACT>
<DD><A HREF="../exceptions/EX0601.htm">0601 Space Addressing Violation</A>
<DD><A HREF="../exceptions/EX0602.htm">0602 Boundary Alignment</A>
<DD><A HREF="../exceptions/EX0603.htm">0603 Range</A>
</DL>
<DD><P>08 Argument/Parameter
<DL COMPACT>
<DD><A HREF="../exceptions/EX0801.htm">0801 Parameter Reference Violation</A>
</DL>
<DD><P>10 Damage Encountered
<DL COMPACT>
<DD><A HREF="../exceptions/EX1004.htm">1004 System Object Damage State</A>
<DD><A HREF="../exceptions/EX1044.htm">1044 Partial System Object Damage</A>
</DL>
<DD><P>1C Machine-Dependent
<DL COMPACT>
<DD><A HREF="../exceptions/EX1C03.htm">1C03 Machine Storage Limit Exceeded</A>
</DL>
<DD><P>20 Machine Support
<DL COMPACT>
<DD><A HREF="../exceptions/EX2002.htm">2002 Machine Check</A>
<DD><A HREF="../exceptions/EX2003.htm">2003 Function Check</A>
</DL>
<DD><P>22 Object Access
<DL COMPACT>
<DD><A HREF="../exceptions/EX2201.htm">2201 Object Not Found </A>
<DD><A HREF="../exceptions/EX2202.htm">2202 Object Destroyed </A>
<DD><A HREF="../exceptions/EX2203.htm">2203 Object Suspended </A>
<DD><A HREF="../exceptions/EX2208.htm">2208 Object Compressed </A>
</DL>
<DD><P>24 Pointer Specification
<DL COMPACT>
<DD> <A HREF="../exceptions/EX2401.htm">2401 Pointer Does Not Exist</A>
<DD> <A HREF="../exceptions/EX2402.htm">2402 Pointer Type Invalid </A>
</DL>
<DD><P>2E Resource Control Limit
<DL COMPACT>
<DD><A HREF="../exceptions/EX2E01.htm">2E01 User Profile Storage Limit Exceeded</A>
</DL>
<DD><P>36 Space Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX3601.htm">3601 Space Extension/Truncation</A>
</DL>
<DD><P>44 Protection Violation
<DL COMPACT>
<DD><A HREF="../exceptions/EX4401.htm">4401 Object Domain or Hardware Storage Protection Violation</A>
<DD><A HREF="../exceptions/EX4402.htm">4402 Literal Values Cannot Be Changed</A>
</DL>
</DL>

</body>

</HTML>
