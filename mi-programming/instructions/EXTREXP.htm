  <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
  <head>

<title> EXTREXP Instruction </title>
			<link rel="stylesheet" type="text/css" href="../tstudio.css">

</head>

<body>
<H1>Extract Exponent (EXTREXP)</H1>
<P>

<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Op Code (Hex)
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Extender
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 1
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 2
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand &#91;3-6&#93;
</TH></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><B>EXTREXP</B>
1072
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Receiver
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Source
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">
<BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><hr></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><B>EXTREXPB</B>
1C72
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Branch options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Receiver
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Source
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Branch targets
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><B>EXTREXPI</B>
1872
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Indicator options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Receiver
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Source
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Indicator targets
</TD></TR></TABLE>
<P>
<I>Operand 1</I>:  Binary variable scalar.
<P>
<I>Operand 2</I>:  Floating-point scalar.
<P>
<I>Operand 3-6</I>:
<UL>
<P><LI>
<I>Branch Form</I>-Branch point, instruction pointer, relative
instruction number, or absolute instruction number.
<P><LI>
<I>Indicator Form</I>-Numeric variable scalar or character
variable scalar.
</UL>
<P>
<H5><A NAME="Header_2">Description</A></H5>
<P>
This instruction extracts the exponent portion of a
floating-point scalar <I>source</I>
operand and places it into the <I>receiver</I> operand as a
binary variable scalar.
<P>
The operands must be the numeric types indicated because
no conversions are performed.
<P>
The <I>source</I> floating-point field is
interrogated to determine the binary
floating-point value
represented and either a signed exponent, for number values, or a special
identifier, for infinity
and NaN values, is placed in the
binary variable scalar <I>receiver</I> operand.
<P>
The value to be assigned to the <I>receiver</I> is dependent
upon the floating-point value represented in
the <I>source</I> operand as described below.  It is a signed
binary integer value and a numeric
assignment of the value is made to the <I>receiver</I>.
<P>
When the <I>source</I> represents a normalized number, the biased
exponent contained in the exponent field
of the <I>source</I> is converted to the corresponding signed
exponent by subtracting the bias of 127 for
short or 1,023 for long to determine the value to be
returned.  The resulting value ranges from -126
to +127 for short format, -1,022 to +1,023 for long format.
When the <I>receiver</I> is unsigned binary,
a negative exponent will result
in a <I> size&nbsp; </I> (hex <A HREF="../exceptions/EX0C0A.htm">0C0A</A>) exception
unless size exceptions are
suppressed.
<P>
When the <I>source</I> represents a denormalized number, the
value to be returned is determined by
adjusting the signed exponent of the denormalized
number.  The signed exponent of a denormalized
number is a fixed value of -126 for the short format
and -1,022 for the long format.  It is adjusted
to the value the signed exponent would be if the <I>source</I> value
was adjusted to a normalized number.
The resulting value ranges from -127 to -149 for short format,
-1,023 to -1,074 for long format.
<P>
When the <I>source</I> represents a value of zero,
the value returned is zero.
<P>
When the <I>source</I> represents infinity,
the value returned is +32,767.
<P>
When the <I>source</I> represents a not-a-number,
the value returned is -32,768 for a signed binary receiver.  For an
unsigned binary(2) a value of 32,768 is returned, and for a
unsigned binary(4) a value of 4,294,934,528 is returned.
<P>
<P>
<H5><A NAME="Header_3">Resultant Conditions</A></H5>
<UL>
<P><LI>Normalized-The <I>source</I> operand
value represents a normalized binary
floating-point number.
The signed exponent is stored in the <I>receiver</I>.
<P><LI>Denormalized-The <I>source</I>
operand value represents a denormalized binary floating-point number.  An
adjusted signed exponent
is stored in the <I>receiver</I>.
<P><LI>Infinity-The <I>source</I> operand
value represents infinity.  The <I>receiver</I> is
set with a value of +32,767.
<P><LI>NaN-The <I>source</I> operand value represents a
not-a-number.  The <I>receiver</I> is set with
a value of -32,768 when signed
binary, with a value of 32,768 when unsigned binary(2), and with
a value of 4,294,934,528 when unsigned binary(4).
</UL>
<P>
<H4><A NAME="Header_4">Authorization Required</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_5">Lock Enforcement</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_6">Exceptions</A></H4>
<DL>
<DD><P>06 Addressing
<DL COMPACT>
<DD><A HREF="../exceptions/EX0601.htm">0601 Space Addressing Violation</A>
<DD><A HREF="../exceptions/EX0602.htm">0602 Boundary Alignment</A>
<DD><A HREF="../exceptions/EX0603.htm">0603 Range</A>
</DL>
<DD><P>08 Argument/Parameter
<DL COMPACT>
<DD><A HREF="../exceptions/EX0801.htm">0801 Parameter Reference Violation</A>
</DL>
<DD><P>10 Damage Encountered
<DL COMPACT>
<DD><A HREF="../exceptions/EX1004.htm">1004 System Object Damage State</A>
<DD><A HREF="../exceptions/EX1044.htm">1044 Partial System Object Damage</A>
</DL>
<DD><P>0C Computation
<DL COMPACT>
<DD><A HREF="../exceptions/EX0C0A.htm">0C0A Size</A>
</DL>
<DD><P>1C Machine-Dependent
<DL COMPACT>
<DD><A HREF="../exceptions/EX1C03.htm">1C03 Machine Storage Limit Exceeded</A>
</DL>
<DD><P>20 Machine Support
<DL COMPACT>
<DD><A HREF="../exceptions/EX2002.htm">2002 Machine Check</A>
<DD><A HREF="../exceptions/EX2003.htm">2003 Function Check</A>
</DL>
<DD><P>22 Object Access
<DL COMPACT>
<DD><A HREF="../exceptions/EX2201.htm">2201 Object Not Found </A>
<DD><A HREF="../exceptions/EX2202.htm">2202 Object Destroyed </A>
<DD><A HREF="../exceptions/EX2203.htm">2203 Object Suspended </A>
<DD><A HREF="../exceptions/EX2208.htm">2208 Object Compressed </A>
</DL>
<DD><P>24 Pointer Specification
<DL COMPACT>
<DD> <A HREF="../exceptions/EX2401.htm">2401 Pointer Does Not Exist</A>
<DD> <A HREF="../exceptions/EX2402.htm">2402 Pointer Type Invalid </A>
</DL>
<DD><P>2C Program Execution
<DL COMPACT>
<DD><A HREF="../exceptions/EX2C04.htm">2C04 Branch Target Invalid</A>
</DL>
<DD><P>2E Resource Control Limit
<DL COMPACT>
<DD><A HREF="../exceptions/EX2E01.htm">2E01 User Profile Storage Limit Exceeded</A>
</DL>
<DD><P>32 Scalar Specification
<DL COMPACT>
<DD><A HREF="../exceptions/EX3201.htm">3201 Scalar Type Invalid</A>
</DL>
<DD><P>36 Space Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX3601.htm">3601 Space Extension/Truncation</A>
</DL>
<DD><P>44 Protection Violation
<DL COMPACT>
<DD><A HREF="../exceptions/EX4401.htm">4401 Object Domain or Hardware Storage Protection Violation</A>
<DD><A HREF="../exceptions/EX4402.htm">4402 Literal Values Cannot Be Changed</A>
</DL>
</DL>

</body>

</HTML>
