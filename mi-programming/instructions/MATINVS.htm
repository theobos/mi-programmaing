  <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
  <head>
<title> MATINVS Instruction </title>
			<link rel="stylesheet" type="text/css" href="../tstudio.css">
</head>

<body>
<H1>Materialize Invocation Stack (MATINVS)</H1>
<P>

<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Op Code (Hex)
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 1
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 2
</TH><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">0546
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Receiver
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Process
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR></TABLE>
<P>
<I>Operand 1</I>:  Space pointer.
<P>
<I>Operand 2</I>:  System pointer or null.
<P>
<TABLE BORDER WIDTH="100%"><TR><TH ALIGN="LEFT">Bound program access</TH><TR><TD>
<PRE>
<P>Built-in number for MATINVS is 150.
MATINVS (
         receiver   : address
         process    : address of system pointer OR
                      null operand
)
</PRE>
</TD></TR></TABLE>
<P>
<H5><A NAME="Header_2">Warning</A></H5>
<P>
The following information is subject to change from
release to release.  Use it with caution and be
prepared to adjust for changes with each new release.
<P>
<H5><A NAME="Header_3">Description</A></H5>
<P>
The invocation stack of either the current thread, or the initial thread
of another process is materialized.
The materialization starts with the oldest invocation and proceeds
toward the newest invocation.
<P>
Invocation stack entry attributes from the selected thread are returned
in the template specified by operand 1.  Operand 2 identifies the
selected thread as follows.  If operand 2 is either null or a system
pointer to the process control space of the current process, then the
invocation stack of the current thread will be materialized.  If operand
2 identifies a process other than the current process, then the
invocation stack of the initial thread of that process will be
materialized.  In this latter case the process must be the original
initiator of the target process, or must have process control special
authorization.
<P>
Operand 1 is a space pointer that addresses a 16-byte aligned
template into which is placed the materialized data.  The format
of the data is:
<BR>
<TABLE>
<TR>
<TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="2">Offset
</TH><TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="12"><BR></TH></TR><TR>
<TH ALIGN="RIGHT" VALIGN="TOP">Dec
</TH><TH ALIGN="RIGHT" VALIGN="TOP">Hex
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Field Name
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Data Type and Length
</TH></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Materialization size specification
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(8)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Number of bytes provided by the user
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">4
</TD><TD ALIGN="RIGHT" VALIGN="TOP">4
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Number of bytes available for materialization
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">8
</TD><TD ALIGN="RIGHT" VALIGN="TOP">8
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Number of invocation entries
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">12
</TD><TD ALIGN="RIGHT" VALIGN="TOP">C
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Thread mark counter
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
+
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">16
</TD><TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Invocation entries
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">&#91;*&#93; Char(128)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
(An invocation entry is materialized for each of the invocations
currently on the invocation stack of the specified process.)
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">*
</TD><TD ALIGN="RIGHT" VALIGN="TOP">*
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">--- End ---
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
<BR></TD></TR></TABLE>
<P>
The invocation entries materialized are each 128 bytes long
and have the following format:
<BR>
<TABLE>
<TR>
<TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="2">Offset
</TH><TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="12"><BR></TH></TR><TR>
<TH ALIGN="RIGHT" VALIGN="TOP">Dec
</TH><TH ALIGN="RIGHT" VALIGN="TOP">Hex
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Field Name
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Data Type and Length
</TH></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Reserved
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(32)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">32
</TD><TD ALIGN="RIGHT" VALIGN="TOP">20
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Associated program pointer
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">System pointer
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
(null pointer value for a destroyed program)
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">48
</TD><TD ALIGN="RIGHT" VALIGN="TOP">30
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Invocation number
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">50
</TD><TD ALIGN="RIGHT" VALIGN="TOP">32
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Invocation mechanism
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
Hex 01 =
</TD><TD>
<A HREF="CALLX.htm">Call external</A>
</TD></TR><TR VALIGN="TOP"><TD>
Hex 02 =
</TD><TD>
<A HREF="XCTL.htm">Transfer control</A>
</TD></TR><TR VALIGN="TOP"><TD>
Hex 03 =
</TD><TD>
Event handler
</TD></TR><TR VALIGN="TOP"><TD>
Hex 04 =
</TD><TD>
External exception handler (for non-bound program)
</TD></TR><TR VALIGN="TOP"><TD>
Hex 05 =
</TD><TD>
Initial program in process problem state
</TD></TR><TR VALIGN="TOP"><TD>
Hex 06 =
</TD><TD>
Initial program in process initiation state
</TD></TR><TR VALIGN="TOP"><TD>
Hex 07 =
</TD><TD>
Initial program in process termination state
</TD></TR><TR VALIGN="TOP"><TD>
Hex 08 =
</TD><TD>
Invocation exit (for non-bound program)
</TD></TR><TR VALIGN="TOP"><TD>
Hex 09 =
</TD><TD>
Return or return/<A HREF="XCTL.htm">XCTL</A> trap handler
</TD></TR><TR VALIGN="TOP"><TD>
Hex 0A =
</TD><TD>
Call program
</TD></TR><TR VALIGN="TOP"><TD>
Hex 0B =
</TD><TD>
Cancel handler (bound program only)
</TD></TR><TR VALIGN="TOP"><TD>
Hex 0C =
</TD><TD>
Exception handler (bound program only)
</TD></TR><TR VALIGN="TOP"><TD>
Hex 0D =
</TD><TD>
Call bound procedure/call with procedure pointer
</TD></TR><TR VALIGN="TOP"><TD>
Hex 0E =
</TD><TD>
Process Default Exception Handler
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">51
</TD><TD ALIGN="RIGHT" VALIGN="TOP">33
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Invocation type
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
Hex 01 =
</TD><TD>
Non-Bound Program
</TD></TR><TR VALIGN="TOP"><TD>
Hex 02 =
</TD><TD>
Bound Program Entry Procedure (PEP)
</TD></TR><TR VALIGN="TOP"><TD>
Hex 03 =
</TD><TD>
Bound Program Procedure
<P><B>Note: </B>Bound program procedures are contained within bound programs,
bound service programs, and Java programs.
All discussion of bound program procedure semantics also
apply to Java program procedures.
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">52
</TD><TD ALIGN="RIGHT" VALIGN="TOP">34
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Invocation mark
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
+
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">56
</TD><TD ALIGN="RIGHT" VALIGN="TOP">38
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Instruction identifier
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
(zero for destroyed, damaged, or suspended program)
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">60
</TD><TD ALIGN="RIGHT" VALIGN="TOP">3C
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Activation group mark
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
+
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
This is the mark of the activation group which owns the activation
associated with the invocation.  However, if no activation exists for the
invocation, or if an activation exists and it resides in a shared
activation group owned by another process, then the activation group
mark is returned as follows:
<DL>
<DD><P>1 for a system state invocation
<DD><P>2 for a user state invocation
</DL>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">64
</TD><TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Suspend point
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Suspend pointer
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
(null pointer value for destroyed program)
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">80
</TD><TD ALIGN="RIGHT" VALIGN="TOP">50
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Reserved
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(48)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">128
</TD><TD ALIGN="RIGHT" VALIGN="TOP">80
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">--- End ---
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
<BR></TD></TR></TABLE>
<TABLE><TR><TD ALIGN="LEFT" VALIGN="TOP"><B>Note:</B></TD><TD ALIGN="LEFT" VALIGN="TOP">
Fields annotated with a plus sign (+) are not materialized if operand 2
identifies a process other than the current process.  Fields not
materialized are set to binary 0s.
</TD></TR></TABLE>
<P>
The <B><U>number of invocation entries</U></B>
value specifies the number of invocation
entries
available to be materialized.
The <B><U>thread mark counter</U></B> is a thread-specific counter
maintained by the machine.
It is used to assign <B><U>invocation marks</U></B> within the thread.
The value is
the current value of the <I>thread mark counter</I> at the
time the instruction executes.
<P>
The <B><U>associated program pointer</U></B> is a system pointer that locates
the program associated with the invocation entry.
<P>
The <B><U>invocation number</U></B> is a number that uniquely identifies
each invocation in the invocation stack.
When an invocation is allocated,
the invocation number of the new invocation entry is one more
than that in the calling invocation.  The first invocation in
the current process state has an invocation number of one.
<P>
The <B><U>invocation type</U></B>
indicates how the associated program was invoked.
<P>The <B><U>invocation mark</U></B> identifies the invocation
within the thread.
<P>
If the invocation type is a non-bound program
the <I>instruction identifier</I> field will contain the
instruction number which specifies the number of the instruction
last being executed when the invocation passed control to the
next invocation on the stack.
If the invocation type is a bound program entry or a procedure,
the <I>instruction identifier</I> field
will contain the statement identifier,
which is a compiler supplied number which allows the compiler to
identify the source statement associated with a particular
sequence of instructions.
<TABLE><TR><TD ALIGN="LEFT" VALIGN="TOP"><B>Note:</B></TD><TD ALIGN="LEFT" VALIGN="TOP">
If the program is damaged or destroyed or if a statement
identifier was not supplied by the compiler, a value of 0 is
set.
</TD></TR></TABLE>
<P>
The <B><U>suspend point</U></B>
is a suspend pointer which identifies the instruction
last being executed when the invocation passed control to the next
invocation on the stack.
<P>
The fields labeled reserved are currently reserved for future use.
These fields may be altered by this instruction depending upon
the particular implementation of the machine.  Any values set into
these fields are meaningless.
<P>
The first 4 bytes of the materialization identifies the total <B><U>number of bytes provided</U></B> for use by the instruction.  This
value is supplied as input to the instruction and is not modified by the
instruction.  A value of less than 8 causes the <I>materialization length invalid&nbsp; </I>(hex <A HREF="../exceptions/EX3803.htm">3803</A>) exception to be
signaled.
<P>
The second 4 bytes of the materialization identifies the total <B><U>number of bytes available</U></B> to be materialized.  The instruction
materializes as many bytes as can be contained in the area specified as
the receiver.  If the byte area identified by the receiver is greater
than that required to contain the information requested, the excess
bytes are unchanged.
<P>
No exceptions are signaled in the event that the receiver contains
insufficient area for the materialization, other than the
materialization length exception described previously.
<P>
When the materialization is performed for a
thread in a different process,
the instruction attempts to interrogate and snapshot
the invocation stack
of the other
thread
concurrently with the ongoing execution of that
thread.
In this case, the interrogating
thread and subject thread
may have interleaving usage of the processor resource.  Due to this, the
accuracy and integrity of the materialization is relative to the state,
static or dynamic, of the invocation stack in the subject
thread
over the time of the interrogation.  If the invocation stack in the
subject
thread
is in a very static state, not changing over the period of
interrogation, the materialization may represent a good approximation of
a snapshot of its invocation stack.  To the contrary, if the invocation
stack in the subject
thread
is in a very dynamic state, radically changing over the period of
interrogation, the materialization is potentially totally inaccurate and
may describe a sequence of invocations that was never an actual sequence
that occurred within the
thread.
In addition to the above exposures to inaccuracy in attempting to take
the snapshot, the ongoing status of the invocation stack of the subject
thread
may substantially differ from that reflected in the materialization, due
to its continuing execution after completion of this instruction.
<P>
When the materialization is performed for the
current thread,
it does provide an accurate reflection of its invocation stack.  In this
case, concurrent execution of this instruction with execution of other
instructions in the
thread
is precluded.
<P>
<H4><A NAME="Header_4">Authorization Required</A></H4>
<UL>
<P><LI>
Process control special authorization
<UL>
<P><LI>
For materializing a
thread in a
different process.
</UL>
<P><LI>Execute
<UL>
<P><LI>
Contexts referenced for address resolution
</UL>
</UL>
<P>
<H4><A NAME="Header_5">Lock Enforcement</A></H4>
<UL>
<P><LI>
Materialization
<UL>
<P><LI>
Contexts referenced for address resolution
</UL>
</UL>
<P>
<H4><A NAME="Header_6">Exceptions</A></H4>
<DL>
<DD><P>06 Addressing
<DL COMPACT>
<DD><A HREF="../exceptions/EX0601.htm">0601 Space Addressing Violation</A>
<DD><A HREF="../exceptions/EX0602.htm">0602 Boundary Alignment</A>
<DD><A HREF="../exceptions/EX0603.htm">0603 Range</A>
</DL>
<DD><P>08 Argument/Parameter
<DL COMPACT>
<DD><A HREF="../exceptions/EX0801.htm">0801 Parameter Reference Violation</A>
</DL>
<DD><P>0A Authorization
<DL COMPACT>
<DD><A HREF="../exceptions/EX0A01.htm">0A01 Unauthorized for Operation </A>
</DL>
<DD><P>10 Damage Encountered
<DL COMPACT>
<DD><A HREF="../exceptions/EX1004.htm">1004 System Object Damage State</A>
<DD><A HREF="../exceptions/EX1044.htm">1044 Partial System Object Damage</A>
</DL>
<DD><P>1C Machine-Dependent
<DL COMPACT>
<DD><A HREF="../exceptions/EX1C03.htm">1C03 Machine Storage Limit Exceeded</A>
</DL>
<DD><P>20 Machine Support
<DL COMPACT>
<DD><A HREF="../exceptions/EX2002.htm">2002 Machine Check</A>
<DD><A HREF="../exceptions/EX2003.htm">2003 Function Check</A>
</DL>
<DD><P>22 Object Access
<DL COMPACT>
<DD><A HREF="../exceptions/EX2201.htm">2201 Object Not Found </A>
<DD><A HREF="../exceptions/EX2202.htm">2202 Object Destroyed </A>
<DD><A HREF="../exceptions/EX2203.htm">2203 Object Suspended </A>
</DL>
<DD><P>24 Pointer Specification
<DL COMPACT>
<DD> <A HREF="../exceptions/EX2401.htm">2401 Pointer Does Not Exist</A>
<DD> <A HREF="../exceptions/EX2402.htm">2402 Pointer Type Invalid </A>
</DL>
<DD><P>28 Process/Thread State
<DL COMPACT>
<DD><A HREF="../exceptions/EX2802.htm">2802 Process Control Space Not Associated with a Process </A>
</DL>
<DD><P>2E Resource Control Limit
<DL COMPACT>
<DD><A HREF="../exceptions/EX2E01.htm">2E01 User Profile Storage Limit Exceeded</A>
</DL>
<DD><P>32 Scalar Specification
<DL COMPACT>
<DD><A HREF="../exceptions/EX3201.htm">3201 Scalar Type Invalid</A>
<DD><A HREF="../exceptions/EX3202.htm">3202 Scalar Attributes Invalid</A>
</DL>
<DD><P>36 Space Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX3601.htm">3601 Space Extension/Truncation</A>
</DL>
<DD><P>38 Template Specification
<DL COMPACT>
<DD><A HREF="../exceptions/EX3803.htm">3803 Materialization Length Invalid</A>
</DL>
<DD><P>44 Protection Violation
<DL COMPACT>
<DD><A HREF="../exceptions/EX4401.htm">4401 Object Domain or Hardware Storage Protection Violation</A>
<DD><A HREF="../exceptions/EX4402.htm">4402 Literal Values Cannot Be Changed</A>
</DL>
</DL>

</body>

</HTML>
