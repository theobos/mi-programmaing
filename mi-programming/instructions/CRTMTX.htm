<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
  <head>
    <meta name="generator" content="HTML Tidy for Windows (vers 1st November 2003), see www.w3.org">
    <title>
      CRTMTX Instruction
    </title>
    <link rel="stylesheet" type="text/css" href="../tstudio.css">
  </head>
  <body>
    <h1>
      Create Pointer-Based Mutex (CRTMTX)
    </h1>
    <table>
      <tr>
        <th align="left" valign="top" width="20%">
          Op Code (Hex)
        </th>
        <th align="left" valign="top" width="20%">
          Operand 1
        </th>
        <th align="left" valign="top" width="20%">
          Operand 2
        </th>
        <th align="left" valign="top" width="20%">
          Operand 3
        </th>
        <td align="left" valign="top" width="20%">
          <br>
        </td>
      </tr>
      <tr>
        <td align="left" valign="top" width="20%">
          03C3
        </td>
        <td align="left" valign="top" width="20%">
          Mutex
        </td>
        <td align="left" valign="top" width="20%">
          Creation template
        </td>
        <td align="left" valign="top" width="20%">
          Result
        </td>
        <td align="left" valign="top" width="20%">
          <br>
        </td>
      </tr>
    </table><br>
    <i>Operand 1:</i> Space pointer.
    <p>
      <i>Operand 2:</i> Space pointer.
    </p>
    <p>
      <i>Operand 3:</i> Signed binary(4) variable scalar.
    </p><br>
    <table border width="100%">
      <tr>
        <th align="left">
          Bound program access
        </th>
      </tr>
      <tr>
        <td>
          <pre>
<br>
Built-in number for CRTMTX is 161.
CRTMTX (
        mutex               : address
        creation_template   : address
) :   signed binary(4)  /* result */
</pre>
        </td>
      </tr>
    </table>
    <p>
      <b>Note:</b> The term "mutex" in this instruction refers to a "pointer-based mutex".
    </p>
    <h5>
      <a name="Header_2">Description</a>
    </h5>
    <p>
      A mutex is created and associated with the storage location of the <i>mutex</i> whose address is passed in operand 1. The <i>mutex</i> is initialized into the unlocked state so it may be used for mutual exclusion between threads attempting to lock the <i>mutex</i>. An <i>optional name string</i> can be associated with the <i>mutex</i>. A mutex must be created before it can be used for synchronization via the <a href="LOCKMTX%20.htm">LOCKMTX</a> and <a href="UNLKMTX.htm">UNLKMTX</a> instructions.
    </p>
    <p>
      <i>Result</i> is used to indicate the success or failure of the CRTMTX instruction.
    </p>
    <p>
      Mutexes exist only during the IPL in which they are created. Following an IPL, each mutex must be re-created before it can be used.
    </p>
    <p>
      The <i>mutex</i> must be aligned on a 16-byte boundary. The format is as follows:
    </p>
    <table>
      <tr>
        <th align="center" valign="top" colspan="2">
          Offset
        </th>
        <th align="center" valign="top" colspan="12">
          <br>
        </th>
      </tr>
      <tr>
        <th align="right" valign="top">
          Dec
        </th>
        <th align="right" valign="top">
          Hex
        </th>
        <th align="left" valign="top">
          <br>
        </th>
        <th align="left" valign="top" colspan="5">
          Field Name
        </th>
        <th align="left" valign="top">
          <br>
        </th>
        <th align="left" valign="top" colspan="5">
          Data Type and Length
        </th>
      </tr>
      <tr>
        <td align="right" valign="top">
          0
        </td>
        <td align="right" valign="top">
          0
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          Mutex control area
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          Char(16)
        </td>
      </tr>
      <tr>
        <td align="right" valign="top">
          16
        </td>
        <td align="right" valign="top">
          10
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          Optional name string
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          Char(16)
        </td>
      </tr>
      <tr>
        <td align="right" valign="top">
          32
        </td>
        <td align="right" valign="top">
          20
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          --- End ---
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          <br>
        </td>
      </tr>
    </table>
    <p>
      The <b><u>mutex control area</u></b> contains a synchronization pointer. This field is initialized by the CRTMTX instruction, and is used only by the machine. The caller of CRTMTX should simply define the <i>mutex control area</i> as a 16-byte character field.
    </p>
    <p>
      The <i>mutex</i> must be at least 16 bytes in length. If the mutex <i>creation template</i> associates a name with the <i>mutex</i>, then the <i>optional name string</i> must reside in the storage immediately following the 16-byte <i>mutex control area</i>. The <b><u>optional name string</u></b> is a character string which can be a maximum of 16 bytes long. The name string must either be null-terminated (up to 15 bytes of data followed by a null byte), or it must be 16 bytes long, padded with blanks. If a null byte is found within the first 16 bytes of the name string, the name string is considered to be null-terminated. No validity checking is performed to ensure mutex names are unique in the system, and it is possible to have multiple mutexes with the same name; however, it is recommended that each mutex be given a unique name. This name cannot be used on any mutex instructions to identify the mutex; rather, it is used mainly to be able to identify the mutex more easily during problem determination. The mutex name, if specified, is returned from the <a href="MATMTX.htm">MATMTX</a> instruction.
    </p>
    <p>
      Following a successful CRTMTX, the <i>mutex</i> is used by passing its address as a parameter to other mutex instructions.
    </p>
    <p>
      The <i>creation template</i> specified by operand 2 is used to initialize the <i>mutex</i>. The format is as follows:
    </p>
    <table>
      <tr>
        <th align="center" valign="top" colspan="2">
          Offset
        </th>
        <th align="center" valign="top" colspan="12">
          <br>
        </th>
      </tr>
      <tr>
        <th align="right" valign="top">
          Dec
        </th>
        <th align="right" valign="top">
          Hex
        </th>
        <th align="left" valign="top">
          <br>
        </th>
        <th align="left" valign="top" colspan="5">
          Field Name
        </th>
        <th align="left" valign="top">
          <br>
        </th>
        <th align="left" valign="top" colspan="5">
          Data Type and Length
        </th>
      </tr>
      <tr>
        <td align="right" valign="top">
          0
        </td>
        <td align="right" valign="top">
          0
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          Reserved (binary 0)
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          Char(1)
        </td>
      </tr>
      <tr>
        <td align="right" valign="top">
          1
        </td>
        <td align="right" valign="top">
          1
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          Name option
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          Char(1)
        </td>
      </tr>
      <tr>
        <td align="right" valign="top">
          <br>
        </td>
        <td align="right" valign="top">
          <br>
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          <table cellpadding="3">
            <tr valign="top">
              <td>
                Hex 00 =
              </td>
              <td>
                No name string is associated with this mutex (this is the default option when the template is not supplied).
              </td>
            </tr>
            <tr valign="top">
              <td>
                Hex 01 =
              </td>
              <td>
                Mutex has a name string associated with it. Name string immediately follows the mutex in the template.
              </td>
            </tr>
          </table><br>
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          <br>
        </td>
      </tr>
      <tr>
        <td align="right" valign="top">
          2
        </td>
        <td align="right" valign="top">
          2
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          Keep valid option
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          Char(1)
        </td>
      </tr>
      <tr>
        <td align="right" valign="top">
          <br>
        </td>
        <td align="right" valign="top">
          <br>
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          <table cellpadding="3">
            <tr valign="top">
              <td>
                Hex 00 =
              </td>
              <td>
                Mutex will be destroyed when its owning thread is terminated (this is the default option when the template is not supplied).
              </td>
            </tr>
            <tr valign="top">
              <td>
                Hex 01 =
              </td>
              <td>
                Mutex will remain valid when its owning thread is terminated. The mutex will be marked as being in a pending state.
              </td>
            </tr>
          </table><br>
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          <br>
        </td>
      </tr>
      <tr>
        <td align="right" valign="top">
          3
        </td>
        <td align="right" valign="top">
          3
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          Recursive option
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          Char(1)
        </td>
      </tr>
      <tr>
        <td align="right" valign="top">
          <br>
        </td>
        <td align="right" valign="top">
          <br>
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          <table cellpadding="3">
            <tr valign="top">
              <td>
                Hex 00 =
              </td>
              <td>
                Recursive attempts to lock this mutex will not be permitted (this is the default option when the template is not supplied).
              </td>
            </tr>
            <tr valign="top">
              <td>
                Hex 01 =
              </td>
              <td>
                Recursive attempts to lock this mutex will be permitted by the same thread that has already locked the mutex.
              </td>
            </tr>
          </table>
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          <br>
        </td>
      </tr>
      <tr>
        <td align="right" valign="top">
          4
        </td>
        <td align="right" valign="top">
          4
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          Reserved (binary 0)
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          Char(28)
        </td>
      </tr>
      <tr>
        <td align="right" valign="top">
          32
        </td>
        <td align="right" valign="top">
          20
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          --- End ---
        </td>
        <td align="left" valign="top">
          <br>
        </td>
        <td align="left" valign="top" colspan="5">
          <br>
        </td>
      </tr>
    </table>
    <p>
      The <b><u>name option</u></b> field specifies whether the <i>mutex</i> is to be named. The <i>name option</i> field must be set to hex 01 in order to associate a name with the <i>mutex</i>. Setting the <i>name option</i> to hex 00 will create a mutex without a name. All other values for <i>name option</i> are reserved.
    </p>
    <p>
      <b><u>Keep valid option</u></b> field specifies whether the <i>mutex</i> is to remain valid when a thread is terminated while holding the lock on the <i>mutex</i>. The <i>keep valid option</i> field must be set to hex 01 to indicate that the <i>mutex</i> should remain valid after thread termination. The <i>mutex</i> is considered to be in a pending state when it is kept valid after thread termination. The next thread to lock a pending mutex will revalidate the mutex, but will receive an EUNKNOWN error number to indicate that the resource protected by this mutex may require special handling. Appropriate action is left up to the MI user's discretion. Specifying hex 00 for the <i>keep valid option</i> field will result in the <i>mutex</i> being destroyed during thread termination. Threads waiting for the <i>mutex</i> that was locked by the terminating thread will be returned the EOWNERTERM error number.
    </p>
    <p>
      The <b><u>recursive option</u></b> field specifies whether recursive locking of the <i>mutex</i> will be allowed. See <a href="LOCKMTX.htm">LOCKMTX</a> for additional information on the recursive behavior of a pointer-based mutex.
    </p>
    <p>
      If operand 2 in a bound program is a null pointer value, the <i>mutex</i> will be created with the default initialization options. Operand 2 in non-bound programs must be a pointer to a <i>creation template</i>. The <i>pointer does not exist&nbsp;</i> (hex <A HREF="../exceptions/EX2401.htm">2401</A>) exception will be signaled if a null pointer value is used for operand 2 in a non-bound program.
    </p>
    <p>
      If the <i>mutex</i> is created by this instruction, then <i>result</i> is set to 0. If an error occurs, then the <i>result</i> is set to an error number. The EINVAL error number will be returned if an invalid parameter is specified. The EPERM error number is returned when the address passed in operand 1 is in teraspace and the issuing thread does not have teraspace write permissions to that address. The ENOMEM error number is returned when no more mutexes can be created due to lack of system resources.
    </p>
    <p>
      An attempt to create a new mutex using the same space as an existing mutex will cause the existing mutex to be destroyed. An attempt to create a new mutex using the same space as a copy of an existing mutex will not cause the existing mutex to be destroyed, instead, a new mutex will be created in the space where the copy resides.
    </p>
    <h5>
      <a name="Header_3">Programming Considerations</a>
    </h5>
    <p>
      Although copies of an existing mutex can be made by other instructions that copy memory and preserve pointers, or can effectively be made by teraspace memory mapping techniques, making and using mutex copies is not recommended. A copy of a mutex has certain restrictions, for example, destroying a mutex by means of a copy of the mutex is not permitted. Therefore, it is necessary that the mutex originally created by CRTMTX remain intact until it is no longer needed. Additional restrictions may apply to mutex copies in other releases.
    </p>
    <h4>
      <a name="Header_4">Authorization Required</a>
    </h4>
    <ul>
      <li>None
      </li>
    </ul>
    <h4>
      <a name="Header_5">Lock Enforcement</a>
    </h4>
    <ul>
      <li>None
      </li>
    </ul>
    <h4>
      <a name="Header_6">Error conditions</a>
    </h4>
    <p>
      The <i>result</i> will be set to one of the following:
    </p>
    <table cellpadding="3">
      <tr valign="top">
        <td>
          <p>
            <b>EINVAL</b>
          </p>
        </td>
        <td>
          <p>
            3021 - The value specified for the argument is not correct.
          </p>
        </td>
      </tr>
    </table>
    <table cellpadding="3">
      <tr valign="top">
        <td>
          <p>
            <b>ENOMEM</b>
          </p>
        </td>
        <td>
          <p>
            3460 - Storage allocation request failed.
          </p>
        </td>
      </tr>
    </table>
    <table cellpadding="3">
      <tr valign="top">
        <td>
          <p>
            <b>EPERM</b>
          </p>
        </td>
        <td>
          <p>
            3027 - Operation not permitted.
          </p>
        </td>
      </tr>
    </table>
    <h4>
      <a name="Header_7">Exceptions</a>
    </h4>
    <dl>
      <dd>
        <p>
          06 Addressing
        </p>
        <dl compact>
          <dd>
            <A HREF="../exceptions/EX0601.htm">0601 Space Addressing Violation</A>
          </dd>
          <dd>
            <A HREF="../exceptions/EX0602.htm">0602 Boundary Alignment</A>
          </dd>
          <dd>
            <A HREF="../exceptions/EX0603.htm">0603 Range</A>
          </dd>
        </dl>
      </dd>
      <dd>
        <p>
          08 Argument/Parameter
        </p>
        <dl compact>
          <dd>
            <A HREF="../exceptions/EX0801.htm">0801 Parameter Reference Violation</A>
          </dd>
        </dl>
      </dd>
      <dd>
        <p>
          10 Damage Encountered
        </p>
        <dl compact>
          <dd>
            <A HREF="../exceptions/EX1004.htm">1004 System Object Damage State</A>
          </dd>
          <dd>
            <A HREF="../exceptions/EX1044.htm">1044 Partial System Object Damage</A>
          </dd>
        </dl>
      </dd>
      <dd>
        <p>
          1C Machine-Dependent
        </p>
        <dl compact>
          <dd>
            <A HREF="../exceptions/EX1C03.htm">1C03 Machine Storage Limit Exceeded</A>
          </dd>
        </dl>
      </dd>
      <dd>
        <p>
          20 Machine Support
        </p>
        <dl compact>
          <dd>
            <A HREF="../exceptions/EX2002.htm">2002 Machine Check</A>
          </dd>
          <dd>
            <A HREF="../exceptions/EX2003.htm">2003 Function Check</A>
          </dd>
        </dl>
      </dd>
      <dd>
        <p>
          22 Object Access
        </p>
        <dl compact>
          <dd>
            <A HREF="../exceptions/EX2202.htm">2202 Object Destroyed </A>
          </dd>
          <dd>
            <A HREF="../exceptions/EX2203.htm">2203 Object Suspended </A>
          </dd>
          <dd>
            <A HREF="../exceptions/EX2208.htm">2208 Object Compressed </A>
          </dd>
        </dl>
      </dd>
      <dd>
        <p>
          24 Pointer Specification
        </p>
        <dl compact>
          <dd>
             <A HREF="../exceptions/EX2401.htm">2401 Pointer Does Not Exist</A>
          </dd>
          <dd>
             <A HREF="../exceptions/EX2402.htm">2402 Pointer Type Invalid </A>
          </dd>
        </dl>
      </dd>
      <dd>
        <p>
          2E Resource Control Limit
        </p>
        <dl compact>
          <dd>
            <A HREF="../exceptions/EX2E01.htm">2E01 User Profile Storage Limit Exceeded</A>
          </dd>
        </dl>
      </dd>
      <dd>
        <p>
          36 Space Management
        </p>
        <dl compact>
          <dd>
            <A HREF="../exceptions/EX3601.htm">3601 Space Extension/Truncation</A>
          </dd>
        </dl>
      </dd>
      <dd>
        <p>
          44 Protection Violation
        </p>
        <dl compact>
          <dd>
            <A HREF="../exceptions/EX4401.htm">4401 Object Domain or Hardware Storage Protection Violation</A>
          </dd>
          <dd>
            <A HREF="../exceptions/EX4402.htm">4402 Literal Values Cannot Be Changed</A>
          </dd>
        </dl>
      </dd>
    </dl>
  </body>
</html>
