<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
 <head>
  <title> CMPPSPAD Instruction </title>
  <link rel="stylesheet" type="text/css" href="../tstudio.css">
</head>

<body>
<H1>Compare Pointer for Space Addressability (CMPPSPAD)</H1>

<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Op Code (Hex)
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Extender
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 1
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 2
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 3&nbsp;&#91;4-6&#93;
</TH></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><B>CMPPSPADB</B>
1CE6
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Branch options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Compare
operand 1
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Compare
operand 2
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Branch targets
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><hr>
</TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><B>CMPPSPADI</B>
18E6
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Indicator options
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Compare
Operand 1
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Compare
Operand 2
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Indicator targets
</TD></TR></TABLE>
<BR>
<I>Operand 1</I>:  Space pointer or data pointer.
<P>
<I>Operand 2</I>:  Numeric variable scalar, character variable
scalar, numeric variable array,
character variable array, space pointer, or data pointer.
<P>
<I>Operand 3 &#91;4-6&#93;</I>:
<UL>
<P><LI>
<I>Branch Form</I>-Instruction
number, relative instruction number, branch point, or
instruction pointer.
<P><LI>
<I>Indicator Form</I>-Numeric
variable scalar or character variable scalar.
</UL>
<P>
<H5><A NAME="Header_2">Description</A></H5>
<P>
The space addressability contained in the
pointer specified by operand 1
is compared with the space addressability defined by operand 2.
<P>
The value of the operand 1 pointer is compared based on the following:
<UL>
<P><LI>
If operand 2 is a scalar data object (element or array),
the space addressability of that data object is compared with the space
addressability contained in the operand 1 pointer.
<P><LI>
If operand 2 is a pointer, it must be a space pointer
or data pointer, and the space addressability
contained in the pointer is compared with the space
addressability contained in the operand 1 pointer.
</UL>
<P>
Based on the results of the comparison, the resulting condition is used
with the extender to transfer control (branch form) or to assign
a value to each of the indicator operands (indicator form).
If the operands are not in the same space, the resultant
condition is <I>unequal</I>.
If the operands are in the same space and the offset into
the space of operand 1 is larger or smaller
than the offset of operand 2, the resultant condition is <I>high</I> or <I>low</I>,
respectively.
An <I>equal</I> condition occurs only if the operands are in the
same space at the same offset.
Therefore, the resultant conditions (<I>high, low, equal</I>, and <I>unequal</I>) are mutually exclusive.
Consequently, if you specify that an action be taken upon the
nonexistence
of a condition, this results in the action being taken upon
the occurrence of any of the other three possible conditions.
For example, a branch not high would result in the branch being taken
on a <I>low, equal</I>, or <I>unequal</I> condition.
<P>
The <I> object destroyed&nbsp;</I> (hex <A HREF="../exceptions/EX2202.htm">2202</A>) exception, <I> parameter reference violation&nbsp;</I> (hex <A HREF="../exceptions/EX0801.htm">0801</A>) exception, and <I> pointer does not exist&nbsp; </I> (hex <A HREF="../exceptions/EX2401.htm">2401</A>) exception
are not signaled when operand 1 or
operand 2 is a space pointer machine object or when operand 2
is a scalar based on a space pointer
machine object.  This occurs when the space pointer machine
object contains an internal
machine value that indicates one of these error conditions
exists.  If the corresponding exception
is not signaled, the resulting condition of the comparison
operation is not defined other than that it
will be one of the four valid resultant conditions for this instruction.
<P>
When the Override Program Attributes <a href="OVRPGATR.htm">(OVRPGATR)</a>
instruction is used to override this instruction,
the <I> pointer does not exist&nbsp; </I> (hex <A HREF="../exceptions/EX2401.htm">2401</A>) exception
is not signaled when operand 1
or operand 2 is a space pointer (i.e.
either a space pointer data object or a space pointer machine object).
Furthermore, some comparisons involving space pointers are defined even
when one or both of the compare operands is a pointer subject to the
pointer does not exist condition.
Specifically, if both compare operands are subject to
the pointer does not exist condition, the resultant condition
is <I>equal</I>.
When one space pointer is set and one is subject to
the pointer does not exist condition, the resultant condition
is <I>unequal</I>, but undefined with respect to comparisons which
include specification of the <I>high</I> or <I>low</I> conditions.
<P>
<H5><A NAME="Header_3">Resultant Conditions</A></H5>
<UL>
<P><LI>High
<P><LI>Low
<P><LI>Equal
<P><LI>Unequal
</UL>
<P>
<H4><A NAME="Header_4">Authorization Required</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_5">Lock Enforcement</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_6">Exceptions</A></H4>
<DL>
<DD><P>06 Addressing
<DL COMPACT>
<DD><A HREF="../exceptions/EX0601.htm">0601 Space Addressing Violation</A>
<DD><A HREF="../exceptions/EX0602.htm">0602 Boundary Alignment</A>
<DD><A HREF="../exceptions/EX0603.htm">0603 Range</A>
<DD><A HREF="../exceptions/EX0604.htm">0604 External Data Object Not Found</A>
</DL>
<DD><P>08 Argument/Parameter
<DL COMPACT>
<DD><A HREF="../exceptions/EX0801.htm">0801 Parameter Reference Violation</A>
</DL>
<DD><P>10 Damage Encountered
<DL COMPACT>
<DD><A HREF="../exceptions/EX1004.htm">1004 System Object Damage State</A>
<DD><A HREF="../exceptions/EX1044.htm">1044 Partial System Object Damage</A>
</DL>
<DD><P>1C Machine-Dependent
<DL COMPACT>
<DD><A HREF="../exceptions/EX1C03.htm">1C03 Machine Storage Limit Exceeded</A>
</DL>
<DD><P>20 Machine Support
<DL COMPACT>
<DD><A HREF="../exceptions/EX2002.htm">2002 Machine Check</A>
<DD><A HREF="../exceptions/EX2003.htm">2003 Function Check</A>
</DL>
<DD><P>22 Object Access
<DL COMPACT>
<DD><A HREF="../exceptions/EX2201.htm">2201 Object Not Found </A>
<DD><A HREF="../exceptions/EX2202.htm">2202 Object Destroyed </A>
<DD><A HREF="../exceptions/EX2203.htm">2203 Object Suspended </A>
<DD><A HREF="../exceptions/EX2208.htm">2208 Object Compressed </A>
</DL>
<DD><P>24 Pointer Specification
<DL COMPACT>
<DD> <A HREF="../exceptions/EX2401.htm">2401 Pointer Does Not Exist</A>
<DD> <A HREF="../exceptions/EX2402.htm">2402 Pointer Type Invalid </A>
</DL>
<DD><P>2E Resource Control Limit
<DL COMPACT>
<DD><A HREF="../exceptions/EX2E01.htm">2E01 User Profile Storage Limit Exceeded</A>
</DL>
<DD><P>36 Space Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX3601.htm">3601 Space Extension/Truncation</A>
</DL>
<DD><P>44 Protection Violation
<DL COMPACT>
<DD><A HREF="../exceptions/EX4401.htm">4401 Object Domain or Hardware Storage Protection Violation</A>
</DL>
</DL>


</body>

</HTML>
