  <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
  <head>
<title> CRTS Instruction </title>
			<link rel="stylesheet" type="text/css" href="../tstudio.css">
</head>

<body>
<H1>Create Space (CRTS)</H1>
<P>

<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Op Code (Hex)
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 1
</TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Operand 2
</TH><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">0072
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Pointer for space addressability
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%">Creation template
</TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><BR></TD></TR></TABLE>
<P>
<I>Operand 1</I>:  System pointer.
<P>
<I>Operand 2</I>:  Space pointer.
<P>
<TABLE BORDER WIDTH="100%"><TR><TH ALIGN="LEFT">Bound program access</TH><TR><TD>
<PRE>
<P>Built-in number for CRTS is 25.
CRTS (
      pointer_for_space_addressability   : address of system pointer
      creation_template                  : address
)
</PRE>
</TD></TR></TABLE>
<P>
<H5><A NAME="Header_2">Description</A></H5>
<P>
A space object is created with the attributes that are
specified in the space <I>creation template</I> specified by
operand 2, and addressability to the
created space is placed in a system pointer that is
returned in the addressing object specified by
operand 1.
<P>
Space objects, unlike other types of system objects,
are used to contain a space and serve no other purposes.
<P>
The template identified by operand 2 must be 16-byte
aligned in the space.
The following is the format of the space <I>creation template</I>:
<BR>
<TABLE>
<TR>
<TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="2">Offset
</TH><TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="12"><BR></TH></TR><TR>
<TH ALIGN="RIGHT" VALIGN="TOP">Dec
</TH><TH ALIGN="RIGHT" VALIGN="TOP">Hex
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Field Name
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Data Type and Length
</TH></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Template size specification
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(8)
+
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Size of template
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bin(4)
+
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">4
</TD><TD ALIGN="RIGHT" VALIGN="TOP">4
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Number of bytes available for materialization
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bin(4)
+
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">8
</TD><TD ALIGN="RIGHT" VALIGN="TOP">8
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Object identification
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(32)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">8
</TD><TD ALIGN="RIGHT" VALIGN="TOP">8
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Object type
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Char(1)
+
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">9
</TD><TD ALIGN="RIGHT" VALIGN="TOP">9
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Object subtype
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="RIGHT" VALIGN="TOP">A
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Object name
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Char(30)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Object creation options
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Existence attribute
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 0
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
Temporary
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Permanent
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Space attribute
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 1
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
Fixed-length
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Variable-length
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Initial context
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 2
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
Addressability is not
inserted into context
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Addressability is
inserted into context
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Access group
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 3
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
Do not create as member
of access group
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Create as member of
access group
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 4-5
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Public authority specified
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 6
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
No
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Yes
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Initial owner specified
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 7
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
No
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Yes
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 8-11
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Set public authority in operand 1
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 12
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
No
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Yes
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Initialize space
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 13
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
Initialize
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Do not initialize
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Automatically extend space
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 14
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
No
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Yes
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Hardware storage protection level
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 15-16
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
00 =
</TD><TD>
Reference and modify allowed for user state programs
</TD></TR><TR VALIGN="TOP"><TD>
01 =
</TD><TD>
Only reference allowed for user state programs
</TD></TR><TR VALIGN="TOP"><TD>
10 =
</TD><TD>
Invalid (yields <I> template value invalid&nbsp;</I> (hex <A HREF="../exceptions/EX3801.htm">3801</A>) exception)
</TD></TR><TR VALIGN="TOP"><TD>
11 =
</TD><TD>
No reference or modify allowed for user state programs
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Process temporary space accounting
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 17
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
The temporary space will be tracked to the creating process
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
The temporary space will not be tracked to the creating process
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 18-20
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Always enforce hardware storage protection of space
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 21
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
Enforce hardware storage protection of this space only when
hardware storage protection is being enforced for all storage.
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Always enforce hardware storage protection of this space.
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="RIGHT" VALIGN="TOP">28
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 22-31
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">44
</TD><TD ALIGN="RIGHT" VALIGN="TOP">2C
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Recovery options
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">44
</TD><TD ALIGN="RIGHT" VALIGN="TOP">2C
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Char(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">46
</TD><TD ALIGN="RIGHT" VALIGN="TOP">2E
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">ASP number
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Char(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">48
</TD><TD ALIGN="RIGHT" VALIGN="TOP">30
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Size of space
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">52
</TD><TD ALIGN="RIGHT" VALIGN="TOP">34
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Initial value of space
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">53
</TD><TD ALIGN="RIGHT" VALIGN="TOP">35
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Performance class
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">53
</TD><TD ALIGN="RIGHT" VALIGN="TOP">35
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Space alignment
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 0
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
The space associated with the object is allocated to
allow proper alignment of pointers at 16-byte
alignments within the space.
If the <I>size of space</I> field is zero, this value must be
specified.
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
The space associated with the object is allocated to
allow proper alignment of
pointers at 16-byte alignments within the space
as well as to allow proper alignment of input/output
buffers at 512-byte alignments within the space.
</TD></TR></TABLE>
The value of this field is ignored when a value of 1 is given for the <I>machine chooses space alignment</I> field.
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">53
</TD><TD ALIGN="RIGHT" VALIGN="TOP">35
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Clear the space into main memory during creation
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 1
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
Only a minimum amount (up to 4K) of the
space will be in main storage upon completion
of the instruction.
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Most of the space, with some limits enforced by
the machine, will be in main storage upon
completion of the instruction.
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">53
</TD><TD ALIGN="RIGHT" VALIGN="TOP">35
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Spread the space object among storage devices
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 2
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
The space should be created on one storage device, if possible.
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
The space should be created spread among available storage devices, if
possible. All extensions to the space object will also be spread
unless this attribute is changed using the Modify Space Attributes
(<A HREF="MODS.htm">MODS</A>) instruction.
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">53
</TD><TD ALIGN="RIGHT" VALIGN="TOP">35
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Machine chooses space alignment
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 3
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
The space alignment indicated by the <I>space alignment</I>
field is performed.
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
The machine will choose the space alignment most beneficial to
performance, which may reduce maximum space capacity.
When this value is specified, the <I>space alignment</I> field is
ignored, but the alignment chosen will be a multiple of 512.
The maximum capacity for a space object
for which the machine has chosen the
alignment is returned by option Hex 0003 of <A HREF="MATMDATA.htm">MATMDATA</A>.
The maximum space capacity for a particular space object
is returned by <A HREF="MATS.htm">MATS</A>.
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">53
</TD><TD ALIGN="RIGHT" VALIGN="TOP">35
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 4
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">53
</TD><TD ALIGN="RIGHT" VALIGN="TOP">35
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Main storage pool selection
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 5
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
Process default main storage
pool is used for object.
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Machine default main storage
pool is used for object.
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">53
</TD><TD ALIGN="RIGHT" VALIGN="TOP">35
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Transient storage pool selection
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 6
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>
0 =
</TD><TD>
Default main storage pool
(process default or machine
default as specified for main
storage pool selection) is used
for object.
</TD></TR><TR VALIGN="TOP"><TD>
1 =
</TD><TD>
Transient storage pool is used
for object.
</TD></TR></TABLE>
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">53
</TD><TD ALIGN="RIGHT" VALIGN="TOP">35
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Obsolete
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bit 7
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">
<P>This field is no longer used and will be ignored.
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">53
</TD><TD ALIGN="RIGHT" VALIGN="TOP">35
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Unit number
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 8-15
+
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">53
</TD><TD ALIGN="RIGHT" VALIGN="TOP">35
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Bits 16-23
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">56
</TD><TD ALIGN="RIGHT" VALIGN="TOP">38
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Expanded transfer size advisory
</TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4">Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">57
</TD><TD ALIGN="RIGHT" VALIGN="TOP">39
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(1)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">58
</TD><TD ALIGN="RIGHT" VALIGN="TOP">3A
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Public authority
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">60
</TD><TD ALIGN="RIGHT" VALIGN="TOP">3C
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Extension offset
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">64
</TD><TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Context
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">System pointer
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">80
</TD><TD ALIGN="RIGHT" VALIGN="TOP">50
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Access group
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">System pointer
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">96
</TD><TD ALIGN="RIGHT" VALIGN="TOP">60
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">--- End ---
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
<BR></TD></TR></TABLE>
<TABLE><TR><TD ALIGN="LEFT" VALIGN="TOP"><B>Note:</B></TD><TD ALIGN="LEFT" VALIGN="TOP">
The instruction ignores the values
associated with template fields annotated with a plus sign (+).
</TD></TR></TABLE>
A template extension must be specified for the <I>initial owner
specified</I> creation option.
Also, the template extension must be specified (<I>extension
offset</I> must be nonzero) to specify any of the other template
extension fields (those other than the initial owner user profile) as
input to the instruction.
<P>
The template extension is located by the <I>extension
offset</I> field.
The template extension must be 16-byte aligned in the
space.  The following is the format of the template extension:
<BR>
<TABLE>
<TR>
<TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="2">Offset
</TH><TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="12"><BR></TH></TR><TR>
<TH ALIGN="RIGHT" VALIGN="TOP">Dec
</TH><TH ALIGN="RIGHT" VALIGN="TOP">Hex
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Field Name
</TH><TH ALIGN="LEFT" VALIGN="TOP">
<BR></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Data Type and Length
</TH></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="RIGHT" VALIGN="TOP">0
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">User profile
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">System pointer
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">16
</TD><TD ALIGN="RIGHT" VALIGN="TOP">10
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Largest size needed for space
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Bin(4)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">20
</TD><TD ALIGN="RIGHT" VALIGN="TOP">14
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Domain assigned to the object
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(2)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="RIGHT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD>Hex 0000 =
</TD><TD>The domain
will be chosen by the machine.
</TD></TR><TR VALIGN="TOP"><TD>Hex 0001 =
</TD><TD>The domain will be 'User'.
</TD></TR><TR VALIGN="TOP"><TD>Hex 8000 =
</TD><TD>The domain will be 'System'.
</TD></TR></TABLE>
</TD><TD ALIGN="LEFT" VALIGN="TOP"><BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><BR></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">22
</TD><TD ALIGN="RIGHT" VALIGN="TOP">16
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Reserved (binary 0)
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">Char(42)
</TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP">64
</TD><TD ALIGN="RIGHT" VALIGN="TOP">40
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">--- End ---
</TD><TD ALIGN="LEFT" VALIGN="TOP">
<BR></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5">
<BR></TD></TR></TABLE>
<P>
If the created object is permanent, it is owned by the user
profile governing thread execution.  The owning user profile
is implicitly assigned
all private authority states for the object.  The storage occupied by the
created object is charged to this owning user profile.
If the created object is temporary, there is no owning user
profile, and all authority states are assigned as public.  Storage
occupied by the created space is charged to the process.
<P>
Permanent space objects cannot be created by user state programs when the
system security level is 40 or above.
<P>
The <B><U>object identification</U></B> specifies the symbolic name that
identifies the space within the machine.  An <B><U>object type</U></B>
of hex 19
is implicitly supplied by the machine.  The <I>object
identification</I> is used to
identify the object on materialize instructions
as well as to locate the object in a context that addresses the object.
The <I>object subtype</I> must be
hex EF.
<P>
The <B><U>existence attribute</U></B> specifies whether the space
is to be created as temporary or permanent.  A <I>temporary</I> space,
if not explicitly destroyed by the user, is implicitly destroyed by the
machine when machine processing is terminated.  A <I>permanent</I>
space exists
in the machine until it is explicitly destroyed by the user.
<P>
The <B><U>space attribute</U></B> specifies whether the size of the space can
vary.  The space may have a <I>fixed</I> size or a <I>variable</I>
size.  The initial allocation is as specified in the <B><U>size of
space</U></B> field.  The machine allocates a space of at least the size
specified.  The actual size allocated depends on an algorithm defined by
a specific implementation.  A fixed size space of zero length causes
a <I>template value invalid&nbsp; </I>(hex <A HREF="../exceptions/EX3801.htm">3801</A>) exception to be signaled.
<P>
If the <B><U>initial context</U></B> creation attribute field indicates that <I>addressability is inserted into context</I>, the <B><U>context</U></B>
field must contain a system pointer that identifies a context where
addressability to the newly created space is to be placed.
If <I>addressability is not inserted into a context</I>,
the <I>context</I> field is ignored.
<P>
If the <B><U>access group</U></B> creation attribute field indicates
that the space is to be created in an access group, the <I>access
group</I> field must be a system pointer that identifies
the access group in which the space is to be
created.  If the space
is being <I>created as a member of an access group</I>,
the <I>existence attribute</I>
field must be <I>temporary</I> (bit 0 equals 0).
If the space <I>is not to be created
into an access group</I>, the <I>access group</I> field is ignored.
<P>
The <B><U>expanded transfer size advisory</U></B> specifies
the desired
number of pages to be transferred between main store and
auxiliary storage for implicit access state changes.
This value is only an advisory; the machine may use a
value of its choice for performing access state changes under
some circumstances.
For example, the machine may limit the transfer size to a smaller
value than is specified.
A value of zero is an explicit indication
that the machine should use the
machine default storage transfer size for this object.
<P>
The <B><U>public authority specified</U></B> creation option controls whether
or not the space is to be created with the public authority specified in
the template.  When <I>yes</I>
is specified, the space is created with the
public authority specified in the <B><U>public authority</U></B> field of the
template.  When <I>no</I>
is specified, the <I>public authority</I> field is ignored
and the space is created with default public authority.  The default
public authority depends on the value of the <I>existence
attribute</I>:  An <I>existence attribute</I>
value of <I>temporary</I> results in a default public
authority of all authority; an <I>existence attribute</I> value of <I>permanent</I>
results in a default public authority of no authority.
<P>
The <B><U>initial owner specified</U></B> creation option controls whether or
not the initial owner of the space is to be the user profile specified
in the template.  When <I>yes</I>
is specified, initial ownership is assigned
to the user profile specified in the <B><U>user profile</U></B> field of the
template extension.  When <I>no</I>
is specified, initial ownership is assigned
to the thread user profile and the <I>user profile</I> field
in the template
extension is ignored.  The initial owner user profile is implicitly
assigned all authority states for the object.  The storage occupied by
the created space is charged to the initial owner.  If <I>yes</I>
is specified
for this creation option when the <I>existence attribute</I> specifies <I>temporary</I>, a <I> template value invalid&nbsp; </I> (hex <A HREF="../exceptions/EX3801.htm">3801</A>) exception
will be signaled.
<P>
The <B><U>set public authority in operand 1</U></B> creation option controls,
when the <I>public authority specified</I>
creation option has also been
specified as <I>yes</I>,
whether or not the public authority attribute for the space
is to be set into the system pointer returned in operand 1.  When <I>yes</I> is
specified, the specified <I>public authority</I>
is set into operand 1.  When <I>no</I>
is specified, public authority is not set into operand 1.  When the <I>public authority specified</I> creation option is set to <I>no</I>, this
option can not be specified as <I>yes</I>
(or else a <I> template value invalid&nbsp; </I> (hex <A HREF="../exceptions/EX3801.htm">3801</A>) exception
will be signalled)
and the authority set into operand 1
is the default of no authority for a <I>permanent</I>
or all authority for a <I>temporary</I> object (as specified by the <I>existence
attribute</I>).
<P>
The <B><U>initialize space</U></B>
creation option controls whether or not the space is to be initialized.
When <I>initialize</I>
is specified, each byte of the space is initialized to a value specified
by the <B><U>initial value of space</U></B> field.  Additionally, when the
space is extended in size, this byte value is also used to initialize
the new allocation.  When <I>do not initialize</I> is specified, the <I>initial value of
space</I> field is ignored and the initial value of the bytes of the
space are unpredictable.
<P>
When <I>do not initialize</I>
is specified for a space,
internal machine algorithms do ensure that
any storage resources last used for allocations to another object
which are reused to satisfy allocations for the
space are reset to a machine default value to avoid possible access of
data which may have been stored in the other object.  To the contrary,
reusage of storage areas previously used by the space object are not
reset, thereby exposing subsequent reallocations of those storage
areas within the space to access of the data which was previously
stored within
them.
<P>
The <B><U>automatically extend space</U></B>
creation option controls whether the space is to be extended
automatically by the machine
or a <I> space addressing violation&nbsp; </I> (hex <A HREF="../exceptions/EX0601.htm">0601</A>) exception
is to be signaled
when a reference is made to an area
beyond the allocated portion of the space.
When <I>yes</I> is specified, the space will automatically be extended
by an amount determined through internal machine algorithms.  When <I>no</I> is specified, the exception will result.
Note that an attempt to reference an area
beyond that for the maximum size that a space
can be allocated, will always result in the signaling of the <I> space addressing violation&nbsp; </I> (hex <A HREF="../exceptions/EX0601.htm">0601</A>) exception
independently of the setting of this
attribute.
The <I>automatically extend space</I>
creation option can only be specified when the <I>space attribute</I>
has been specified as <I>variable length</I>.
Invalid specification of the <I>automatically extend space</I> option
results in the
signaling of the <I> template value invalid&nbsp;</I> (hex <A HREF="../exceptions/EX3801.htm">3801</A>) exception.
<P>
Usage of the <I>automatically extend space function</I> is limited.
Predictable results will occur only when you ensure that the
automatic extension of a space will not happen in conjunction with
modification of the space size by another thread.
That is, you must ensure that when a thread
is using the space in a manner that could cause it to be automatically
extended, it is the sole thread which can cause the space size to
be modified.
Note that in addition to implicit modification through automatic
extension, the space size can be explicitly modified through use of the
Modify Space Attributes (<A HREF="MODS.htm">MODS</A>) instruction.
<P>
The <B><U>hardware storage protection level</U></B> can be used to restrict
access to the contents of the space by user state programs.
It is possible to limit the
access of the space by user state programs into 1 of three
levels:
<UL>
<P><LI><I>Reference only</I>
(non-modifying storage references are allowed,
modifying
storing storage references yield an <I> object domain or hardware storage protection violation&nbsp;</I> (hex <A HREF="../exceptions/EX4401.htm">4401</A>) exception).
<P><LI><I>No storage references</I> (all storage references,
modifying or non-modifying
yield an <I> object domain or hardware storage protection violation&nbsp;</I> (hex <A HREF="../exceptions/EX4401.htm">4401</A>) exception).
<P><LI><I>Full access</I> (both modifying and non-modifying storage
references are allowed).
</UL>
<P> <B><U>Process temporary space accounting</U></B> can be used to
detect when temporary space objects, created within a
process, still exist at process termination time.
Temporary spaces that are created with the <I>process temporary space
accounting</I> field set to 0 will be "tracked" to the
process which created them.  Temporary spaces that are
created with the <I>process temporary space
accounting</I> field set to 1 will not be "tracked" to the
creating process.
<P>
At process termination time, any tracked spaces that
exist may cause the machine to
attempt to destroy the existing tracked spaces.  If this
is done, the destroy attempts would be performed as if an
MI program issued a Destroy Space (<A HREF="DESS.htm">DESS</A>) instruction
for each of the existing spaces.
<P>
The purpose of <I>process temporary space accounting</I> is to
identify objects which may be "lost" in the system (until
the next IPL).  It should not intentionally be used (by MI)
as a method of cleaning up temporary space objects at process
termination time.
The machine does not guarantee that all spaces (that should be tracked)
will indeed be tracked.
Also, if the machine is attempting
to destroy tracked spaces at process termination time, any
failures in the deletion attempts (such as if a space is
locked to another process) will be ignored (i.e. the space will
not be destroyed) and no indication of this is presented to the
MI user.
<P> <I>Process temporary space accounting</I> only applies to temporary
space objects.  A value of 1 for the <I>process temporary space
accounting</I> field when creating a permanent object
will result in a <I> template value invalid&nbsp;</I> (hex <A HREF="../exceptions/EX3801.htm">3801</A>) exception.
This is in spite of the fact that a value of 1 for this
field would result in the same
actions as when creating a permanent object (i.e. the object would
not be tracked to the process).  The exception is presented because
this field is undefined for permanent objects.
<P>
The <B><U>always enforce hardware storage protection of space</U></B>
field is used to specify whether the hardware storage protection
given in the <I>hardware storage protection level</I> field should
be enforced at all times for this space, or only when
hardware storage protection is being enforced for all storage.
<P>
The <B><U>ASP number</U></B> field specifies the ASP number of the ASP on
which the unit is to be allocated.  A value of 0 indicates an <I>ASP number</I>
is not specified and results in the default of allocating the object in
the system ASP.  Allocation on the system ASP can only be done
implicitly by not specifying an ASP number.  The only non-zero values
<font color=blue>
allowed are 2 through 99 which specify the user ASP on which the space
object will be allocated.
Independent ASPs have numbers 33 through 99.
The <I>ASP number</I>
must specify an existing ASP.
An <I>ASP number</I> of 1 or greater than 99 results in a <I> template value invalid&nbsp;</I> (hex <A HREF="../exceptions/EX3801.htm">3801</A>) exception being signalled.  The given <I>ASP number</I> must be
currently configured on the system otherwise an <I>auxiliary storage pool number invalid&nbsp; </I>(hex <A HREF="../exceptions/EX1C09.htm">1C09</A>) exception is
signalled.
If the ASP number identifies an independent ASP, there must be an existing
active logical unit description for the independent ASP otherwise an <I> auxiliary storage pool number invalid&nbsp;</I> (hex <A HREF="../exceptions/EX1C09.htm">1C09</A>) exception is signalled.
</FONT>
A temporary object cannot be created into a user ASP.
If this is attempted, a <I>template value invalid&nbsp; </I>(hex <A HREF="../exceptions/EX3801.htm">3801</A>) exception is signalled.
The <I>ASP
number</I> attribute of an object
can be materialized, but cannot be modified.
<P>
<P>
The <B><U>performance class</U></B>
fields provide information allowing the machine
to more effectively manage the space object considering the
overall performance objectives of operations involving the
space.
<P>
The <B><U>extension offset</U></B>
specifies the byte offset from the beginning of
the operand 2 template to the beginning of the template extension.  An
offset value of zero specifies that the template extension is not
provided.  A negative offset value is invalid.  A non-zero offset
must be a multiple of 16 (to cause 16 byte alignment of the
extension).
Except for these
restrictions, the offset value is not verified for correctness
relative to the location of other portions of the create template.
<P>
The <B><U>largest size needed for space</U></B>
field of the template extension
specifies, when nonzero, a value in bytes that indicates the largest
size that will be needed for the space.  This field is different
from the <I>size of space</I>
field which indicates the size for the initial
allocation of the space.  This field can be used to communicate to the
machine what the largest size needed for the space will be.
Specification
of a value larger than the maximum size space allowed for
the space alignment chosen
is invalid and results in signaling of the <I> template value invalid&nbsp;</I> (hex <A HREF="../exceptions/EX3801.htm">3801</A>) exception.
Specification of a nonzero value that is less
than the <I>size of space</I> field also results in the signaling of the <I> template value invalid&nbsp;</I> (hex <A HREF="../exceptions/EX3801.htm">3801</A>) exception.
For more information on
the maximum allowed, see <A class="content" HREF="#HDRCRTSL">"Limitations (Subject to Change)"</A>.
<P>
Specifying the <I>largest size needed for space</I>
value allows the machine,
under certain circumstances, to select usage of an internal storage
allocation unit which best utilizes the internal addressing resources
within the machine.  Note that the internal storage allocation unit
selected can alter the maximum modification size of the associated space
for the object.  However, the machine will always use an internal storage
allocation unit that will allow for extension of the space to at least
the value specified in the <I>largest size needed for space</I> field.  The
maximum size to which the space can be modified is dependent upon
specific implementations of the machine and can vary with different
machine implementations.  For more information on the effect of this
option, see <A class="content" HREF="#HDRCRTSL">"Limitations (Subject to Change)"</A>.
<P>
The <B><U>domain assigned</U></B> field in the template extension allows the
user of this instruction to override the domain for this object
that would otherwise
be chosen by the machine.
<P>
Any value specified
for the <I>domain assigned</I> field other than those listed will
result in a <I> template value invalid&nbsp; </I> (hex <A HREF="../exceptions/EX3801.htm">3801</A>) exception
being signalled.
<P>
<H5><A NAME="HDRCRTSL">Limitations (Subject to Change)</A></H5>
<P>
The following are limits that apply to the functions performed by this
instruction.
These limits may change on different implementations of the machine.
<P>
The maximum size of any space object for which the
machine chose the alignment
is returned by option Hex 0003 of <A HREF="MATMDATA.htm">MATMDATA</A>.
The maximum size of a particular space object is
returned by the <A HREF="MATS.htm">MATS</A> instruction.
<P>
<H4><A NAME="Header_4">Authorization Required</A></H4>
<UL>
<P><LI>Insert
<UL>
<P><LI>User profile of object owner
<P><LI>Context identified in operand 2
</UL>
<P><LI>
Execute
<UL>
<P><LI>Context referenced for address resolution
</UL>
<P><LI>Object control
<UL>
<P><LI>Operand 1 if being replaced
</UL>
</UL>
<P>
<H4><A NAME="Header_5">Lock Enforcement</A></H4>
<UL>
<P><LI>Materialize
<UL>
<P><LI>Contexts referenced for address resolution
</UL>
<P><LI>
Modify
<UL>
<P><LI>Context identified in operand 2
<P><LI>User profile of object owner
<P><LI>Access group identified in operand 2
</UL>
</UL>
<P>
<H4><A NAME="Header_6">Exceptions</A></H4>
<DL>
<DD><P>06 Addressing
<DL COMPACT>
<DD><A HREF="../exceptions/EX0601.htm">0601 Space Addressing Violation</A>
<DD><A HREF="../exceptions/EX0602.htm">0602 Boundary Alignment</A>
<DD><A HREF="../exceptions/EX0603.htm">0603 Range</A>
</DL>
<DD><P>08 Argument/Parameter
<DL COMPACT>
<DD><A HREF="../exceptions/EX0801.htm">0801 Parameter Reference Violation</A>
</DL>
<DD><P>0A Authorization
<DL COMPACT>
<DD><A HREF="../exceptions/EX0A01.htm">0A01 Unauthorized for Operation </A>
</DL>
<DD><P>0E Context Operation
<DL COMPACT>
<DD><A HREF="../exceptions/EX0E01.htm">0E01 Duplicate Object Identification</A>
</DL>
<DD><P>10 Damage Encountered
<DL COMPACT>
<DD><A HREF="../exceptions/EX1004.htm">1004 System Object Damage State</A>
<DD><A HREF="../exceptions/EX1005.htm">1005 Authority Verification Terminated Due to Damaged Object</A>
<DD><A HREF="../exceptions/EX1044.htm">1044 Partial System Object Damage</A>
</DL>
<DD><P>1A Lock State
<DL COMPACT>
<DD><A HREF="../exceptions/EX1A01.htm">1A01 Invalid Lock State</A>
</DL>
<DD><P>1C Machine-Dependent
<DL COMPACT>
<DD><A HREF="../exceptions/EX1C03.htm">1C03 Machine Storage Limit Exceeded</A>
<DD><A HREF="../exceptions/EX1C04.htm">1C04 Object Storage Limit Exceeded</A>
<DD><A HREF="../exceptions/EX1C09.htm">1C09 Auxiliary Storage Pool Number Invalid</A>
<font color=blue>
<DD><A HREF="../exceptions/EX1C0E.htm">1C0E IASP Resources Exceeded</A>
</FONT>
</DL>
<DD><P>20 Machine Support
<DL COMPACT>
<DD><A HREF="../exceptions/EX2002.htm">2002 Machine Check</A>
<DD><A HREF="../exceptions/EX2003.htm">2003 Function Check</A>
</DL>
<DD><P>22 Object Access
<DL COMPACT>
<DD><A HREF="../exceptions/EX2201.htm">2201 Object Not Found </A>
<DD><A HREF="../exceptions/EX2202.htm">2202 Object Destroyed </A>
<DD><A HREF="../exceptions/EX2203.htm">2203 Object Suspended </A>
<DD><A HREF="../exceptions/EX2207.htm">2207 Authority Verification Terminated Due to Destroyed Object</A>
<DD><A HREF="../exceptions/EX2208.htm">2208 Object Compressed </A>
</DL>
<DD><P>24 Pointer Specification
<DL COMPACT>
<DD> <A HREF="../exceptions/EX2401.htm">2401 Pointer Does Not Exist</A>
<DD> <A HREF="../exceptions/EX2402.htm">2402 Pointer Type Invalid </A>
<DD> <A HREF="../exceptions/EX2403.htm">2403 Pointer Addressing Invalid Object Type</A>
</DL>
<DD><P>2E Resource Control Limit
<DL COMPACT>
<DD><A HREF="../exceptions/EX2E01.htm">2E01 User Profile Storage Limit Exceeded</A>
</DL>
<DD><P>36 Space Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX3601.htm">3601 Space Extension/Truncation</A>
</DL>
<DD><P>38 Template Specification
<DL COMPACT>
<DD><A HREF="../exceptions/EX3801.htm">3801 Template Value Invalid</A>
</DL>
<DD><P>44 Protection Violation
<DL COMPACT>
<DD><A HREF="../exceptions/EX4401.htm">4401 Object Domain or Hardware Storage Protection Violation</A>
<DD><A HREF="../exceptions/EX4402.htm">4402 Literal Values Cannot Be Changed</A>
</DL>
</DL>

</body>

</HTML>
