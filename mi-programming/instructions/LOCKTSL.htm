  <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
  <head>
<title> LOCKTSL Instruction </title>
			<link rel="stylesheet" type="text/css" href="../tstudio.css">
</head>

<body>
<H1>Lock Teraspace Storage Location (LOCKTSL)</H1>
<P>
<font color=blue>

<BR>
<TABLE>
<TR>
<TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><font color=blue>Op Code (Hex)
</FONT></TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><font color=blue>Operand 1
</FONT></TH><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><font color=blue><BR></FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><font color=blue><BR></FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><font color=blue><BR></FONT></TD></TR><TR>
<TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><font color=blue>0315
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><font color=blue>Lock request template
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><font color=blue><BR></FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><font color=blue><BR></FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH="20%"><font color=blue><BR></FONT></TD></TR></TABLE>
<font color=blue>
<P><I>Operand 1:</I>  Space pointer.<P>
<TABLE BORDER WIDTH="100%"><TR><TH ALIGN="LEFT"><font color=blue>Bound program access</font></TH><TR><TD>
<PRE>
<P><font color=blue>Built-in number for LOCKTSL is 621.
LOCKTSL (
         lock_request_template   : address of aggregate
)
</font>
</PRE>
</TD></TR></TABLE>
<P>
<P>
<H5><A NAME="Header_2">Description</A></H5>
<P>
<font color=blue>
The thread scoped locks
identified in the <I>lock request template</I>
(operand 1) are requested by the
current thread.
The LOCKTSL instruction can be used to lock teraspace storage
locations symbolically or as resolved single-level store addresses,
as well as any location which can be locked by the <A HREF="LOCKSL.htm">LOCKSL</A>
instruction. A maximum of 4093 locations can be locked with one
LOCKTSL instruction.
<P>If the <I>type of teraspace storage location lock</I> field in the <I>lock request template</I> is set to binary 0,
then all teraspace storage locations will be locked
symbolically.
This implies that only the thread which is performing
the lock operation and any other threads in the same process will ever
conflict on teraspace storage location locks.
<P>If the <I>type of teraspace storage location lock</I> field in the <I>lock request template</I> is set to binary 1,
then the resolved single-level store
location mapped to the teraspace storage location will be locked. This
requires that each teraspace storage location be either previously
allocated or mapped. If they are not, an <I> unsupported space use&nbsp; </I> (hex <A HREF="../exceptions/EX0607.htm">0607</A>) exception
is signaled and no locations are locked.
<P>If multiple threads, either in the same process or different
processes,
resolve their teraspace storage addresses
to a common single-level store location,
and the <I>type of teraspace storage location lock</I> field
was set to binary 1
when the lock requests were made by the threads,
then the locks will conflict according to the normal locking rules,
even though the individual teraspace storage addresses
are apparently different.
<P>If the location to be locked is not a teraspace storage location, the <I>type of teraspace storage location lock</I> field is ignored.
<P>
Locking a teraspace storage location does not prevent any byte
operation from
referencing that location, nor does it prevent the space from being
extended, truncated, or destroyed.
Teraspace storage location locks follow the
normal locking rules with respect to conflicts and waits.
<P>
The <I>lock request template</I>
identified by operand
1 must be aligned on a 16-byte boundary or an <I> boundary alignment&nbsp; </I> (hex <A HREF="../exceptions/EX0602.htm">0602</A>) exception
is signaled.
The format of operand 1 is as follows:
<P>
<BR>
<TABLE>
<TR>
<TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="2"><font color=blue>Offset
</FONT></TH><TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="12"><font color=blue><BR></FONT></TH></TR><TR>
<TH ALIGN="RIGHT" VALIGN="TOP"><font color=blue>Dec
</FONT></TH><TH ALIGN="RIGHT" VALIGN="TOP"><font color=blue>Hex
</FONT></TH><TH ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>Field Name
</FONT></TH><TH ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>Data Type and Length
</FONT></TH></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>Number of lock requests in the template (max 4093)
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>UBin(4)
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>4
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>4
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>Offset to lock state selection values
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>UBin(2)
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>6
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>6
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>Wait time-out value for instruction
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>Char(8)
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>14
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>E
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>Lock request options
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>Char(3)
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>14
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>E
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Reserved (binary 0)
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Bit 0
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>14
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>E
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Lock request type
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Bit 1
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD><font color=blue>0 =
</FONT></TD><TD><font color=blue>Immediate request.
</FONT></TD></TR><TR VALIGN="TOP"><TD><font color=blue>1 =
</FONT></TD><TD><font color=blue>Synchronous request.
</FONT></TD></TR></TABLE>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue><BR></FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue><BR></FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>14
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>E
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Access state modifications
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Bits 2-3
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>14
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>E
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>When the process is entering
lock wait for synchronous request:
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>Bit 2
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD><font color=blue>0 =
</FONT></TD><TD><font color=blue>Access state should not be modified.
</FONT></TD></TR><TR VALIGN="TOP"><TD><font color=blue>1 =
</FONT></TD><TD><font color=blue>Access state should be modified.
</FONT></TD></TR></TABLE>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue><BR></FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue><BR></FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>14
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>E
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>When the process is leaving
lock wait for synchronous request:
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>Bit 3
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD><font color=blue>0 =
</FONT></TD><TD><font color=blue>Access state should not be modified.
</FONT></TD></TR><TR VALIGN="TOP"><TD><font color=blue>1 =
</FONT></TD><TD><font color=blue>Access state should be modified.
</FONT></TD></TR></TABLE>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue><BR></FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue><BR></FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>14
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>E
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Type of teraspace storage location lock
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Bit 4
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD><font color=blue>0 =
</FONT></TD><TD><font color=blue>Lock the teraspace storage location symbolically.
</FONT></TD></TR><TR VALIGN="TOP"><TD><font color=blue>1 =
</FONT></TD><TD><font color=blue>Lock the resolved single-level store location mapped to the
teraspace storage location.
</FONT></TD></TR></TABLE>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue><BR></FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue><BR></FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>14
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>E
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Reserved (binary 0)
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Bit 5
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>14
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>E
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Time-out option
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Bit 6
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD><font color=blue>0 =
</FONT></TD><TD><font color=blue>Wait for specified time, then signal time-out exception.
</FONT></TD></TR><TR VALIGN="TOP"><TD><font color=blue>1 =
</FONT></TD><TD><font color=blue>Wait indefinitely.
</FONT></TD></TR></TABLE>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue><BR></FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue><BR></FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>14
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>E
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Reserved (binary 0)
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Bits 7-15
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>14
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>E
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Modify thread event mask option
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Bit 16
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD><font color=blue>0 =
</FONT></TD><TD><font color=blue>Do not modify thread event mask
</FONT></TD></TR><TR VALIGN="TOP"><TD><font color=blue>1 =
</FONT></TD><TD><font color=blue>Modify thread event mask
</FONT></TD></TR></TABLE>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue><BR></FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue><BR></FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>14
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>E
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Asynchronous signals processing option
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Bit 17
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD><font color=blue>0 =
</FONT></TD><TD><font color=blue>Do not allow asynchronous signal processing during Lock
Teraspace Storage Location wait.
</FONT></TD></TR><TR VALIGN="TOP"><TD><font color=blue>1 =
</FONT></TD><TD><font color=blue>Allow asynchronous signal processing during Lock
Teraspace Storage Location wait.
</FONT></TD></TR></TABLE>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue><BR></FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue><BR></FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>14
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>E
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Reserved (binary 0)
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Bits 18-23
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>17
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>11
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>Modify thread event mask control
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>Char(4)
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>17
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>11
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>New thread event mask
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>UBin(2)
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>19
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>13
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Previous thread event mask
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>UBin(2)
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>21
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>15
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>Reserved (binary 0)
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>Char(11)
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>32
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>20
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>Location(s) to be locked
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>&#91;*&#93; Space pointer
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>
(This should be repeated as specified by <I>number of
lock requests in the template</I> above.)
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue><BR></FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue><BR></FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>*
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>*
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>--- End ---
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>
</FONT></TD></TR></TABLE>
<P>
The <I>lock state selection</I> is located by adding the <I>offset to
lock state selection values</I> above to operand 1.
<BR>
<TABLE>
<TR>
<TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="2"><font color=blue>Offset
</FONT></TH><TH ALIGN="CENTER" VALIGN="TOP" COLSPAN="12"><font color=blue><BR></FONT></TH></TR><TR>
<TH ALIGN="RIGHT" VALIGN="TOP"><font color=blue>Dec
</FONT></TH><TH ALIGN="RIGHT" VALIGN="TOP"><font color=blue>Hex
</FONT></TH><TH ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>Field Name
</FONT></TH><TH ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TH><TH ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>Data Type and Length
</FONT></TH></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>Lock state selection
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>&#91;*&#93; Char(1)
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>
(repeated for each pointer in the template)
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue><BR></FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue><BR></FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Requested lock state
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Bits 0-4
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>
(1 = lock requested, 0 = lock not requested)
Only one state may be requested per entry.
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue><BR></FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue><BR></FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>LSRD lock
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>Bit 0
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>LSRO lock
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>Bit 1
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>LSUP lock
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>Bit 2
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>LEAR lock
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>Bit 3
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>LENR lock
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="3"><font color=blue>Bit 4
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Reserved (binary 0)
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Bits 5-6
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>0
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Entry active indicator
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>Bit 7
</FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue>
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD><font color=blue>0 =
</FONT></TD><TD><font color=blue>Entry not active- This entry is to be ignored.
</FONT></TD></TR><TR VALIGN="TOP"><TD><font color=blue>1 =
</FONT></TD><TD><font color=blue>Entry active- Obtain this lock.
</FONT></TD></TR></TABLE>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="2"><font color=blue><BR></FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="4"><font color=blue><BR></FONT></TD></TR><TR>
<TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>*
</FONT></TD><TD ALIGN="RIGHT" VALIGN="TOP"><font color=blue>*
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>--- End ---
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP"><font color=blue>
</FONT></TD><TD ALIGN="LEFT" VALIGN="TOP" COLSPAN="5"><font color=blue>
</FONT></TD></TR></TABLE>
<P>
<H5><A NAME="Header_3">Lock Allocation Procedure</A></H5>
<P>
A single Lock Teraspace Storage Location instruction can request
the allocation
of one or more lock states on one or more storage locations.
The locks are granted sequentially until all the locks
requested are granted. However, all teraspace storage locations are
treated the same as specified by the <I>type of teraspace storage location lock</I>
field in the template.
<P>
The <B><U>type of teraspace storage location lock</U></B> field determines if
teraspace storage
locations are to be locked symbolically or if the single-level store
location mapped to the teraspace storage location will be locked.
If this field is set to binary 1,
then all teraspace storage locations specified in the
template will be resolved to their single-level store location
before being locked.
This allows locks on shared memory mapped locations to
conflict even though the teraspace storage locations are different.
The teraspace storage location
is required to have been previously allocated or
mapped by each thread performing the lock operation.
If the teraspace storage location has not been allocated or mapped, an <I> unsupported space use&nbsp; </I> (hex <A HREF="../exceptions/EX0607.htm">0607</A>) exception
is signaled.
<P>If the <I>type of teraspace storage location lock</I> field
is set to binary 0,
then all teraspace storage locations specified in the template will be
treated as symbolic locations.
Therefore, if two different teraspace storage locations
map to the same single-level store location,
and the field is set to binary 0,
then the locks will never conflict, even within a
single process.
<P>Note that when locks are materialized using Materialize Process
Locks, (<A HREF="MATPRLK.htm">MATPRLK</A>), if the lock was acquired with the <I>type of teraspace storage location lock</I> field set to binary 1,
then a null pointer value will be returned.
In addition, if the process whose locks
are being materialized is not the current process, then a null pointer
value is returned for any lock on a teraspace storage location. If
the current process is materializing its own locks, then a space
pointer to the teraspace is generated when the lock was
acquired with the <I>type of teraspace storage location lock</I>
field set to binary 0.
<P>
The <B><U>wait time-out value for instruction </U></B> field establishes the maximum amount of time
that a thread competes for the requested set of locks when the <I>lock request type</I> is <I>synchronous</I>.
See
<A class="content" HREF="../MININ.htm#HDRTIMEFMT">Standard Time Format</A> for additional information
on the format of
the <I>wait time-out value for instruction</I> field.
The maximum wait time-out interval allowed is a value equal to
(2 <SUP>48</SUP> - 1) microseconds.  Any value that indicates more time
than the maximum wait time-out interval causes the maximum
wait time-out interval to be used.
If the <I>wait time-out value for instruction</I> field
is set to a value of binary 0,
then the value associated with the default wait time-out
parameter in the process definition template is used.
<P>
When a requested lock state cannot be immediately granted, any locks
already granted by this Lock Teraspace Storage Location instruction
are released
and the <I>lock request type</I> specified in the lock request
template establishes the machine action.  The <B><U>lock request type</U></B>
values are described in the following paragraphs.
<UL>
<P><LI> <I>Immediate request</I>- If the requested locks
cannot be granted immediately, this option causes the <I> lock request not grantable&nbsp; </I> (hex <A HREF="../exceptions/EX1A02.htm">1A02</A>) exception
to be signaled.
No location locks are granted, and the lock request is canceled.
<P><LI> <I>Synchronous request</I>- This option causes the thread
requesting the locks to be placed in the wait state until all requested
locks can be granted.  If the locks cannot be granted in the time
interval established by the <I>wait time-out value for instruction</I>
field specified in the lock request template, a <I> space location lock wait time-out&nbsp; </I> (hex <A HREF="../exceptions/EX3A04.htm">3A04</A>) exception
is signaled to the requesting thread
at the end of the interval.  No locks are granted, and the lock request
is canceled.
</UL>
<P>
When:
<UL COMPACT>
<LI>
the thread requesting the locks is the only thread in the
process at the time of the lock request, and
<LI>
the <I>lock request type</I> is <I>synchronous</I>, and
<LI>
the requested locks cannot be immediately granted,
</UL>
the <B><U>access state
modifications</U></B> field in the lock request template specifies whether
the access state of the process access group is to be modified on
entering and/or returning from the lock wait.  The parameter has no
effect if the process instruction wait access state control attribute
specifies that no access state modification is allowed.  If the process
attribute value specifies that access state modification is allowed and
the wait on event access state modification option specifies modify
access state, the machine modifies the access state for the specified
process access group.
<P>
If the <I>lock request type</I> is <I>synchronous</I> and the
invocation containing the Lock Teraspace Storage Location instruction is
terminated, then the lock request is canceled.
<P>Allocated space location locks are removed when the thread holding
the locks terminates.  If a thread terminates while waiting for a
teraspace storage location lock, the lock request is canceled.
<P>
The <B><U>modify thread event mask option</U></B> controls the state of the
event mask in the thread executing this instruction.  When the thread
event mask is in the <I>masked</I> state, the machine does not
schedule signaled event monitors in the thread.  The event monitors
continue to be signaled by the machine or other threads.  When the
thread event mask is modified to the <I>unmasked</I> state, event
handlers are scheduled to handle those events that occurred while the
thread was masked and those events occurring while in the unmasked
state.
<P>
If the system security level machine attribute is hex 40 or greater and
the thread is running in user state, then the <I>modify thread event
mask option</I> is not allowed and a <I> template value invalid&nbsp; </I> (hex <A HREF="../exceptions/EX3801.htm">3801</A>) exception
is signalled.
<P>
When the <I>modify thread event mask</I> is set to 1, the <B><U>previous thread event mask</U></B> will be returned and the <B><U>new
thread event mask</U></B> will take effect only when
lock(s) have been successfully granted.  If the lock
request is not successful, the <I>previous thread event mask</I>
value is not returned, nor does the <I>new thread event mask</I> take
effect.
<P>
The thread event mask values are validity checked only when the modify
thread event mask is set to 1, and ignored otherwise.  Valid masking
values are:
<TABLE CELLPADDING="3">
<TR VALIGN="TOP"><TD><font color=blue>0
</FONT></TD><TD><font color=blue>Masked
</FONT></TD></TR><TR VALIGN="TOP"><TD><font color=blue>256
</FONT></TD><TD><font color=blue>Unmasked
</FONT></TD></TR></TABLE>
<P>
Other values are reserved and must not be specified, otherwise a <I> template value invalid&nbsp; </I> (hex <A HREF="../exceptions/EX3801.htm">3801</A>) exception
is signaled.
<P>
The <B><U>asynchronous signals processing option</U></B> controls the action
to be taken if an asynchronous signal is pending or received while in
lock wait.  If an asynchronous signal that is not
blocked or ignored is generated for the thread and the <I>asynchronous
signals processing option</I> indicates <I>allow asynchronous signals
processing during Lock Teraspace Storage Location wait</I>,
the Lock Teraspace Storage
Location wait will be terminated and an <I>asynchronous signal terminated MI wait&nbsp; </I>(hex <A HREF="../exceptions/EX4C01.htm">4C01</A>) exception is signaled.
Otherwise, when the <I>asynchronous signals processing option</I>
indicates <I>do not allow asynchronous signals processing during
Lock Teraspace Storage Location wait</I>,
the thread remains in the wait until
all requested locks can be granted or until the <I>wait time-out
value for instruction</I> expires.
<P>
If any exception is identified during the instruction's execution, any
locks already granted by the instruction are released, and the lock
request is canceled.
<P>
For each lock, counts are kept by lock state
and by thread.  When a lock request is granted, the appropriate <I>lock count</I> of each lock state specified is incremented by 1.
<P>
<H4><A NAME="Header_4">Authorization Required</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_5">Lock Enforcement</A></H4>
<UL>
<P><LI>None
</UL>
<P>
<H4><A NAME="Header_6">Exceptions</A></H4>
<DL>
<DD><P>06 Addressing
<DL COMPACT>
<DD><A HREF="../exceptions/EX0601.htm">0601 Space Addressing Violation</A>
<DD><A HREF="../exceptions/EX0602.htm">0602 Boundary Alignment</A>
<DD><A HREF="../exceptions/EX0603.htm">0603 Range</A>
<DD><A HREF="../exceptions/EX0607.htm">0607 Unsupported Space Use</A>
</DL>
<DD><P>08 Argument/Parameter
<DL COMPACT>
<DD><A HREF="../exceptions/EX0801.htm">0801 Parameter Reference Violation</A>
</DL>
<DD><P>10 Damage Encountered
<DL COMPACT>
<DD><A HREF="../exceptions/EX1004.htm">1004 System Object Damage State</A>
<DD><A HREF="../exceptions/EX1044.htm">1044 Partial System Object Damage</A>
</DL>
<DD><P>1A Lock State
<DL COMPACT>
<DD><A HREF="../exceptions/EX1A02.htm">1A02 Lock Request Not Grantable </A>
</DL>
<DD><P>1C Machine-Dependent
<DL COMPACT>
<DD><A HREF="../exceptions/EX1C03.htm">1C03 Machine Storage Limit Exceeded</A>
<DD><A HREF="../exceptions/EX1C06.htm">1C06 Machine Lock Limit Exceeded</A>
</DL>
<DD><P>20 Machine Support
<DL COMPACT>
<DD><A HREF="../exceptions/EX2002.htm">2002 Machine Check</A>
<DD><A HREF="../exceptions/EX2003.htm">2003 Function Check</A>
</DL>
<DD><P>22 Object Access
<DL COMPACT>
<DD><A HREF="../exceptions/EX2202.htm">2202 Object Destroyed </A>
<DD><A HREF="../exceptions/EX2208.htm">2208 Object Compressed </A>
<DD>220B Object Not Available
</DL>
<DD><P>24 Pointer Specification
<DL COMPACT>
<DD> <A HREF="../exceptions/EX2401.htm">2401 Pointer Does Not Exist</A>
<DD> <A HREF="../exceptions/EX2402.htm">2402 Pointer Type Invalid </A>
</DL>
<DD><P>2E Resource Control Limit
<DL COMPACT>
<DD><A HREF="../exceptions/EX2E01.htm">2E01 User Profile Storage Limit Exceeded</A>
</DL>
<DD><P>36 Space Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX3601.htm">3601 Space Extension/Truncation</A>
</DL>
<DD><P>38 Template Specification
<DL COMPACT>
<DD><A HREF="../exceptions/EX3801.htm">3801 Template Value Invalid</A>
</DL>
<DD><P>3A Wait Time-Out
<DL COMPACT>
<DD><A HREF="../exceptions/EX3A04.htm"><A HREF="../exceptions/EX3A04.htm">3A04 Space Location Lock Wait Time-Out</A></A>
</DL>
<DD><P>44 Protection Violation
<DL COMPACT>
<DD><A HREF="../exceptions/EX4401.htm">4401 Object Domain or Hardware Storage Protection Violation</A>
<DD><A HREF="../exceptions/EX4402.htm">4402 Literal Values Cannot Be Changed</A>
</DL>
<DD><P>4C Signals Management
<DL COMPACT>
<DD><A HREF="../exceptions/EX4C01.htm"><A HREF="../exceptions/EX0C0B.htm">0C0B Zero Divide</A></A>
</DL>
</DL>
</FONT>

</body>

</HTML>
